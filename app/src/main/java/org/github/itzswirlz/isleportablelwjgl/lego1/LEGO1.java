// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.github.itzswirlz.isleportablelwjgl.lego1;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LEGO1 extends org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1Config {
    static { Loader.load(); }

// Parsed from mxcore.h

// #ifndef MXCORE_H
// #define MXCORE_H

// #include "compat.h"
// #include "mxtypes.h"

// #include <string.h>

@Opaque public static class MxParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxParam(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc0f8
// VTABLE: BETA10 0x101c1bc8
// SIZE 0x08
@NoOffset public static class MxCore extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCore(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxCore(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxCore position(long position) {
        return (MxCore)super.position(position);
    }
    @Override public MxCore getPointer(long i) {
        return new MxCore((Pointer)this).offsetAddress(i);
    }

	public MxCore() { super((Pointer)null); allocate(); }
	private native void allocate();                       // vtable+00
	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+04

	// FUNCTION: LEGO1 0x10001f70
	// FUNCTION: BETA10 0x1000f380
	public native @Cast("MxResult") int Tickle(); // vtable+08

	// FUNCTION: LEGO1 0x100144c0
	// FUNCTION: BETA10 0x100126d0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100140d0
	// FUNCTION: BETA10 0x10012680
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxU32") long GetId();
}

// SYNTHETIC: BETA10 0x10096940
// MxCore::operator=
// #endif // MXCORE_H


// Parsed from mxticklemanager.h

// #ifndef MXTICKLEMANAGER_H
// #define MXTICKLEMANAGER_H

// #include "mxcore.h"
// #include "mxstl/stlcompat.h"
// #include "mxtypes.h"

// SIZE 0x10
@NoOffset public static class MxTickleClient extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleClient(Pointer p) { super(p); }

	public MxTickleClient(MxCore p_client, @Cast("MxTime") int p_interval) { super((Pointer)null); allocate(p_client, p_interval); }
	private native void allocate(MxCore p_client, @Cast("MxTime") int p_interval);

	public native MxCore GetClient();

	public native @Cast("MxTime") int GetTickleInterval();

	public native @Cast("MxTime") int GetLastUpdateTime();

	public native @Cast("MxU16") int GetFlags();

	public native void SetTickleInterval(@Cast("MxTime") int p_interval);

	public native void SetLastUpdateTime(@Cast("MxTime") int p_lastUpdateTime);

	public native void SetFlags(@Cast("MxU16") int p_flags);
}

// VTABLE: LEGO1 0x100d86d8
// VTABLE: BETA10 0x101bc9d0
// SIZE 0x14
@NoOffset public static class MxTickleManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTickleManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTickleManager position(long position) {
        return (MxTickleManager)super.position(position);
    }
    @Override public MxTickleManager getPointer(long i) {
        return new MxTickleManager((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x100937c0
	public MxTickleManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle();                                                // vtable+0x08
	public native void RegisterClient(MxCore p_client, @Cast("MxTime") int p_interval);          // vtable+0x14
	public native void UnregisterClient(MxCore p_client);                           // vtable+0x18
	public native void SetClientTickleInterval(MxCore p_client, @Cast("MxTime") int p_interval); // vtable+0x1c
	public native @Cast("MxTime") int GetClientTickleInterval(MxCore p_client);
}

public static final int TICKLE_MANAGER_NOT_FOUND = 0x80000000;

// TEMPLATE: LEGO1 0x1005a4a0
// list<MxTickleClient *,allocator<MxTickleClient *> >::~list<MxTickleClient *,allocator<MxTickleClient *> >

// TEMPLATE: BETA10 0x10093870
// List<MxTickleClient *>::List<MxTickleClient *>

// TEMPLATE: LEGO1 0x1005a530
// TEMPLATE: BETA10 0x10096340
// List<MxTickleClient *>::~List<MxTickleClient *>

// #endif // MXTICKLEMANAGER_H


// Parsed from mxtimer.h

// #ifndef MXTIMER_H
// #define MXTIMER_H

// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>

// VTABLE: LEGO1 0x100dc0e0
// VTABLE: BETA10 0x101c1bb0
// SIZE 0x10
@NoOffset public static class MxTimer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTimer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTimer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTimer position(long position) {
        return (MxTimer)super.position(position);
    }
    @Override public MxTimer getPointer(long i) {
        return new MxTimer((Pointer)this).offsetAddress(i);
    }

	public MxTimer() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void Start();
	public native void Stop();

	public native @Cast("MxLong") long GetRealTime();

	// FUNCTION: BETA10 0x1012bf50
	public native void InitLastTimeCalculated();

	// FUNCTION: BETA10 0x10017810
	public native @Cast("MxLong") long GetTime();
}

// SYNTHETIC: BETA10 0x1012bfc0
// MxTimer::~MxTimer

// #endif // MXTIMER_H


// Parsed from mxvideoparam.h

// #ifndef MXVIDEOPARAM_H
// #define MXVIDEOPARAM_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "mxgeometry.h"
// #include "mxtypes.h"
// #include "mxvideoparamflags.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxPalette extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxPalette() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPalette(Pointer p) { super(p); }
}

// SIZE 0x24
@NoOffset public static class MxVideoParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParam position(long position) {
        return (MxVideoParam)super.position(position);
    }
    @Override public MxVideoParam getPointer(long i) {
        return new MxVideoParam((Pointer)this).offsetAddress(i);
    }

	public MxVideoParam() { super((Pointer)null); allocate(); }
	private native void allocate();
//	public MxVideoParam(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		) { super((Pointer)null); allocate(p_rect, p_palette, p_backBuffers, p_flags); }
//	private native void allocate(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		);
	public MxVideoParam(@ByRef MxVideoParam p_videoParam) { super((Pointer)null); allocate(p_videoParam); }
	private native void allocate(@ByRef MxVideoParam p_videoParam);
	public native void SetDeviceName(@Cast("char*") BytePointer p_deviceId);
	public native void SetDeviceName(@Cast("char*") ByteBuffer p_deviceId);
	public native void SetDeviceName(@Cast("char*") byte[] p_deviceId);
	public native @ByRef @Name("operator =") MxVideoParam put(@Const @ByRef MxVideoParam p_videoParam);

	// FUNCTION: BETA10 0x100886e0
	public native @ByRef MxVideoParamFlags Flags();

	// FUNCTION: BETA10 0x100d81f0
//	public native @ByRef MxRect32 GetRect();

	// FUNCTION: BETA10 0x100d8210
	public native MxPalette GetPalette();

	// FUNCTION: BETA10 0x100d8240
	public native void SetPalette(MxPalette p_palette);

	// FUNCTION: BETA10 0x100d8270
	public native @Cast("char*") BytePointer GetDeviceName();

	// FUNCTION: BETA10 0x10141f60
	public native @Cast("MxU32") long GetBackBuffers();

	// FUNCTION: BETA10 0x10141fe0
	public native void SetBackBuffers(@Cast("MxU32") long p_backBuffers);
}

// #endif // MXVIDEOPARAM_H


// Parsed from mxvideoparamflags.h

// #ifndef MXVIDEOPARAMFLAGS_H
// #define MXVIDEOPARAMFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif

@NoOffset public static class MxVideoParamFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParamFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParamFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParamFlags position(long position) {
        return (MxVideoParamFlags)super.position(position);
    }
    @Override public MxVideoParamFlags getPointer(long i) {
        return new MxVideoParamFlags((Pointer)this).offsetAddress(i);
    }

	public MxVideoParamFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// inlined in ISLE
	public native void SetFullScreen(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141f80
	public native void SetFlipSurfaces(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141fb0
	public native void SetBackBuffers(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d9250
	public native void SetF1bit3(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void Set16Bit(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetWideViewAngle(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF1bit7(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d81b0
	public native void SetLacksLightSupport(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF2bit1(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x1009e770
	public native @Cast("MxBool") boolean GetFullScreen();

	// FUNCTION: BETA10 0x100d80f0
	public native @Cast("MxBool") boolean GetFlipSurfaces();

	// FUNCTION: BETA10 0x100d8120
	public native @Cast("MxBool") boolean GetBackBuffers();

	// FUNCTION: BETA10 0x10142010
	public native @Cast("MxBool") boolean GetF1bit3();

	// FUNCTION: BETA10 0x100d8150
	public native @Cast("MxBool") boolean Get16Bit();

	// FUNCTION: BETA10 0x100d8180
	public native @Cast("MxBool") boolean GetWideViewAngle();

	// FUNCTION: BETA10 0x100886b0
	public native @Cast("MxBool") boolean GetLacksLightSupport();

	// FUNCTION: BETA10 0x10142050
	public native @Cast("MxBool") boolean GetF2bit1();
}

// #endif // MXVIDEOPARAMFLAGS_H


// Parsed from decomp.h

// #ifndef DECOMP_H
// #define DECOMP_H

// #ifndef NDEBUG
// Disable size assertions for debug builds because the sizes differ between debug and release builds.
// The release LEGO1.DLL is what we ultimately want to decompile, so this is what we assert against.
// #undef ENABLE_DECOMP_ASSERTS
// #endif

// #if defined(ENABLE_DECOMP_ASSERTS)
// #define DECOMP_STATIC_ASSERT(V)
// 	namespace
// 	{
// 	typedef int foo[(V) ? 1 : -1];
// 	}
// #define DECOMP_SIZE_ASSERT(T, S) DECOMP_STATIC_ASSERT(sizeof(T) == S)
// #else
// #define DECOMP_STATIC_ASSERT(V)
// #define DECOMP_SIZE_ASSERT(T, S)
// #endif

// #ifndef sizeOfArray
// #define sizeOfArray(arr) (sizeof(arr) / sizeof(arr[0]))
// #endif

// #endif // DECOMP_H


}
