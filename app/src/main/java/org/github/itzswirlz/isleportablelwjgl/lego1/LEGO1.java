// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.github.itzswirlz.isleportablelwjgl.lego1;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LEGO1 extends org.github.itzswirlz.isleportablelwjgl.lego1.presets.LEGO1Config {
    static { Loader.load(); }

// Parsed from legogamestate.h

// #ifndef LEGOGAMESTATE_H
// #define LEGOGAMESTATE_H

// #include "actionsfwd.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxtypes.h"
// #include "mxvariable.h"

// #include <string.h>

@Opaque public static class LegoFile extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoFile() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFile(Pointer p) { super(p); }
}
@Opaque public static class LegoState extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoState() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoState(Pointer p) { super(p); }
}
@Opaque public static class LegoStorage extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoStorage() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoStorage(Pointer p) { super(p); }
}
@Opaque public static class MxVariableTable extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVariableTable() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariableTable(Pointer p) { super(p); }
}

public static native @Cast("const char*") BytePointer g_actorNames(int i); public static native void g_actorNames(int i, BytePointer setter);
@MemberGetter public static native @Cast("const char**") PointerPointer g_actorNames();

// SIZE 0x08
public static class ColorStringStruct extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ColorStringStruct() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ColorStringStruct(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ColorStringStruct(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ColorStringStruct position(long position) {
        return (ColorStringStruct)super.position(position);
    }
    @Override public ColorStringStruct getPointer(long i) {
        return new ColorStringStruct((Pointer)this).offsetAddress(i);
    }

	public native @Cast("const char*") BytePointer m_targetName(); public native ColorStringStruct m_targetName(BytePointer setter); // 0x00
	public native @Cast("const char*") BytePointer m_colorName(); public native ColorStringStruct m_colorName(BytePointer setter);  // 0x04
}

public static class InternationalCharacter extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public InternationalCharacter() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InternationalCharacter(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InternationalCharacter(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public InternationalCharacter position(long position) {
        return (InternationalCharacter)super.position(position);
    }
    @Override public InternationalCharacter getPointer(long i) {
        return new InternationalCharacter((Pointer)this).offsetAddress(i);
    }

	public native @Cast("unsigned char") byte m_character(); public native InternationalCharacter m_character(byte setter);
	public native @Cast("const char*") BytePointer m_bitmap(); public native InternationalCharacter m_bitmap(BytePointer setter);
	public native @Cast("MxU32") long m_buttonId(); public native InternationalCharacter m_buttonId(long setter);
}

// VTABLE: LEGO1 0x100d74a8
// VTABLE: BETA10 0x101bc4f0
// SIZE 0x30
@NoOffset public static class LegoBackgroundColor extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBackgroundColor(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoBackgroundColor(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoBackgroundColor position(long position) {
        return (LegoBackgroundColor)super.position(position);
    }
    @Override public LegoBackgroundColor getPointer(long i) {
        return new LegoBackgroundColor((Pointer)this).offsetAddress(i);
    }

	public LegoBackgroundColor() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoBackgroundColor(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoBackgroundColor(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_colorString);
	public native void SetValue(String p_colorString); // vtable+0x04

	public native void SetLightColor(float p_r, float p_g, float p_b);
	public native void SetLightColor();
	public native void ToggleDayNight(@Cast("MxBool") boolean p_sun);
	public native void ToggleSkyColor();
}

// VTABLE: LEGO1 0x100d74b8
// VTABLE: BETA10 0x101bc500
// SIZE 0x24
public static class LegoFullScreenMovie extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFullScreenMovie(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoFullScreenMovie(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoFullScreenMovie position(long position) {
        return (LegoFullScreenMovie)super.position(position);
    }
    @Override public LegoFullScreenMovie getPointer(long i) {
        return new LegoFullScreenMovie((Pointer)this).offsetAddress(i);
    }

	public LegoFullScreenMovie() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoFullScreenMovie(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoFullScreenMovie(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_option);
	public native void SetValue(String p_option); // vtable+0x04
}

// SIZE 0x430
@NoOffset public static class LegoGameState extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoGameState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoGameState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoGameState position(long position) {
        return (LegoGameState)super.position(position);
    }
    @Override public LegoGameState getPointer(long i) {
        return new LegoGameState((Pointer)this).offsetAddress(i);
    }

	/** enum LegoGameState::Act */
	public static final int
		e_actNotFound = -1,
		e_act1 = 0,
		e_act2 = 1,
		e_act3 = 2;

	/** enum LegoGameState::Area */
	public static final int
		e_undefined = 0,
		e_previousArea = 0,
		e_isle = 1,
		e_infomain = 2,
		e_infodoor = 3,
		e_infocenterExited = 4,
		e_elevbott = 5,
		e_elevride = 6,
		e_elevride2 = 7,
		e_elevopen = 8,
		e_seaview = 9,
		e_observe = 10,
		e_elevdown = 11,
		e_regbook = 12,
		e_infoscor = 13,
		e_jetrace = 14,
		e_jetrace2 = 15,
		e_jetraceExterior = 16,
		e_jetskibuildExited = 17,
		e_carrace = 18,
		e_carraceExterior = 19,
		e_racecarbuildExited = 20,
		e_unk21 = 21,
		e_pizzeriaExterior = 22,
		e_unk23 = 23,
		e_unk24 = 24,
		e_garageExterior = 25,
		e_garage = 26,
		e_garadoor = 27,
		e_garageExited = 28,
		e_hospitalExterior = 29,
		e_hospital = 30,
		e_hospitalExited = 31,
		e_policeExterior = 32,
		e_policeExited = 33,
		e_police = 34,
		e_polidoor = 35,
		e_copterbuild = 36,
		e_dunecarbuild = 37,
		e_jetskibuild = 38,
		e_racecarbuild = 39,
		e_helicopterSpawn = 40,
		e_unk41 = 41,
		e_unk42 = 42,
		e_dunebuggySpawn = 43,
		e_racecarSpawn = 44,
		e_jetskiSpawn = 45,
		e_act2main = 46,
		e_act3script = 47,
		e_unk48 = 48,
		e_unk49 = 49,
		e_unk50 = 50,
		e_unk51 = 51,
		e_towTrackHookedUp = 52,
		e_jukeboxw = 53,
		e_jukeboxExterior = 54,
		e_unk55 = 55,
		e_histbook = 56,
		e_bike = 57,
		e_dunecar = 58,
		e_motocycle = 59,
		e_copter = 60,
		e_skateboard = 61,
		e_ambulance = 62,
		e_towtrack = 63,
		e_jetski = 64,

		e_vehicleExited = 66;

	// SIZE 0x0e
	public static class Username extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Username(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Username(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public Username position(long position) {
	        return (Username)super.position(position);
	    }
	    @Override public Username getPointer(long i) {
	        return new Username((Pointer)this).offsetAddress(i);
	    }
	
		public Username() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void Set(@ByRef Username p_other);

		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		public native @ByRef @Name("operator =") Username put(@Const @ByRef Username p_other);

		 // 0x00
	}

	// SIZE 0x2c
	public static class ScoreItem extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public ScoreItem() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public ScoreItem(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public ScoreItem(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public ScoreItem position(long position) {
	        return (ScoreItem)super.position(position);
	    }
	    @Override public ScoreItem getPointer(long i) {
	        return new ScoreItem((Pointer)this).offsetAddress(i);
	    }
	
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);

		public native @Cast("MxS16") short m_totalScore(); public native ScoreItem m_totalScore(short setter);  // 0x00
		 // 0x02
		     // 0x1c
		public native @Cast("MxS16") short m_playerId(); public native ScoreItem m_playerId(short setter);    // 0x2a

		public native @ByRef @Name("operator =") ScoreItem put(@Const @ByRef ScoreItem p_other);
	}

	// SIZE 0x372
	@NoOffset public static class History extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public History(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public History(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public History position(long position) {
	        return (History)super.position(position);
	    }
	    @Override public History getPointer(long i) {
	        return new History((Pointer)this).offsetAddress(i);
	    }
	
		public History() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void WriteScoreHistory();
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		

		// FUNCTION: BETA10 0x1002c2b0
		public native @Cast("MxS16") short GetCount();

		// TODO: Not yet correct
		// FUNCTION: BETA10 0x1002c540
		public native ScoreItem GetScore(@Cast("MxS32") int p_index);

		public native @Cast("MxS16") short m_count(); public native History m_count(short setter); // 0x00
// #ifdef BETA10
		 // 0x02
// #endif
		 // 0x02 (0x22 for BETA10)
		public native @Cast("MxS16") short m_nextPlayerId(); public native History m_nextPlayerId(short setter);   // 0x372 (0x392 for BETA10)
	}

	public LegoGameState() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void SetActor(@Cast("MxU8") short p_actorId);
	public native void RemoveActor();
	public native void ResetROI();

	public native @Cast("MxResult") int Save(@Cast("MxULong") long arg0);
	public native @Cast("MxResult") int DeleteState();
	public native @Cast("MxResult") int Load(@Cast("MxULong") long arg0);

	public native void SerializePlayersInfo(@Cast("MxS16") short p_flags);
	public native @Cast("MxResult") int AddPlayer(@ByRef Username p_player);
	public native void SwitchPlayer(@Cast("MxS16") short p_playerId);
	public native @Cast("MxS16") short FindPlayer(@ByRef Username p_player);

	public native void SerializeScoreHistory(@Cast("MxS16") short p_flags);
	public native void SetSavePath(@Cast("char*") BytePointer arg0);
	public native void SetSavePath(@Cast("char*") ByteBuffer arg0);
	public native void SetSavePath(@Cast("char*") byte[] arg0);

	public native LegoState GetState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState GetState(String p_stateName);
	public native LegoState CreateState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState CreateState(String p_stateName);

	public native void GetFileSavePath(MxString p_outPath, @Cast("MxS16") short p_slotn);
	public native void StopArea(@Cast("LegoGameState::Area") int p_area);
	public native void SwitchArea(@Cast("LegoGameState::Area") int p_area);
	public native void Init();

	// FUNCTION: BETA10 0x10083ff5
	public native @Cast("MxU8") short GetActorId();

	// FUNCTION: BETA10 0x1004a2d0
	public native @Cast("const char*") BytePointer GetActorName();

	// FUNCTION: BETA10 0x1002b4c0
	public native @Cast("LegoGameState::Act") int GetCurrentAct();

	public native @Cast("LegoGameState::Act") int GetLoadedAct();

	public native void SetActorId(@Cast("MxU8") short p_actorId);
	public native LegoBackgroundColor GetBackgroundColor();

	public native void SetCurrentAct(@Cast("LegoGameState::Act") int p_currentAct);
	public native void FindLoadedAct();
	public native void RegisterState(LegoState p_state);

	public native @Cast("const char*") BytePointer GetSavePath();
	public native @Cast("MxS16") short m_currentPlayerId(); public native LegoGameState m_currentPlayerId(short setter);              // 0x24
	public native @Cast("MxS16") short m_playerCount(); public native LegoGameState m_playerCount(short setter);                  // 0x26
	public native @ByRef Username m_players(int i); public native LegoGameState m_players(int i, Username setter);
	@MemberGetter public native Username m_players();                // 0x28
	public native @ByRef History m_history(); public native LegoGameState m_history(History setter);                    // 0xa6
	 // 0x41c
	public native @Cast("MxBool") boolean m_isDirty(); public native LegoGameState m_isDirty(boolean setter);                     // 0x420
	public native @Cast("LegoGameState::Area") int m_currentArea(); public native LegoGameState m_currentArea(int setter);                   // 0x424
	public native @Cast("LegoGameState::Area") int m_previousArea(); public native LegoGameState m_previousArea(int setter);                  // 0x428
	public native @Cast("LegoGameState::Area") int m_unk0x42c(); public native LegoGameState m_unk0x42c(int setter);                      // 0x42c

	@MemberGetter public static native @Const @ByRef InternationalCharacter g_intCharacters(int i);
	@MemberGetter public static native @Const InternationalCharacter g_intCharacters();
}

public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);

// SYNTHETIC: LEGO1 0x1003c860
// LegoGameState::ScoreItem::ScoreItem

// #endif // LEGOGAMESTATE_H


// Parsed from legovideomanager.h

// #ifndef LEGOVIDEOMANAGER_H
// #define LEGOVIDEOMANAGER_H

// #include "cursor.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "legophonemelist.h"
// #include "mxvideomanager.h"

// #ifdef MINIWIN
// #else
// #include <d3drm.h>
// #include <ddraw.h>
// #endif

@Opaque public static class Lego3DManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Lego3DManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Lego3DManager(Pointer p) { super(p); }
}
@Opaque public static class LegoROI extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoROI() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoROI(Pointer p) { super(p); }
}
@Opaque public static class MxDirect3D extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDirect3D() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirect3D(Pointer p) { super(p); }
}
@Opaque public static class MxStopWatch extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStopWatch() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStopWatch(Pointer p) { super(p); }
}
@Opaque public static class ViewportAppData extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewportAppData() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewportAppData(Pointer p) { super(p); }
}
@Namespace("Tgl") @Opaque public static class Renderer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Renderer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Renderer(Pointer p) { super(p); }
}


// VTABLE: LEGO1 0x100d9c88
// SIZE 0x590
@NoOffset public static class LegoVideoManager extends MxVideoManager {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoVideoManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoVideoManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoVideoManager position(long position) {
        return (LegoVideoManager)super.position(position);
    }
    @Override public LegoVideoManager getPointer(long i) {
        return new LegoVideoManager((Pointer)this).offsetAddress(i);
    }

	public LegoVideoManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native int EnableRMDevice();
	public native int DisableRMDevice();
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable);
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable, @Cast("MxBool") boolean p_scale);
	public native void MoveCursor(@Cast("MxS32") int p_cursorX, @Cast("MxS32") int p_cursorY);
	
	public native void ToggleFPS(@Cast("MxBool") boolean p_visible);

	public native @Cast("MxResult") int Tickle();                                                                       // vtable+0x08
	public native void Destroy();                                                                          // vtable+0x18
	public native @Cast("MxResult") int Create(@ByRef MxVideoParam p_videoParam, @Cast("MxU32") long p_frequencyMS, @Cast("MxBool") boolean p_createThread); // vtable+0x2c
	public native @Cast("MxResult") int RealizePalette(MxPalette arg0);                                                     // vtable+0x30
	public native void UpdateView(@Cast("MxU32") long p_x, @Cast("MxU32") long p_y, @Cast("MxU32") long p_width, @Cast("MxU32") long p_height);                    // vtable+0x34
	public native MxPresenter GetPresenterAt(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);                                        // vtable+0x38

	// FUNCTION: LEGO1 0x1007ab10
	 // vtable+0x3c

	public native void SetSkyColor(float p_red, float p_green, float p_blue);
	public native void OverrideSkyColor(@Cast("MxBool") boolean p_shouldOverride);
	public native @Cast("MxResult") int ResetPalette(@Cast("MxBool") boolean p_ignoreSkyColor);
	public native MxPresenter GetPresenterByActionObjectName(@Cast("const char*") BytePointer p_char);
	public native MxPresenter GetPresenterByActionObjectName(String p_char);

	public native void FUN_1007c520();

	public native Renderer GetRenderer();

	// FUNCTION: BETA10 0x100117e0
	public native Lego3DManager Get3DManager();

	// FUNCTION: BETA10 0x1003a380
	public native LegoROI GetViewROI();

	public native MxDirect3D GetDirect3D();
	public native @Cast("MxBool") boolean GetRender3D();
	public native double GetElapsedSeconds();

	// FUNCTION: BETA10 0x1002e290
	public native void SetRender3D(@Cast("MxBool") boolean p_render3d);

	public native void SetUnk0x554(@Cast("MxBool") boolean p_unk0x554);
}

// SYNTHETIC: LEGO1 0x1007ab20
// LegoVideoManager::`scalar deleting destructor'

// #endif // LEGOVIDEOMANAGER_H


// Parsed from mxcore.h

// #ifndef MXCORE_H
// #define MXCORE_H

// #include "compat.h"
// #include "mxtypes.h"

// #include <string.h>

@Opaque public static class MxParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxParam(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc0f8
// VTABLE: BETA10 0x101c1bc8
// SIZE 0x08
@NoOffset public static class MxCore extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCore(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxCore(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxCore position(long position) {
        return (MxCore)super.position(position);
    }
    @Override public MxCore getPointer(long i) {
        return new MxCore((Pointer)this).offsetAddress(i);
    }

	public MxCore() { super((Pointer)null); allocate(); }
	private native void allocate();                       // vtable+00
	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+04

	// FUNCTION: LEGO1 0x10001f70
	// FUNCTION: BETA10 0x1000f380
	public native @Cast("MxResult") int Tickle(); // vtable+08

	// FUNCTION: LEGO1 0x100144c0
	// FUNCTION: BETA10 0x100126d0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100140d0
	// FUNCTION: BETA10 0x10012680
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxU32") long GetId();
}

// SYNTHETIC: BETA10 0x10096940
// MxCore::operator=

// #endif // MXCORE_H


// Parsed from mxdirectdraw.h

// #ifndef MXDIRECTDRAW_H
// #define MXDIRECTDRAW_H

// #include "lego1_export.h"
// #include "mxdirectxinfo.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #include <windows.h>
// #endif

// VTABLE: LEGO1 0x100db818
// VTABLE: BETA10 0x101c1b10
// SIZE 0x880
@NoOffset public static class MxDirectDraw extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirectDraw(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDirectDraw(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDirectDraw position(long position) {
        return (MxDirectDraw)super.position(position);
    }
    @Override public MxDirectDraw getPointer(long i) {
        return new MxDirectDraw((Pointer)this).offsetAddress(i);
    }

	public static class ErrorHandler extends FunctionPointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public    ErrorHandler(Pointer p) { super(p); }
	    protected ErrorHandler() { allocate(); }
	    private native void allocate();
	    public native void call(@Cast("const char*") BytePointer arg0, @Cast("HRESULT") long arg1, Pointer arg2);
	}

	public static native int GetPrimaryBitDepth();

	public MxDirectDraw() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean Create(
			HWND hWnd,
			@Cast("BOOL") boolean fullscreen_1,
			@Cast("BOOL") boolean surface_fullscreen,
			@Cast("BOOL") boolean onlySystemMemory,
			int width,
			int height,
			int bpp,
			@Const PALETTEENTRY pPaletteEntries,
			int paletteEntryCount
		);                                      // vtable+0x04
	public native void Destroy();                 // vtable+0x08
	public native void DestroyButNotDirectDraw(); // vtable+0x0c

	public native IDirectDraw DirectDraw();

	// FUNCTION: BETA10 0x100d8ab0
	public native IDirectDrawSurface FrontBuffer();

	// FUNCTION: BETA10 0x100d8ae0
	public native IDirectDrawSurface BackBuffer();

	// FUNCTION: BETA10 0x100d8b10
	public native IDirectDrawClipper Clipper();

	// FUNCTION: BETA10 0x1011c190
	

	// FUNCTION: BETA10 0x1011c170
	public native @Cast("BOOL") boolean IsFullScreen();

	public native int Pause(@Cast("BOOL") boolean arg0);
	public native @Cast("BOOL") boolean RestoreSurfaces();

	public native @Cast("const char*") BytePointer ErrorToString(@Cast("HRESULT") long p_error); // vtable+0x10
	public native int FlipToGDISurface();
}

// #endif // MXDIRECTDRAW_H


// Parsed from mxticklemanager.h

// #ifndef MXTICKLEMANAGER_H
// #define MXTICKLEMANAGER_H

// #include "mxcore.h"
// #include "mxstl/stlcompat.h"
// #include "mxtypes.h"

// SIZE 0x10
@NoOffset public static class MxTickleClient extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleClient(Pointer p) { super(p); }

	public MxTickleClient(MxCore p_client, @Cast("MxTime") int p_interval) { super((Pointer)null); allocate(p_client, p_interval); }
	private native void allocate(MxCore p_client, @Cast("MxTime") int p_interval);

	public native MxCore GetClient();

	public native @Cast("MxTime") int GetTickleInterval();

	public native @Cast("MxTime") int GetLastUpdateTime();

	public native @Cast("MxU16") int GetFlags();

	public native void SetTickleInterval(@Cast("MxTime") int p_interval);

	public native void SetLastUpdateTime(@Cast("MxTime") int p_lastUpdateTime);

	public native void SetFlags(@Cast("MxU16") int p_flags);
}

// VTABLE: LEGO1 0x100d86d8
// VTABLE: BETA10 0x101bc9d0
// SIZE 0x14
@NoOffset public static class MxTickleManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTickleManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTickleManager position(long position) {
        return (MxTickleManager)super.position(position);
    }
    @Override public MxTickleManager getPointer(long i) {
        return new MxTickleManager((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x100937c0
	public MxTickleManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle();                                                // vtable+0x08
	public native void RegisterClient(MxCore p_client, @Cast("MxTime") int p_interval);          // vtable+0x14
	public native void UnregisterClient(MxCore p_client);                           // vtable+0x18
	public native void SetClientTickleInterval(MxCore p_client, @Cast("MxTime") int p_interval); // vtable+0x1c
	public native @Cast("MxTime") int GetClientTickleInterval(MxCore p_client);
}

public static final int TICKLE_MANAGER_NOT_FOUND = 0x80000000;

// TEMPLATE: LEGO1 0x1005a4a0
// list<MxTickleClient *,allocator<MxTickleClient *> >::~list<MxTickleClient *,allocator<MxTickleClient *> >

// TEMPLATE: BETA10 0x10093870
// List<MxTickleClient *>::List<MxTickleClient *>

// TEMPLATE: LEGO1 0x1005a530
// TEMPLATE: BETA10 0x10096340
// List<MxTickleClient *>::~List<MxTickleClient *>

// #endif // MXTICKLEMANAGER_H


// Parsed from mxtimer.h

// #ifndef MXTIMER_H
// #define MXTIMER_H

// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>

// VTABLE: LEGO1 0x100dc0e0
// VTABLE: BETA10 0x101c1bb0
// SIZE 0x10
@NoOffset public static class MxTimer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTimer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTimer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTimer position(long position) {
        return (MxTimer)super.position(position);
    }
    @Override public MxTimer getPointer(long i) {
        return new MxTimer((Pointer)this).offsetAddress(i);
    }

	public MxTimer() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void Start();
	public native void Stop();

	public native @Cast("MxLong") long GetRealTime();

	// FUNCTION: BETA10 0x1012bf50
	public native void InitLastTimeCalculated();

	// FUNCTION: BETA10 0x10017810
	public native @Cast("MxLong") long GetTime();
}

// SYNTHETIC: BETA10 0x1012bfc0
// MxTimer::~MxTimer

// #endif // MXTIMER_H


// Parsed from mxgeometry.h

// #ifndef MXGEOMETRY_H
// #define MXGEOMETRY_H

// #include "mxlist.h"
// #include "mxutilities.h"

@Name("MxPoint<MxS32>") @NoOffset public static class MxPointInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPointInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPointInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPointInteger position(long position) {
        return (MxPointInteger)super.position(position);
    }
    @Override public MxPointInteger getPointer(long i) {
        return new MxPointInteger((Pointer)this).offsetAddress(i);
    }

	public MxPointInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPointInteger(@Const @ByRef MxPointInteger p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPointInteger p_p);
	public MxPointInteger(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);
	public native @Cast("MxS32") int GetX();
	public native @Cast("MxS32") int GetY();
	public native void SetX(@Cast("MxS32") int p_x);
	public native void SetY(@Cast("MxS32") int p_y);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator +") MxPointInteger add(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator -") MxPointInteger subtract(@Const @ByRef MxPointInteger p_p);
}

@Name("MxPoint<MxS16>") @NoOffset public static class MxPointShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPointShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPointShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPointShort position(long position) {
        return (MxPointShort)super.position(position);
    }
    @Override public MxPointShort getPointer(long i) {
        return new MxPointShort((Pointer)this).offsetAddress(i);
    }

	public MxPointShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPointShort(@Const @ByRef MxPointShort p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPointShort p_p);
	public MxPointShort(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y);
	public native @Cast("MxS16") short GetX();
	public native @Cast("MxS16") short GetY();
	public native void SetX(@Cast("MxS16") short p_x);
	public native void SetY(@Cast("MxS16") short p_y);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator +") MxPointShort add(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator -") MxPointShort subtract(@Const @ByRef MxPointShort p_p);
}

@Name("MxSize<MxS32>") @NoOffset public static class MxSizeInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSizeInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSizeInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSizeInteger position(long position) {
        return (MxSizeInteger)super.position(position);
    }
    @Override public MxSizeInteger getPointer(long i) {
        return new MxSizeInteger((Pointer)this).offsetAddress(i);
    }

	public MxSizeInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSizeInteger(@Const @ByRef MxSizeInteger p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSizeInteger p_s);
	public MxSizeInteger(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height);
	public native @Cast("MxS32") int GetWidth();
	public native @Cast("MxS32") int GetHeight();
	public native void SetWidth(@Cast("MxS32") int p_width);
	public native void SetHeight(@Cast("MxS32") int p_height);
}

@Name("MxSize<MxS16>") @NoOffset public static class MxSizeShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSizeShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSizeShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSizeShort position(long position) {
        return (MxSizeShort)super.position(position);
    }
    @Override public MxSizeShort getPointer(long i) {
        return new MxSizeShort((Pointer)this).offsetAddress(i);
    }

	public MxSizeShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSizeShort(@Const @ByRef MxSizeShort p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSizeShort p_s);
	public MxSizeShort(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height);
	public native @Cast("MxS16") short GetWidth();
	public native @Cast("MxS16") short GetHeight();
	public native void SetWidth(@Cast("MxS16") short p_width);
	public native void SetHeight(@Cast("MxS16") short p_height);
}

@Name("MxRect<MxS32>") @NoOffset public static class MxRectInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRectInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRectInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRectInteger position(long position) {
        return (MxRectInteger)super.position(position);
    }
    @Override public MxRectInteger getPointer(long i) {
        return new MxRectInteger((Pointer)this).offsetAddress(i);
    }

	public MxRectInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRectInteger(@Const @ByRef MxRectInteger p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRectInteger p_r);
	public MxRectInteger(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b);
	public MxRectInteger(@Const @ByRef MxPointInteger p_p, @Const @ByRef MxSizeInteger p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@Const @ByRef MxPointInteger p_p, @Const @ByRef MxSizeInteger p_s);
	public native @Cast("MxS32") int GetLeft();
	public native void SetLeft(@Cast("MxS32") int p_left);
	public native @Cast("MxS32") int GetTop();
	public native void SetTop(@Cast("MxS32") int p_top);
	public native @Cast("MxS32") int GetRight();
	public native void SetRight(@Cast("MxS32") int p_right);
	public native @Cast("MxS32") int GetBottom();
	public native void SetBottom(@Cast("MxS32") int p_bottom);
	public native @Cast("MxS32") int GetWidth();
	public native @Cast("MxS32") int GetHeight();
	public native @ByVal MxPointInteger GetLT();
	public native @ByVal MxPointInteger GetRB();
	public native @Cast("MxBool") boolean Empty();
	public native @Cast("MxBool") boolean Contains(@Const @ByRef MxPointInteger p_p);
	public native @Cast("MxBool") boolean Intersects(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator =") void put(@Const @ByRef MxRectInteger p_r);
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Const @ByRef MxRectInteger p_r);
	public native @Cast("MxBool") @Name("operator !=") boolean notEquals(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator &=") void andPut(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator |=") void orPut(@Const @ByRef MxRectInteger p_r);
	public native @ByVal @Name("operator +") MxRectInteger add(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator -") MxRectInteger subtract(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator &") MxRectInteger and(@Const @ByRef MxRectInteger p_r);
	public native @ByVal @Name("operator |") MxRectInteger or(@Const @ByRef MxRectInteger p_r);
}

@Name("MxRect<MxS16>") @NoOffset public static class MxRectShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRectShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRectShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRectShort position(long position) {
        return (MxRectShort)super.position(position);
    }
    @Override public MxRectShort getPointer(long i) {
        return new MxRectShort((Pointer)this).offsetAddress(i);
    }

	public MxRectShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRectShort(@Const @ByRef MxRectShort p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRectShort p_r);
	public MxRectShort(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b);
	public MxRectShort(@Const @ByRef MxPointShort p_p, @Const @ByRef MxSizeShort p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@Const @ByRef MxPointShort p_p, @Const @ByRef MxSizeShort p_s);
	public native @Cast("MxS16") short GetLeft();
	public native void SetLeft(@Cast("MxS16") short p_left);
	public native @Cast("MxS16") short GetTop();
	public native void SetTop(@Cast("MxS16") short p_top);
	public native @Cast("MxS16") short GetRight();
	public native void SetRight(@Cast("MxS16") short p_right);
	public native @Cast("MxS16") short GetBottom();
	public native void SetBottom(@Cast("MxS16") short p_bottom);
	public native @Cast("MxS16") short GetWidth();
	public native @Cast("MxS16") short GetHeight();
	public native @ByVal MxPointShort GetLT();
	public native @ByVal MxPointShort GetRB();
	public native @Cast("MxBool") boolean Empty();
	public native @Cast("MxBool") boolean Contains(@Const @ByRef MxPointShort p_p);
	public native @Cast("MxBool") boolean Intersects(@Const @ByRef MxRectShort p_r);
	public native @Name("operator =") void put(@Const @ByRef MxRectShort p_r);
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Const @ByRef MxRectShort p_r);
	public native @Cast("MxBool") @Name("operator !=") boolean notEquals(@Const @ByRef MxRectShort p_r);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator &=") void andPut(@Const @ByRef MxRectShort p_r);
	public native @Name("operator |=") void orPut(@Const @ByRef MxRectShort p_r);
	public native @ByVal @Name("operator +") MxRectShort add(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator -") MxRectShort subtract(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator &") MxRectShort and(@Const @ByRef MxRectShort p_r);
	public native @ByVal @Name("operator |") MxRectShort or(@Const @ByRef MxRectShort p_r);
}

/******************************* MxPoint16 **********************************/

// SIZE 0x04
public static class MxPoint16 extends MxPointShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPoint16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPoint16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPoint16 position(long position) {
        return (MxPoint16)super.position(position);
    }
    @Override public MxPoint16 getPointer(long i) {
        return new MxPoint16((Pointer)this).offsetAddress(i);
    }

	public MxPoint16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPoint16(@Const @ByRef MxPoint16 p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPoint16 p_p);
	public MxPoint16(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y);
}

/******************************* MxPoint32 **********************************/

// SIZE 0x08
public static class MxPoint32 extends MxPointInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPoint32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPoint32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPoint32 position(long position) {
        return (MxPoint32)super.position(position);
    }
    @Override public MxPoint32 getPointer(long i) {
        return new MxPoint32((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x10054d10
	public MxPoint32() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10031a50
	public MxPoint32(@Const @ByRef MxPoint32 p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPoint32 p_p);

	// FUNCTION: LEGO1 0x10012170
	// FUNCTION: BETA10 0x1006aa70
	public MxPoint32(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);
}

// TEMPLATE: BETA10 0x10031a80
// ??0?$MxPoint@H@@QAE@ABV0@@Z

// TEMPLATE: BETA10 0x100318f0
// MxPoint<int>::GetX

// TEMPLATE: BETA10 0x10031920
// MxPoint<int>::GetY

// TEMPLATE: BETA10 0x10031cf0
// ??0?$MxPoint@H@@QAE@HH@Z

// TEMPLATE: BETA10 0x10054d40
// ??0?$MxPoint@H@@QAE@XZ

// TEMPLATE: BETA10 0x10142c90
// MxPoint<int>::SetX

// TEMPLATE: BETA10 0x10142cb0
// MxPoint<int>::SetY

/******************************** MxSize16 **********************************/

// SIZE 0x04
public static class MxSize16 extends MxSizeShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSize16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSize16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSize16 position(long position) {
        return (MxSize16)super.position(position);
    }
    @Override public MxSize16 getPointer(long i) {
        return new MxSize16((Pointer)this).offsetAddress(i);
    }

	public MxSize16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSize16(@Const @ByRef MxSize16 p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSize16 p_s);
	public MxSize16(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height);
}

/******************************** MxSize32 **********************************/

// SIZE 0x08
public static class MxSize32 extends MxSizeInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSize32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSize32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSize32 position(long position) {
        return (MxSize32)super.position(position);
    }
    @Override public MxSize32 getPointer(long i) {
        return new MxSize32((Pointer)this).offsetAddress(i);
    }

	public MxSize32() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSize32(@Const @ByRef MxSize32 p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSize32 p_s);

	// FUNCTION: BETA10 0x10137030
	public MxSize32(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height);
}

// TEMPLATE: BETA10 0x10031820
// ??0?$MxSize@H@@QAE@HH@Z

// TEMPLATE: BETA10 0x10031950
// MxSize<int>::GetWidth

// TEMPLATE: BETA10 0x10031980
// MxSize<int>::GetHeight

/******************************** MxRect16 **********************************/

// SIZE 0x08
public static class MxRect16 extends MxRectShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRect16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRect16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRect16 position(long position) {
        return (MxRect16)super.position(position);
    }
    @Override public MxRect16 getPointer(long i) {
        return new MxRect16((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x10097eb0
	public MxRect16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRect16(@Const @ByRef MxRect16 p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRect16 p_r);
	public MxRect16(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b);
	public MxRect16(@ByRef MxPoint16 p_p, @ByRef MxSize16 p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@ByRef MxPoint16 p_p, @ByRef MxSize16 p_s);
}

// TEMPLATE: BETA10 0x10097ee0
// ??0?$MxRect@F@@QAE@XZ

// TEMPLATE: BETA10 0x100981f0
// MxRect<short>::SetLeft

// TEMPLATE: BETA10 0x10098220
// MxRect<short>::SetTop

// TEMPLATE: BETA10 0x10098250
// MxRect<short>::SetRight

// TEMPLATE: BETA10 0x10098280
// MxRect<short>::SetBottom

// TEMPLATE: BETA10 0x10098300
// MxRect<short>::GetLeft

// TEMPLATE: BETA10 0x10098330
// MxRect<short>::GetTop

// TEMPLATE: BETA10 0x10098360
// MxRect<short>::GetBottom

// TEMPLATE: BETA10 0x10098390
// MxRect<short>::GetWidth

// TEMPLATE: BETA10 0x100983c0
// MxRect<short>::GetHeight

/******************************** MxRect32 **********************************/

// SIZE 0x10
public static class MxRect32 extends MxRectInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRect32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRect32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRect32 position(long position) {
        return (MxRect32)super.position(position);
    }
    @Override public MxRect32 getPointer(long i) {
        return new MxRect32((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1012df70
	public MxRect32() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1012de40
	public MxRect32(@Const @ByRef MxRect32 p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRect32 p_r);

	// FUNCTION: BETA10 0x100d8e90
	public MxRect32(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b);

// #ifndef COMPAT_MODE
	// FUNCTION: BETA10 0x10137060
	public MxRect32(@ByRef MxPoint32 p_p, @ByRef MxSize32 p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@ByRef MxPoint32 p_p, @ByRef MxSize32 p_s);
// #else
// #endif
}

// VTABLE: LEGO1 0x100dc3f0
// VTABLE: BETA10 0x101c1fb8
// SIZE 0x18

// VTABLE: LEGO1 0x100dc438
// VTABLE: BETA10 0x101c2048
// class MxListCursor<MxRect32 *>

// VTABLE: LEGO1 0x100dc408
// VTABLE: BETA10 0x101c2030
// class MxPtrListCursor<MxRect32>

// VTABLE: LEGO1 0x100dc420
// VTABLE: BETA10 0x101c2018
// SIZE 0x10

// TEMPLATE: BETA10 0x10031800
// ??0?$MxRect@H@@QAE@XZ

// TEMPLATE: LEGO1 0x100b6fc0
// TEMPLATE: BETA10 0x10031860
// ??0?$MxRect@H@@QAE@ABV?$MxPoint@H@@ABV?$MxSize@H@@@Z

// TEMPLATE: BETA10 0x100319b0
// MxRect<int>::operator=

// TEMPLATE: BETA10 0x100d8090
// MxRect<int>::GetWidth

// TEMPLATE: BETA10 0x100d80c0
// MxRect<int>::GetHeight

// TEMPLATE: BETA10 0x100d8ed0
// ??0?$MxRect@H@@QAE@HHHH@Z

// TEMPLATE: BETA10 0x100ec100
// MxRect<int>::GetLeft

// TEMPLATE: BETA10 0x100ec130
// MxRect<int>::GetTop

// TEMPLATE: BETA10 0x100ec160
// MxRect<int>::GetRight

// TEMPLATE: BETA10 0x100ec190
// MxRect<int>::GetBottom

// TEMPLATE: BETA10 0x100ec1c0
// MxRect<int>::operator+=

// TEMPLATE: BETA10 0x1012de70
// ??0?$MxRect@H@@QAE@ABV0@@Z

// TEMPLATE: BETA10 0x1012dec0
// MxRect<int>::operator&=

// SYNTHETIC: BETA10 0x1012dfa0
// MxRect32::operator=

// TEMPLATE: BETA10 0x10031d30
// MxRect<int>::Contains

// TEMPLATE: BETA10 0x10137090
// MxRect<int>::Intersects

// TEMPLATE: BETA10 0x10137100
// MxRect<int>::operator-=

// TEMPLATE: BETA10 0x1014b320
// MxRect<int>::operator|=

// TEMPLATE: BETA10 0x1014b2d0
// MxRect<int>::Empty

// TEMPLATE: BETA10 0x1014bd80
// MxRect<int>::SetLeft

// TEMPLATE: BETA10 0x1014b270
// MxRect<int>::SetTop

// TEMPLATE: BETA10 0x1014bda0
// MxRect<int>::SetRight

// TEMPLATE: BETA10 0x1014b2a0
// MxRect<int>::SetBottom

// VTABLE: LEGO1 0x100dc3d8
// VTABLE: BETA10 0x101c1fd0
// class MxPtrList<MxRect32>

// VTABLE: LEGO1 0x100dc450
// VTABLE: BETA10 0x101c1fe8
// class MxList<MxRect32 *>

// VTABLE: LEGO1 0x100dc468
// VTABLE: BETA10 0x101c2000
// class MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3c00
// TEMPLATE: BETA10 0x1013ba00
// MxCollection<MxRect32 *>::Compare

// TEMPLATE: LEGO1 0x100b3c10
// TEMPLATE: BETA10 0x1013bb30
// MxCollection<MxRect32 *>::MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3c80
// TEMPLATE: BETA10 0x1013bbc0
// MxCollection<MxRect32 *>::~MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3cd0
// TEMPLATE: BETA10 0x1013bc60
// MxCollection<MxRect32 *>::Destroy

// TEMPLATE: LEGO1 0x100b3ce0
// TEMPLATE: BETA10 0x1013bc70
// MxList<MxRect32 *>::~MxList<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3d70
// TEMPLATE: BETA10 0x1013bd20
// MxPtrList<MxRect32>::Destroy

// SYNTHETIC: LEGO1 0x100b3d80
// SYNTHETIC: BETA10 0x1013bd50
// MxRect32List::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b3df0
// TEMPLATE: BETA10 0x1013bd90
// MxPtrList<MxRect32>::~MxPtrList<MxRect32>

// SYNTHETIC: LEGO1 0x100b3e40
// SYNTHETIC: BETA10 0x1013bdf0
// MxCollection<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3eb0
// SYNTHETIC: BETA10 0x1013be30
// MxList<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3f60
// SYNTHETIC: BETA10 0x1013be70
// MxPtrList<MxRect32>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3fd0
// SYNTHETIC: BETA10 0x1013beb0
// MxRect32List::~MxRect32List

// SYNTHETIC: LEGO1 0x100b4020
// SYNTHETIC: BETA10 0x1013c0a0
// MxRect32ListCursor::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b4090
// TEMPLATE: BETA10 0x1013c0e0
// MxPtrListCursor<MxRect32>::~MxPtrListCursor<MxRect32>

// SYNTHETIC: LEGO1 0x100b40e0
// SYNTHETIC: BETA10 0x1013c140
// MxListCursor<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b4150
// SYNTHETIC: BETA10 0x1013c180
// MxPtrListCursor<MxRect32>::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b41c0
// TEMPLATE: BETA10 0x1013c1c0
// MxListCursor<MxRect32 *>::~MxListCursor<MxRect32 *>

// SYNTHETIC: LEGO1 0x100b4210
// SYNTHETIC: BETA10 0x1013c220
// MxRect32ListCursor::~MxRect32ListCursor

// TEMPLATE: BETA10 0x1013ba20
// MxPtrList<MxRect32>::MxPtrList<MxRect32>

// TEMPLATE: BETA10 0x1013baa0
// MxList<MxRect32 *>::MxList<MxRect32 *>

// TEMPLATE: BETA10 0x1013bc30
// MxCollection<MxRect32 *>::SetDestroy

// TEMPLATE: BETA10 0x1013bce0
// MxPtrList<MxRect32>::SetOwnership

// TEMPLATE: BETA10 0x1013bf90
// MxPtrListCursor<MxRect32>::MxPtrListCursor<MxRect32>

// TEMPLATE: BETA10 0x1013c010
// MxListCursor<MxRect32 *>::MxListCursor<MxRect32 *>

// TEMPLATE: BETA10 0x1013c3c0
// MxList<MxRect32 *>::DeleteAll

// TEMPLATE: BETA10 0x1013c450
// MxListCursor<MxRect32 *>::Next

// TEMPLATE: BETA10 0x1013c610
// MxListEntry<MxRect32 *>::GetNext

// TEMPLATE: BETA10 0x1013c630
// MxListEntry<MxRect32 *>::GetValue

// TEMPLATE: BETA10 0x10152860
// MxList<MxRect32 *>::Append

// TEMPLATE: BETA10 0x10152890
// MxList<MxRect32 *>::InsertEntry

// TEMPLATE: BETA10 0x10152980
// MxListEntry<MxRect32 *>::MxListEntry<MxRect32 *>

// TEMPLATE: BETA10 0x101529c0
// MxListEntry<MxRect32 *>::SetPrev

// TEMPLATE: BETA10 0x101529f0
// MxListEntry<MxRect32 *>::SetNext

// #endif // MXGEOMETRY_H


// Parsed from mxmisc.h

// #ifndef MXMISC_H
// #define MXMISC_H

// #include "lego1_export.h"
// #include "mxtypes.h"

@Opaque public static class MxAtomSet extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxAtomSet() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomSet(Pointer p) { super(p); }
}
@Opaque public static class MxDSAction extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSAction() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSAction(Pointer p) { super(p); }
}
@Opaque public static class MxEventManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEventManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEventManager(Pointer p) { super(p); }
}
@Opaque public static class MxNotificationManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxNotificationManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationManager(Pointer p) { super(p); }
}
@Opaque public static class MxObjectFactory extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxObjectFactory() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxObjectFactory(Pointer p) { super(p); }
}
@Opaque public static class MxSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSoundManager(Pointer p) { super(p); }
}
@Opaque public static class MxStreamer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamer(Pointer p) { super(p); }
}
@Opaque public static class MxVideoManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoManager(Pointer p) { super(p); }
}

public static native MxTickleManager TickleManager();
public static native MxTimer Timer();
public static native MxStreamer Streamer();
public static native MxSoundManager MSoundManager();
public static native MxVariableTable VariableTable();
public static native MxEventManager EventManager();
public static native @Cast("MxResult") int Start(MxDSAction arg0);
public static native MxNotificationManager NotificationManager();
public static native MxVideoManager MVideoManager();
public static native MxAtomSet AtomSet();
public static native MxObjectFactory ObjectFactory();
public static native void DeleteObject(@ByRef MxDSAction p_dsAction);

// #endif // MXMISC_H


// Parsed from mxomnicreateflags.h

// #ifndef MXOMNICREATEFLAGS_H
// #define MXOMNICREATEFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// SIZE 0x02
@NoOffset public static class MxOmniCreateFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmniCreateFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmniCreateFlags position(long position) {
        return (MxOmniCreateFlags)super.position(position);
    }
    @Override public MxOmniCreateFlags getPointer(long i) {
        return new MxOmniCreateFlags((Pointer)this).offsetAddress(i);
    }

	public MxOmniCreateFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10092b50
	public native void CreateObjectFactory(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092b90
	public native void CreateTickleManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092bd0
	public native void CreateVideoManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092c10
	public native void CreateSoundManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10130cd0
	public native @Cast("const MxBool") boolean CreateObjectFactory();

	// FUNCTION: BETA10 0x10130cf0
	public native @Cast("const MxBool") boolean CreateVariableTable();

	// FUNCTION: BETA10 0x10130d10
	public native @Cast("const MxBool") boolean CreateTickleManager();

	// FUNCTION: BETA10 0x10130d30
	public native @Cast("const MxBool") boolean CreateNotificationManager();

	// FUNCTION: BETA10 0x10130d50
	public native @Cast("const MxBool") boolean CreateVideoManager();

	// FUNCTION: BETA10 0x10130d70
	public native @Cast("const MxBool") boolean CreateSoundManager();

	// FUNCTION: BETA10 0x10130d90
	public native @Cast("const MxBool") boolean CreateMusicManager();

	// FUNCTION: BETA10 0x10130db0
	public native @Cast("const MxBool") boolean CreateEventManager();

	// FUNCTION: BETA10 0x10130dd0
	public native @Cast("const MxBool") boolean CreateTimer();

	// FUNCTION: BETA10 0x10130e00
	public native @Cast("const MxBool") boolean CreateStreamer();
}

// #endif // MXOMNICREATEFLAGS_H


// Parsed from mxomnicreateparam.h

// #ifndef MXOMNICREATEPARAM_H
// #define MXOMNICREATEPARAM_H

// #include "lego1_export.h"
// #include "mxomnicreateflags.h"
// #include "mxparam.h"
// #include "mxstring.h"
// #include "mxvideoparam.h"

// #include <SDL3/SDL_video.h>

// VTABLE: LEGO1 0x100dc218
// VTABLE: BETA10 0x101c1ca8
@NoOffset public static class MxOmniCreateParam extends MxParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateParam(Pointer p) { super(p); }

	public MxOmniCreateParam(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);
	public MxOmniCreateParam(
			String p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			String p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);

	// FUNCTION: BETA10 0x10092cb0
	public native @ByRef MxOmniCreateFlags CreateFlags();

	public native @Const @ByRef MxString GetMediaPath();
	public native HWND GetWindowHandle();
	public native @ByRef MxVideoParam GetVideoParam();
}

// SYNTHETIC: ISLE 0x4014b0
// SYNTHETIC: BETA10 0x10132780
// MxOmniCreateParam::~MxOmniCreateParam

// #endif // MXOMNICREATEPARAM_H


// Parsed from mxstring.h

// #ifndef MXSTRING_H
// #define MXSTRING_H

// #include "lego1_export.h"
// #include "mxcore.h"

// VTABLE: LEGO1 0x100dc110
// VTABLE: BETA10 0x101c1be0
// SIZE 0x10
@NoOffset public static class MxString extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxString position(long position) {
        return (MxString)super.position(position);
    }
    @Override public MxString getPointer(long i) {
        return new MxString((Pointer)this).offsetAddress(i);
    }

	public MxString() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxString(@Const @ByRef MxString p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Const @ByRef MxString p_str);
	public MxString(@Cast("const char*") BytePointer p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Cast("const char*") BytePointer p_str);
	public MxString(String p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(String p_str);
	public MxString(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen);
	public MxString(String p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(String p_str, @Cast("MxU16") int p_maxlen);

	public native void Reverse();
	public native void ToUpperCase();
	public native void ToLowerCase();
	public native void MapPathToFilesystem();

	public native @ByRef @Name("operator =") MxString put(@Const @ByRef MxString p_str);
	public native @Const @ByRef @Name("operator =") MxString put(@Cast("const char*") BytePointer p_str);
	public native @Const @ByRef @Name("operator =") MxString put(String p_str);
	public native @ByVal @Name("operator +") MxString add(@Const @ByRef MxString p_str);
	public native @ByVal @Name("operator +") MxString add(@Cast("const char*") BytePointer p_str);
	public native @ByVal @Name("operator +") MxString add(String p_str);
	public native @ByRef @Name("operator +=") MxString addPut(@Cast("const char*") BytePointer p_str);
	public native @ByRef @Name("operator +=") MxString addPut(String p_str);

	public static native void CharSwap(@Cast("char*") BytePointer p_a, @Cast("char*") BytePointer p_b);
	public static native void CharSwap(@Cast("char*") ByteBuffer p_a, @Cast("char*") ByteBuffer p_b);
	public static native void CharSwap(@Cast("char*") byte[] p_a, @Cast("char*") byte[] p_b);
	public static native void MapPathToFilesystem(@Cast("char*") BytePointer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") ByteBuffer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") byte[] p_path);

	// FUNCTION: BETA10 0x10017c50
	public native @Cast("char*") BytePointer GetData();

	// FUNCTION: BETA10 0x10067630
	public native @Cast("const MxU16") int GetLength();

	// FUNCTION: BETA10 0x100d8a30
	public native @Cast("MxBool") boolean Equal(@Const @ByRef MxString p_str);

	// FUNCTION: BETA10 0x1012a810
	public native @Cast("MxS8") char Compare(@Const @ByRef MxString p_str);
}

// #endif // MXSTRING_H


// Parsed from mxomni.h

// #ifndef MXOMNI_H
// #define MXOMNI_H

// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxstl/stlcompat.h"
// #include "mxstring.h"

// #include <SDL3/SDL_video.h>
// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif
@Opaque public static class MxEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEntity(Pointer p) { super(p); }
}
@Opaque public static class MxNotificationParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxNotificationParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationParam(Pointer p) { super(p); }
}
@Opaque public static class MxStreamController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamController(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc168
// SIZE 0x68
@NoOffset public static class MxOmni extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmni position(long position) {
        return (MxOmni)super.position(position);
    }
    @Override public MxOmni getPointer(long i) {
        return new MxOmni((Pointer)this).offsetAddress(i);
    }

	public static native void DestroyInstance();
	public static native @Cast("const char*") BytePointer GetCD();
	public static native @Cast("const char*") BytePointer GetHD();
	public static native MxOmni GetInstance();
	public static native @Cast("MxBool") boolean IsSound3D();
	public static native void SetCD(@Cast("const char*") BytePointer p_cd);
	public static native void SetCD(String p_cd);
	public static native void SetHD(@Cast("const char*") BytePointer p_hd);
	public static native void SetHD(String p_hd);
	public static native void SetSound3D(@Cast("MxBool") boolean p_use3dSound);
	
	

	public MxOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param);                                                 // vtable+0x04
	public native void Init();                                                                      // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                      // vtable+0x18
	public native void Destroy();                                                                   // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                           // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                        // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                   // vtable+0x28
	public native @Cast("MxResult") int CreatePresenter(MxStreamController p_controller, @ByRef MxDSAction p_action); // vtable+0x2c
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer arg0, @Cast("MxS32") int arg1, MxPresenter arg2);
	public native MxEntity AddToWorld(String arg0, @Cast("MxS32") int arg1, MxPresenter arg2);                           // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                     // vtable+0x34
	public native void Pause();                                                                     // vtable+0x38
	public native void Resume();                                                                    // vtable+0x3c

	// FUNCTION: LEGO1 0x10058a90
	public native @Cast("MxBool") boolean IsPaused(); // vtable+0x40

	public static native void SetInstance(MxOmni p_instance);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, @Cast("const char*") BytePointer p_name);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, String p_name);

	public native HWND GetWindowHandle();

	// FUNCTION: BETA10 0x10125100
	public native MxObjectFactory GetObjectFactory();

	// FUNCTION: BETA10 0x10125120
	public native MxNotificationManager GetNotificationManager();

	// FUNCTION: BETA10 0x10125140
	public native MxTickleManager GetTickleManager();

	// FUNCTION: BETA10 0x10125160
	public native MxTimer GetTimer();

	// FUNCTION: BETA10 0x101251a0
	public native MxStreamer GetStreamer();

	// FUNCTION: BETA10 0x100e5250
	public native MxSoundManager GetSoundManager();

	// FUNCTION: BETA10 0x1009e860
	public native MxVideoManager GetVideoManager();

	// FUNCTION: BETA10 0x101251c0
	public native MxVariableTable GetVariableTable();

	// FUNCTION: BETA10 0x10125200
	public native MxEventManager GetEventManager();

	// FUNCTION: BETA10 0x10125180
	public native MxAtomSet GetAtomSet();

	public native @Cast("MxLong") long HandleEndAction(@ByRef MxParam p_param);
}

// #endif // MXOMNI_H


// Parsed from legomain.h

// #ifndef LEGOMAIN_H
// #define LEGOMAIN_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "legoutils.h"
// #include "mxdsaction.h"
// #include "mxomni.h"

// #include <SDL3/SDL_events.h>
// #include <SDL3/SDL_timer.h>

@Opaque public static class Isle extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Isle() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Isle(Pointer p) { super(p); }
}
@Opaque public static class LegoAnimationManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoAnimationManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoAnimationManager(Pointer p) { super(p); }
}
@Opaque public static class LegoBuildingManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoBuildingManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBuildingManager(Pointer p) { super(p); }
}
@Opaque public static class LegoCharacterManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoCharacterManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoCharacterManager(Pointer p) { super(p); }
}
@Opaque public static class LegoEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoEntity(Pointer p) { super(p); }
}
@Opaque public static class LegoInputManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoInputManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoInputManager(Pointer p) { super(p); }
}
@Opaque public static class LegoNavController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoNavController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoNavController(Pointer p) { super(p); }
}
@Opaque public static class LegoPathActor extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathActor() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathActor(Pointer p) { super(p); }
}
@Opaque public static class LegoPathBoundary extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathBoundary() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathBoundary(Pointer p) { super(p); }
}
@Opaque public static class LegoPlantManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPlantManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPlantManager(Pointer p) { super(p); }
}
@Opaque public static class LegoSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoSoundManager(Pointer p) { super(p); }
}
@Opaque public static class LegoTextureContainer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoTextureContainer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoTextureContainer(Pointer p) { super(p); }
}
@Opaque public static class LegoWorld extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorld() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorld(Pointer p) { super(p); }
}
@Opaque public static class LegoWorldList extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorldList() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorldList(Pointer p) { super(p); }
}
@Opaque public static class MxAtomId extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxAtomId() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomId(Pointer p) { super(p); }
}
@Opaque public static class MxBackgroundAudioManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxBackgroundAudioManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxBackgroundAudioManager(Pointer p) { super(p); }
}
@Opaque public static class ViewLODListManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewLODListManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewLODListManager(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d8638
// VTABLE: BETA10 0x101bc8b8
// SIZE 0x140
@NoOffset public static class LegoOmni extends MxOmni {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoOmni position(long position) {
        return (LegoOmni)super.position(position);
    }
    @Override public LegoOmni getPointer(long i) {
        return new LegoOmni((Pointer)this).offsetAddress(i);
    }

	/** enum LegoOmni:: */
	public static final int
		c_disableInput = 0x01,
		c_disable3d = 0x02,
		c_clearScreen = 0x04;

	public enum World {
		e_undefined(-1),
		e_act1(0),
		e_imain(1),
		e_icube(2),
		e_ireg(3),
		e_ielev(4),
		e_iisle(5),
		e_hosp(6),
		e_police(7),
		e_gmain(8),
		e_bldh(9),
		e_bldd(10),
		e_bldj(11),
		e_bldr(12),
		e_racc(13),
		e_racj(14),
		e_act2(15),
		e_act3(16),
		e_test(17),
		e_numWorlds(e_test.value + 2);// count e_undefined

	    public final int value;
	    private World(int v) { this.value = v; }
	    private World(World e) { this.value = e.value; }
	    public World intern() { for (World e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	// SIZE 0x1c
	@NoOffset public static class WorldContainer extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public WorldContainer(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public WorldContainer(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public WorldContainer position(long position) {
	        return (WorldContainer)super.position(position);
	    }
	    @Override public WorldContainer getPointer(long i) {
	        return new WorldContainer((Pointer)this).offsetAddress(i);
	    }
	
		// FUNCTION: LEGO1 0x1005ac40
		public WorldContainer() { super((Pointer)null); allocate(); }
		private native void allocate();

		public WorldContainer(World p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(World p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId);
		public WorldContainer(World p_id, String p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(World p_id, String p_key, MxAtomId p_atomId);

		// FUNCTION: LEGO1 0x1005ac50
		public native @ByRef @Name("operator =") WorldContainer put(@Const @ByRef WorldContainer p_container);

		public native World m_id(); public native WorldContainer m_id(World setter);         // 0x00
		public native @Cast("char") byte m_key(int i); public native WorldContainer m_key(int i, byte setter);
		@MemberGetter public native @Cast("char*") BytePointer m_key();     // 0x04
		public native MxAtomId m_atomId(); public native WorldContainer m_atomId(MxAtomId setter); // 0x18
	}

	public LegoOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: LEGO1 0x10058aa0
	// FUNCTION: BETA10 0x1008f830
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x10058ab0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void Init();                                                                        // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                        // vtable+0x18
	public native void Destroy();                                                                     // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                             // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                          // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                     // vtable+0x28
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter);
	public native MxEntity AddToWorld(String p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter); // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                       // vtable+0x34
	public native void Pause();                                                                       // vtable+0x38
	public native void Resume();                                                                      // vtable+0x3c

	public native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
	public native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
	public native LegoROI FindROI(String p_name);
	public native void AddWorld(LegoWorld p_world);
	public native void DeleteWorld(LegoWorld p_world);
	public native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
	public native void CreateBackgroundAudio();
	public native void RemoveWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxLong") long p_objectId);
	public native @Cast("MxResult") int RegisterWorlds();
	public native @Cast("const char*") BytePointer GetWorldName(World p_id);
	public native MxAtomId GetWorldAtom(World p_id);
	public native World GetWorldId(@Cast("const char*") BytePointer p_key);
	public native World GetWorldId(String p_key);
	public native void DeleteAction();

	
	public static native void CreateInstance();
	public static native LegoOmni GetInstance();

	
	

	// FUNCTION: BETA10 0x1009e7a0
	public native LegoInputManager GetInputManager();

	public native LegoTextureContainer GetTextureContainer();
	public native ViewLODListManager GetViewLODListManager();
	public native LegoWorld GetCurrentWorld();
	public native LegoNavController GetNavController();
	public native LegoPathActor GetUserActor();

	// FUNCTION: BETA10 0x100e53a0
	public native LegoPlantManager GetPlantManager();

	public native LegoAnimationManager GetAnimationManager();

	// FUNCTION: BETA10 0x100e53d0
	public native LegoBuildingManager GetBuildingManager();

	// FUNCTION: BETA10 0x100e52b0
	public native LegoGameState GetGameState();

	// FUNCTION: BETA10 0x100e5280
	public native MxBackgroundAudioManager GetBackgroundAudioManager();

	public native MxTransitionManager GetTransitionManager();
	public native @ByRef MxDSAction GetCurrentAction();
	public native LegoCharacterManager GetCharacterManager();
	public native LegoWorldList GetWorldList();

	public native void SetNavController(LegoNavController p_navController);
	public native void SetUserActor(LegoPathActor p_userActor);
	public native void SetCurrentWorld(LegoWorld p_currentWorld);

	// FUNCTION: BETA10 0x100d55c0
	public native void SetExit(@Cast("MxBool") boolean p_exit);

	public native @Cast("MxResult") int StartActionIfInitialized(@ByRef MxDSAction p_dsAction);
	public native void SetInitialized(@Cast("MxBool") boolean p_unk0x13c);

	public native void CloseMainWindow();

	public native void SetVersion10(@Cast("MxBool") boolean p_version10);
	public native @Cast("MxBool") boolean IsVersion10();
	public native @Cast("MxBool") boolean m_initialized(); public native LegoOmni m_initialized(boolean setter); // 0x13c
}

// #endif // LEGOMAIN_H


// Parsed from mxpresenter.h

// #ifndef MXPRESENTER_H
// #define MXPRESENTER_H

// #include "decomp.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxgeometry.h"
// #include "mxutilities.h"

// #include <SDL3/SDL_events.h>

@Opaque public static class MxCompositePresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxCompositePresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCompositePresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d4d38
// SIZE 0x40
@NoOffset public static class MxPresenter extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPresenter position(long position) {
        return (MxPresenter)super.position(position);
    }
    @Override public MxPresenter getPointer(long i) {
        return new MxPresenter((Pointer)this).offsetAddress(i);
    }

	public enum TickleState {
		e_idle(0),
		e_ready(1),
		e_starting(2),
		e_streaming(3),
		e_repeating(4),
		e_freezing(5),
		e_done(6);

	    public final int value;
	    private TickleState(int v) { this.value = v; }
	    private TickleState(TickleState e) { this.value = e.value; }
	    public TickleState intern() { for (TickleState e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public MxPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1000be30
	public native void VTable0x14(); // vtable+0x14

	// FUNCTION: LEGO1 0x1000be40
	public native void ReadyTickle(); // vtable+0x18

	// FUNCTION: LEGO1 0x1000be60
	public native void StartingTickle(); // vtable+0x1c

	// FUNCTION: LEGO1 0x1000be80
	public native void StreamingTickle(); // vtable+0x20

	// FUNCTION: LEGO1 0x1000bea0
	public native void RepeatingTickle(); // vtable+0x24

	// FUNCTION: LEGO1 0x1000bec0
	public native void FreezingTickle();
	// FUNCTION: LEGO1 0x1000bf00 // vtable+0x00

	// FUNCTION: LEGO1 0x1000bf70
	public native @Cast("MxResult") int AddToManager(); // vtable+0x34

	// FUNCTION: LEGO1 0x1000bf80
	public native void Destroy(); // vtable+0x38

	public native @Cast("MxResult") int StartAction(MxStreamController arg0, MxDSAction arg1); // vtable+0x3c
	public native void EndAction();                                       // vtable+0x40

	// FUNCTION: LEGO1 0x1000bf90
	// FUNCTION: BETA10 0x10054a50
	public native void SetTickleState(TickleState p_tickleState); // vtable+0x44

	// FUNCTION: LEGO1 0x1000bfb0
	public native @Cast("MxBool") boolean HasTickleStatePassed(TickleState p_tickleState); // vtable+0x48

	// FUNCTION: LEGO1 0x1000bfc0
	public native @Cast("MxResult") int PutData(); // vtable+0x4c

	// FUNCTION: LEGO1 0x1000bfd0
	public native @Cast("MxBool") boolean IsHit(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y); // vtable+0x50

	public native void Enable(@Cast("MxBool") boolean p_enable); // vtable+0x54

	// FUNCTION: BETA10 0x1004d9e0
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000bfe0
	// FUNCTION: BETA10 0x1004d9b0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000bff0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native MxEntity CreateEntity(@Cast("const char*") BytePointer p_defaultName);
	public native MxEntity CreateEntity(String p_defaultName);
	public native void SendToCompositePresenter(MxOmni p_omni);
	public native @Cast("MxBool") boolean IsEnabled();

	public native @Cast("MxS32") int GetCurrentTickleState();
	public native @ByVal MxPoint32 GetLocation();
	public native @Cast("MxS32") int GetX();
	public native @Cast("MxS32") int GetY();

	// FUNCTION: BETA10 0x10031b70
	public native @Cast("MxS32") int GetDisplayZ();

	// FUNCTION: BETA10 0x10028430
	public native MxDSAction GetAction();

	public native void SetAction(MxDSAction p_action);

	public native void SetCompositePresenter(MxCompositePresenter p_compositePresenter);

	// FUNCTION: BETA10 0x10031b40
	public native void SetDisplayZ(@Cast("MxS32") int p_displayZ);
}

public static native @Cast("const char*") BytePointer PresenterNameDispatch(@Const @ByRef MxDSAction arg0);

// #endif // MXPRESENTER_H


// Parsed from mxpresentationmanager.h

// #ifndef MXPRESENTATIONMANAGER_H
// #define MXPRESENTATIONMANAGER_H

// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxpresenterlist.h"
// #include "mxtypes.h"

@Opaque public static class MxThread extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxThread() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxThread(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc6b0
// VTABLE: BETA10 0x101c2318
// SIZE 0x2c
@NoOffset public static class MxPresentationManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPresentationManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPresentationManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPresentationManager position(long position) {
        return (MxPresentationManager)super.position(position);
    }
    @Override public MxPresentationManager getPointer(long i) {
        return new MxPresentationManager((Pointer)this).offsetAddress(i);
    }

	public MxPresentationManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle();                                 // vtable+08
	public native @Cast("MxResult") int Create();                                  // vtable+14
	public native void Destroy();                                     // vtable+18
	public native void RegisterPresenter(@ByRef MxPresenter p_presenter);   // vtable+1c
	public native void UnregisterPresenter(@ByRef MxPresenter p_presenter); // vtable+20
	public native void StopPresenters();                              // vtable+24

	public native @Cast("MxResult") int Init();
}

// #endif // MXPRESENTATIONMANAGER_H


// Parsed from mxtransitionmanager.h

// #ifndef MXTRANSITIONMANAGER_H
// #define MXTRANSITIONMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>
// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxVideoPresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoPresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoPresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d7ea0
// VTABLE: BETA10 0x101bf670
// SIZE 0x900
@NoOffset public static class MxTransitionManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTransitionManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTransitionManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTransitionManager position(long position) {
        return (MxTransitionManager)super.position(position);
    }
    @Override public MxTransitionManager getPointer(long i) {
        return new MxTransitionManager((Pointer)this).offsetAddress(i);
    }

	public MxTransitionManager() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native void SetWaitIndicator(MxVideoPresenter p_waitIndicator);

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1004b950
	// FUNCTION: BETA10 0x100ed8e0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1004b960
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int GetDDrawSurfaceFromVideoManager(); // vtable+0x14

	public enum TransitionType {
		e_idle(0), // name verified by BETA10 0x100ec4e6
		e_noAnimation(1),
		e_dissolve(2),
		e_mosaic(3),
		e_wipeDown(4),
		e_windows(5),
		e_broken(6);// Unknown what this is supposed to be, it locks the game up

	    public final int value;
	    private TransitionType(int v) { this.value = v; }
	    private TransitionType(TransitionType e) { this.value = e.value; }
	    public TransitionType intern() { for (TransitionType e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public native @Cast("MxResult") int StartTransition(TransitionType p_animationType, @Cast("MxS32") int p_speed, @Cast("MxBool") boolean p_doCopy, @Cast("MxBool") boolean p_playMusicInAnim);

	public native TransitionType GetTransitionType();

	public static native void configureMxTransitionManager(TransitionType p_transitionManagerConfig);
}

// #endif // MXTRANSITIONMANAGER_H


// Parsed from mxvariable.h

// #ifndef MXVARIABLE_H
// #define MXVARIABLE_H

// #include "mxcore.h"
// #include "mxstring.h"

// VTABLE: LEGO1 0x100d7498
// VTABLE: BETA10 0x101bc038
// SIZE 0x24
@NoOffset public static class MxVariable extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariable(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVariable(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVariable position(long position) {
        return (MxVariable)super.position(position);
    }
    @Override public MxVariable getPointer(long i) {
        return new MxVariable((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1007b750
	public MxVariable() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1012a840
	public MxVariable(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public MxVariable(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	// FUNCTION: BETA10 0x1012aa30
	public MxVariable(@Cast("const char*") BytePointer p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(@Cast("const char*") BytePointer p_key);
	public MxVariable(String p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(String p_key);

	// FUNCTION: LEGO1 0x1003bea0
	// FUNCTION: BETA10 0x1007b810
	public native MxString GetValue(); // vtable+0x00

	// FUNCTION: LEGO1 0x1003beb0
	// FUNCTION: BETA10 0x1007b840
	public native void SetValue(@Cast("const char*") BytePointer p_value);
	public native void SetValue(String p_value); // vtable+0x04

	// FUNCTION: LEGO1 0x1003bec0
	// FUNCTION: BETA10 0x1007b870
	public native void Destroy(); // vtable+0x08

	// FUNCTION: BETA10 0x1012a7f0
	public native @Const MxString GetKey();
}

// SYNTHETIC: LEGO1 0x1003bf40
// SYNTHETIC: BETA10 0x1007b910
// MxVariable::~MxVariable

// #endif // MXVARIABLE_H


// Parsed from mxvideoparam.h

// #ifndef MXVIDEOPARAM_H
// #define MXVIDEOPARAM_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "mxgeometry.h"
// #include "mxtypes.h"
// #include "mxvideoparamflags.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxPalette extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxPalette() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPalette(Pointer p) { super(p); }
}

public static final String ISLE_PROP_WINDOW_CREATE_VIDEO_PARAM = "ISLE.window.create.videoParam";

// SIZE 0x24
@NoOffset public static class MxVideoParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParam position(long position) {
        return (MxVideoParam)super.position(position);
    }
    @Override public MxVideoParam getPointer(long i) {
        return new MxVideoParam((Pointer)this).offsetAddress(i);
    }

	public MxVideoParam() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxVideoParam(
			@ByRef MxRect32 p_rect,
			MxPalette p_palette,
			@Cast("MxULong") long p_backBuffers,
			@ByRef MxVideoParamFlags p_flags
		) { super((Pointer)null); allocate(p_rect, p_palette, p_backBuffers, p_flags); }
	private native void allocate(
			@ByRef MxRect32 p_rect,
			MxPalette p_palette,
			@Cast("MxULong") long p_backBuffers,
			@ByRef MxVideoParamFlags p_flags
		);
	public MxVideoParam(@ByRef MxVideoParam p_videoParam) { super((Pointer)null); allocate(p_videoParam); }
	private native void allocate(@ByRef MxVideoParam p_videoParam);
	public native void SetDeviceName(@Cast("char*") BytePointer p_deviceId);
	public native void SetDeviceName(@Cast("char*") ByteBuffer p_deviceId);
	public native void SetDeviceName(@Cast("char*") byte[] p_deviceId);
	public native @ByRef @Name("operator =") MxVideoParam put(@Const @ByRef MxVideoParam p_videoParam);

	// FUNCTION: BETA10 0x100886e0
	public native @ByRef MxVideoParamFlags Flags();

	// FUNCTION: BETA10 0x100d81f0
	public native @ByRef MxRect32 GetRect();

	// FUNCTION: BETA10 0x100d8210
	public native MxPalette GetPalette();

	// FUNCTION: BETA10 0x100d8240
	public native void SetPalette(MxPalette p_palette);

	// FUNCTION: BETA10 0x100d8270
	public native @Cast("char*") BytePointer GetDeviceName();

	// FUNCTION: BETA10 0x10141f60
	public native @Cast("MxU32") long GetBackBuffers();

	// FUNCTION: BETA10 0x10141fe0
	public native void SetBackBuffers(@Cast("MxU32") long p_backBuffers);

	public native void SetMSAASamples(@Cast("MxU32") long p_msaaSamples);
	public native @Cast("MxU32") long GetMSAASamples();

	public native void SetAnisotropic(@Cast("MxFloat") float p_anisotropic);
	public native @Cast("MxFloat") float GetAnisotropic();
}

// #endif // MXVIDEOPARAM_H


// Parsed from mxvideoparamflags.h

// #ifndef MXVIDEOPARAMFLAGS_H
// #define MXVIDEOPARAMFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif

@NoOffset public static class MxVideoParamFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParamFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParamFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParamFlags position(long position) {
        return (MxVideoParamFlags)super.position(position);
    }
    @Override public MxVideoParamFlags getPointer(long i) {
        return new MxVideoParamFlags((Pointer)this).offsetAddress(i);
    }

	public MxVideoParamFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// inlined in ISLE
	public native void SetFullScreen(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141f80
	public native void SetFlipSurfaces(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141fb0
	public native void SetBackBuffers(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d9250
	public native void SetDoubleScaling(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void Set16Bit(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetWideViewAngle(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF1bit7(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d81b0
	public native void SetLacksLightSupport(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetEnabled(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x1009e770
	public native @Cast("MxBool") boolean GetFullScreen();

	// FUNCTION: BETA10 0x100d80f0
	public native @Cast("MxBool") boolean GetFlipSurfaces();

	// FUNCTION: BETA10 0x100d8120
	public native @Cast("MxBool") boolean GetBackBuffers();

	// FUNCTION: BETA10 0x10142010
	public native @Cast("MxBool") boolean GetDoubleScaling();

	// FUNCTION: BETA10 0x100d8150
	public native @Cast("MxBool") boolean Get16Bit();

	// FUNCTION: BETA10 0x100d8180
	public native @Cast("MxBool") boolean GetWideViewAngle();

	// FUNCTION: BETA10 0x100886b0
	public native @Cast("MxBool") boolean GetLacksLightSupport();

	// FUNCTION: BETA10 0x10142050
	public native @Cast("MxBool") boolean GetEnabled();
}

// #endif // MXVIDEOPARAMFLAGS_H


// Parsed from decomp.h

// #ifndef DECOMP_H
// #define DECOMP_H

// #ifndef NDEBUG
// Disable size assertions for debug builds because the sizes differ between debug and release builds.
// The release LEGO1.DLL is what we ultimately want to decompile, so this is what we assert against.
// #undef ENABLE_DECOMP_ASSERTS
// #endif

// #if defined(ENABLE_DECOMP_ASSERTS)
// #define DECOMP_STATIC_ASSERT(V)
// 	namespace
// 	{
// 	typedef int foo[(V) ? 1 : -1];
// 	}
// #define DECOMP_SIZE_ASSERT(T, S) DECOMP_STATIC_ASSERT(sizeof(T) == S)
// #else
// #define DECOMP_STATIC_ASSERT(V)
// #define DECOMP_SIZE_ASSERT(T, S)
// #endif

// #ifndef sizeOfArray
// #define sizeOfArray(arr) (sizeof(arr) / sizeof(arr[0]))
// #endif

// #endif // DECOMP_H


// Parsed from misc.h

// #ifndef MISC_H
// #define MISC_H

// #include "compat.h"
// #include "decomp.h"
// Long include path due to dependency of misc library on LegoOmni
// #include "lego/legoomni/include/actions/actionsfwd.h"
// #include "lego1_export.h"
// #include "mxtypes.h"
@Opaque public static class LegoControlManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoControlManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoControlManager(Pointer p) { super(p); }
}
@Opaque public static class ViewManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewManager(Pointer p) { super(p); }
}

public static native @Cast("MxBool") boolean g_isWorldActive(); public static native void g_isWorldActive(boolean setter);

public static native LegoOmni Lego();
public static native LegoSoundManager SoundManager();
public static native LegoVideoManager VideoManager();
public static native MxBackgroundAudioManager BackgroundAudioManager();
public static native LegoInputManager InputManager();
public static native LegoControlManager ControlManager();
public static native LegoGameState GameState();
public static native LegoAnimationManager AnimationManager();
public static native LegoNavController NavController();
public static native LegoPathActor UserActor();
public static native LegoWorld CurrentWorld();
public static native LegoCharacterManager CharacterManager();
public static native ViewManager GetViewManager();
public static native LegoPlantManager PlantManager();
public static native LegoBuildingManager BuildingManager();
public static native LegoTextureContainer TextureContainer();
public static native ViewLODListManager GetViewLODListManager();
public static native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
public static native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
public static native LegoROI FindROI(String p_name);
public static native void SetROIVisible(@Cast("const char*") BytePointer p_name, @Cast("MxBool") boolean p_visible);
public static native void SetROIVisible(String p_name, @Cast("MxBool") boolean p_visible);
public static native void SetUserActor(LegoPathActor p_userActor);
public static native @Cast("MxResult") int StartActionIfInitialized(@ByRef MxDSAction p_dsAction);
public static native void DeleteAction();
public static native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
public static native @ByRef MxDSAction GetCurrentAction();
public static native void SetCurrentWorld(LegoWorld p_world);
public static native MxTransitionManager TransitionManager();

public static native void SetIsWorldActive(@Cast("MxBool") boolean p_isWorldActive);
public static native void DeleteObjects(MxAtomId p_id, @Cast("MxS32") int p_first, @Cast("MxS32") int p_last);

// #endif // MISC_H


// Parsed from miniwin/bitflags.h

// #pragma once

// #include <type_traits>

// Enable bitwise ops only for enum classes with the ENABLE_BITMASK_OPERATORS trait

// #define ENABLE_BITMASK_OPERATORS(x)
// 	template <>
// 	struct EnableBitMaskOperators<x> {
// 		static const bool enable = true;
// 	};


// Parsed from miniwin/ddraw.h

// #pragma once

// #include "bitflags.h"
// #include "miniwin/windows.h"

// #define DDENUMRET_OK TRUE

public static native long MAKE_DDHRESULT(long code);

// #define DD_OK S_OK
// #define DDERR_ALREADYINITIALIZED MAKE_DDHRESULT(5)
// #define DDERR_CANNOTATTACHSURFACE MAKE_DDHRESULT(10)
// #define DDERR_CANNOTDETACHSURFACE MAKE_DDHRESULT(20)
// #define DDERR_CURRENTLYNOTAVAIL MAKE_DDHRESULT(40)
// #define DDERR_EXCEPTION MAKE_DDHRESULT(55)
// #define DDERR_GENERIC ((HRESULT) 0x80004005)
// #define DDERR_HEIGHTALIGN MAKE_DDHRESULT(90)
// #define DDERR_INCOMPATIBLEPRIMARY MAKE_DDHRESULT(95)
// #define DDERR_INVALIDCAPS MAKE_DDHRESULT(100)
// #define DDERR_INVALIDCLIPLIST MAKE_DDHRESULT(110)
// #define DDERR_INVALIDMODE MAKE_DDHRESULT(120)
// #define DDERR_INVALIDOBJECT MAKE_DDHRESULT(130)
// #define DDERR_INVALIDPARAMS ((HRESULT) 0x80070057)
// #define DDERR_INVALIDPIXELFORMAT MAKE_DDHRESULT(145)
// #define DDERR_INVALIDRECT MAKE_DDHRESULT(150)
// #define DDERR_LOCKEDSURFACES MAKE_DDHRESULT(160)
// #define DDERR_NO3D MAKE_DDHRESULT(170)
// #define DDERR_NOALPHAHW MAKE_DDHRESULT(180)
// #define DDERR_NOCLIPLIST MAKE_DDHRESULT(205)
// #define DDERR_NOCOLORCONVHW MAKE_DDHRESULT(210)
// #define DDERR_NOCOOPERATIVELEVELSET MAKE_DDHRESULT(212)
// #define DDERR_NOCOLORKEY MAKE_DDHRESULT(215)
// #define DDERR_NOCOLORKEYHW MAKE_DDHRESULT(220)
// #define DDERR_NOEXCLUSIVEMODE MAKE_DDHRESULT(225)
// #define DDERR_NOFLIPHW MAKE_DDHRESULT(230)
// #define DDERR_NOGDI MAKE_DDHRESULT(240)
// #define DDERR_NOMIRRORHW MAKE_DDHRESULT(250)
// #define DDERR_NOTFOUND MAKE_DDHRESULT(255)
// #define DDERR_NOOVERLAYHW MAKE_DDHRESULT(260)
// #define DDERR_NORASTEROPHW MAKE_DDHRESULT(280)
// #define DDERR_NOROTATIONHW MAKE_DDHRESULT(290)
// #define DDERR_NOSTRETCHHW MAKE_DDHRESULT(310)
// #define DDERR_NOT4BITCOLOR MAKE_DDHRESULT(316)
// #define DDERR_NOT4BITCOLORINDEX MAKE_DDHRESULT(317)
// #define DDERR_NOT8BITCOLOR MAKE_DDHRESULT(320)
// #define DDERR_NOTEXTUREHW MAKE_DDHRESULT(330)
// #define DDERR_NOVSYNCHW MAKE_DDHRESULT(335)
// #define DDERR_NOZBUFFERHW MAKE_DDHRESULT(340)
// #define DDERR_NOZOVERLAYHW MAKE_DDHRESULT(350)
// #define DDERR_OUTOFCAPS MAKE_DDHRESULT(360)
// #define DDERR_OUTOFMEMORY ((HRESULT) 0x8007000E)
// #define DDERR_OUTOFVIDEOMEMORY MAKE_DDHRESULT(380)
// #define DDERR_OVERLAYCANTCLIP MAKE_DDHRESULT(382)
// #define DDERR_OVERLAYCOLORKEYONLYONEACTIVE MAKE_DDHRESULT(384)
// #define DDERR_PALETTEBUSY MAKE_DDHRESULT(387)
// #define DDERR_COLORKEYNOTSET MAKE_DDHRESULT(400)
// #define DDERR_SURFACEALREADYATTACHED MAKE_DDHRESULT(410)
// #define DDERR_SURFACEALREADYDEPENDENT MAKE_DDHRESULT(420)
// #define DDERR_SURFACEBUSY MAKE_DDHRESULT(430)
// #define DDERR_SURFACEISOBSCURED MAKE_DDHRESULT(440)
// #define DDERR_SURFACELOST MAKE_DDHRESULT(450)
// #define DDERR_SURFACENOTATTACHED MAKE_DDHRESULT(460)
// #define DDERR_TOOBIGHEIGHT MAKE_DDHRESULT(470)
// #define DDERR_TOOBIGSIZE MAKE_DDHRESULT(480)
// #define DDERR_TOOBIGWIDTH MAKE_DDHRESULT(490)
// #define DDERR_UNSUPPORTED ((HRESULT) 0x80004001)
// #define DDERR_UNSUPPORTEDFORMAT MAKE_DDHRESULT(510)
// #define DDERR_UNSUPPORTEDMASK MAKE_DDHRESULT(520)
// #define DDERR_VERTICALBLANKINPROGRESS MAKE_DDHRESULT(537)
// #define DDERR_WASSTILLDRAWING MAKE_DDHRESULT(540)
// #define DDERR_XALIGN MAKE_DDHRESULT(560)
// #define DDERR_INVALIDDIRECTDRAWGUID MAKE_DDHRESULT(561)
// #define DDERR_DIRECTDRAWALREADYCREATED MAKE_DDHRESULT(562)
// #define DDERR_NODIRECTDRAWHW MAKE_DDHRESULT(563)
// #define DDERR_PRIMARYSURFACEALREADYEXISTS MAKE_DDHRESULT(564)
// #define DDERR_NOEMULATION MAKE_DDHRESULT(565)
// #define DDERR_REGIONTOOSMALL MAKE_DDHRESULT(566)
// #define DDERR_CLIPPERISUSINGHWND MAKE_DDHRESULT(567)
// #define DDERR_NOCLIPPERATTACHED MAKE_DDHRESULT(568)
// #define DDERR_NOHWND MAKE_DDHRESULT(569)
// #define DDERR_HWNDSUBCLASSED MAKE_DDHRESULT(570)
// #define DDERR_HWNDALREADYSET MAKE_DDHRESULT(571)
// #define DDERR_NOPALETTEATTACHED MAKE_DDHRESULT(572)
// #define DDERR_NOPALETTEHW MAKE_DDHRESULT(573)
// #define DDERR_BLTFASTCANTCLIP MAKE_DDHRESULT(574)
// #define DDERR_NOBLTHW MAKE_DDHRESULT(575)
// #define DDERR_NODDROPSHW MAKE_DDHRESULT(576)
// #define DDERR_OVERLAYNOTVISIBLE MAKE_DDHRESULT(577)
// #define DDERR_NOOVERLAYDEST MAKE_DDHRESULT(578)
// #define DDERR_INVALIDPOSITION MAKE_DDHRESULT(579)
// #define DDERR_NOTAOVERLAYSURFACE MAKE_DDHRESULT(580)
// #define DDERR_EXCLUSIVEMODEALREADYSET MAKE_DDHRESULT(581)
// #define DDERR_NOTFLIPPABLE MAKE_DDHRESULT(582)
// #define DDERR_CANTDUPLICATE MAKE_DDHRESULT(583)
// #define DDERR_NOTLOCKED MAKE_DDHRESULT(584)
// #define DDERR_CANTCREATEDC MAKE_DDHRESULT(585)
// #define DDERR_NODC MAKE_DDHRESULT(586)
// #define DDERR_WRONGMODE MAKE_DDHRESULT(587)
// #define DDERR_IMPLICITLYCREATED MAKE_DDHRESULT(588)
// #define DDERR_NOTPALETTIZED MAKE_DDHRESULT(589)

// --- GUIDs ---



// --- Enums ---
// #define DDCKEY_SRCBLT DDColorKeyFlags::SRCBLT
public enum DDColorKeyFlags {
	SRCBLT(1 << 3);

    public final int value;
    private DDColorKeyFlags(int v) { this.value = v; }
    private DDColorKeyFlags(DDColorKeyFlags e) { this.value = e.value; }
    public DDColorKeyFlags intern() { for (DDColorKeyFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDFLIP_WAIT DDFlipFlags::WAIT
public enum DDFlipFlags {
	WAIT(1);

    public final int value;
    private DDFlipFlags(int v) { this.value = v; }
    private DDFlipFlags(DDFlipFlags e) { this.value = e.value; }
    public DDFlipFlags intern() { for (DDFlipFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDCAPS2_CERTIFIED DDCaps2Flags::CERTIFIED
public enum DDCaps2Flags {
	CERTIFIED(1);

    public final int value;
    private DDCaps2Flags(int v) { this.value = v; }
    private DDCaps2Flags(DDCaps2Flags e) { this.value = e.value; }
    public DDCaps2Flags intern() { for (DDCaps2Flags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDPCAPS_8BIT DDPixelCaps::_8BIT
// #define DDPCAPS_INITIALIZE DDPixelCaps::INITIALIZE
// #define DDPCAPS_ALLOW256 DDPixelCaps::ALLOW256
public enum DDPixelCaps {
	_8BIT(1 << 2),
	INITIALIZE(1 << 3),
	ALLOW256(1 << 6);

    public final int value;
    private DDPixelCaps(int v) { this.value = v; }
    private DDPixelCaps(DDPixelCaps e) { this.value = e.value; }
    public DDPixelCaps intern() { for (DDPixelCaps e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDBLT_NONE DDBltFlags::NONE
// #define DDBLT_KEYSRC DDBltFlags::KEYSRC
// #define DDBLT_ROP DDBltFlags::ROP
// #define DDBLT_COLORFILL DDBltFlags::COLORFILL
// #define DDBLT_WAIT DDBltFlags::WAIT
public enum DDBltFlags {
	NONE(0),
	COLORFILL(1 << 10),
	KEYSRC(1 << 15),
	ROP(1 << 17),
	WAIT(1 << 24);

    public final int value;
    private DDBltFlags(int v) { this.value = v; }
    private DDBltFlags(DDBltFlags e) { this.value = e.value; }
    public DDBltFlags intern() { for (DDBltFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDPF_ALPHAPIXELS DDPixelFormatFlags::ALPHAPIXELS
// #define DDPF_PALETTEINDEXED8 DDPixelFormatFlags::PALETTEINDEXED8
// #define DDPF_RGB DDPixelFormatFlags::RGB
// #define DDPF_ALPHAPIXELS DDPixelFormatFlags::ALPHAPIXELS
public enum DDPixelFormatFlags {
	ALPHAPIXELS(1 << 0),     // dwRGBAlphaBitMask is valid
	PALETTEINDEXED8(1 << 5), // The texture uses an 8 bit palette
	RGB(1 << 6);            // dwRGBBitCount, dwRBitMask, dwGBitMask, and dwBBitMask is valid

    public final int value;
    private DDPixelFormatFlags(int v) { this.value = v; }
    private DDPixelFormatFlags(DDPixelFormatFlags e) { this.value = e.value; }
    public DDPixelFormatFlags intern() { for (DDPixelFormatFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDBLTFAST_SRCCOLORKEY DDBltFastFlags::SRCCOLORKEY
// #define DDBLTFAST_WAIT DDBltFastFlags::WAIT
public enum DDBltFastFlags {
	SRCCOLORKEY(1 << 0),
	WAIT(1 << 4);

    public final int value;
    private DDBltFastFlags(int v) { this.value = v; }
    private DDBltFastFlags(DDBltFastFlags e) { this.value = e.value; }
    public DDBltFastFlags intern() { for (DDBltFastFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDLOCK_SURFACEMEMORYPTR DDLockFlags::SURFACEMEMORYPTR
// #define DDLOCK_WAIT DDLockFlags::WAIT
// #define DDLOCK_WRITEONLY DDLockFlags::WRITEONLY
// #define DDLOCK_READONLY DDLockFlags::READONLY
public enum DDLockFlags {
	SURFACEMEMORYPTR(0),
	WAIT(1 << 0),
	READONLY(1 << 4),
	WRITEONLY(1 << 5);

    public final int value;
    private DDLockFlags(int v) { this.value = v; }
    private DDLockFlags(DDLockFlags e) { this.value = e.value; }
    public DDLockFlags intern() { for (DDLockFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSCL_FULLSCREEN DDSCLFlags::FULLSCREEN
// #define DDSCL_ALLOWREBOOT DDSCLFlags::ALLOWREBOOT
// #define DDSCL_NORMAL DDSCLFlags::NORMAL
// #define DDSCL_EXCLUSIVE DDSCLFlags::EXCLUSIVE
public enum DDSCLFlags {
	FULLSCREEN(1 << 0),
	ALLOWREBOOT(1 << 1),
	NORMAL(1 << 3),
	EXCLUSIVE(1 << 4);

    public final int value;
    private DDSCLFlags(int v) { this.value = v; }
    private DDSCLFlags(DDSCLFlags e) { this.value = e.value; }
    public DDSCLFlags intern() { for (DDSCLFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSD_CAPS DDSurfaceDescFlags::CAPS
// #define DDSD_HEIGHT DDSurfaceDescFlags::HEIGHT
// #define DDSD_WIDTH DDSurfaceDescFlags::WIDTH
// #define DDSD_BACKBUFFERCOUNT DDSurfaceDescFlags::BACKBUFFERCOUNT
// #define DDSD_ZBUFFERBITDEPTH DDSurfaceDescFlags::ZBUFFERBITDEPTH
// #define DDSD_PIXELFORMAT DDSurfaceDescFlags::PIXELFORMAT
public enum DDSurfaceDescFlags {
	CAPS(1 << 0),            // ddsCaps is valid
	HEIGHT(1 << 1),          // dwHeight is valid
	WIDTH(1 << 2),           // dwWidth is valid
	BACKBUFFERCOUNT(1 << 5), // dwBackBufferCount is valid
	ZBUFFERBITDEPTH(1 << 6), // dwZBufferBitDepth is valid
	PIXELFORMAT(1 << 12);   // ddpfPixelFormat is valid

    public final int value;
    private DDSurfaceDescFlags(int v) { this.value = v; }
    private DDSurfaceDescFlags(DDSurfaceDescFlags e) { this.value = e.value; }
    public DDSurfaceDescFlags intern() { for (DDSurfaceDescFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSCAPS_BACKBUFFER DDSCapsFlags::BACKBUFFER
// #define DDSCAPS_COMPLEX DDSCapsFlags::COMPLEX
// #define DDSCAPS_FLIP DDSCapsFlags::FLIP
// #define DDSCAPS_OFFSCREENPLAIN DDSCapsFlags::OFFSCREENPLAIN
// #define DDSCAPS_PRIMARYSURFACE DDSCapsFlags::PRIMARYSURFACE
// #define DDSCAPS_SYSTEMMEMORY DDSCapsFlags::SYSTEMMEMORY
// #define DDSCAPS_TEXTURE DDSCapsFlags::TEXTURE
// #define DDSCAPS_3DDEVICE DDSCapsFlags::D3DDEVICE
// #define DDSCAPS_VIDEOMEMORY DDSCapsFlags::VIDEOMEMORY
// #define DDSCAPS_ZBUFFER DDSCapsFlags::ZBUFFER
public enum DDSCapsFlags {
	BACKBUFFER(1 << 2),
	COMPLEX(1 << 3),
	FLIP(1 << 4),
	OFFSCREENPLAIN(1 << 6),
	PRIMARYSURFACE(1 << 9),
	SYSTEMMEMORY(1 << 11),
	TEXTURE(1 << 12),
	D3DDEVICE(1 << 13),
	VIDEOMEMORY(1 << 14),
	ZBUFFER(1 << 17);

    public final int value;
    private DDSCapsFlags(int v) { this.value = v; }
    private DDSCapsFlags(DDSCapsFlags e) { this.value = e.value; }
    public DDSCapsFlags intern() { for (DDSCapsFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define PC_NONE PCFlags::NONE
// #define PC_NOCOLLAPSE PCFlags::NOCOLLAPSE
// #define D3DPAL_READONLY PCFlags::D3DREADONLY
// #define D3DPAL_RESERVED PCFlags::D3DRESERVED
public enum PCFlags {
	NONE((byte)(0)),
	NOCOLLAPSE((byte)(1 << 2)),
	D3DREADONLY((byte)(1 << 6)),
	D3DRESERVED((byte)(1 << 7));

    public final byte value;
    private PCFlags(byte v) { this.value = v; }
    private PCFlags(PCFlags e) { this.value = e.value; }
    public PCFlags intern() { for (PCFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// --- Structs ---
public static class DDCAPS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDCAPS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDCAPS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDCAPS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDCAPS position(long position) {
        return (DDCAPS)super.position(position);
    }
    @Override public DDCAPS getPointer(long i) {
        return new DDCAPS((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDCAPS dwSize(int setter);
	public native DDCaps2Flags dwCaps2(); public native DDCAPS dwCaps2(DDCaps2Flags setter);
	
}

public static class DDSCAPS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDSCAPS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDSCAPS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDSCAPS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDSCAPS position(long position) {
        return (DDSCAPS)super.position(position);
    }
    @Override public DDSCAPS getPointer(long i) {
        return new DDSCAPS((Pointer)this).offsetAddress(i);
    }

	public native DDSCapsFlags dwCaps(); public native DDSCAPS dwCaps(DDSCapsFlags setter);
}

// #define DDBLTFX_NOTEARING DDBLTFXFlags::NOTEARING
public enum DDBLTFXFlags {
	NOTEARING((byte)(1 << 3));

    public final byte value;
    private DDBLTFXFlags(byte v) { this.value = v; }
    private DDBLTFXFlags(DDBLTFXFlags e) { this.value = e.value; }
    public DDBLTFXFlags intern() { for (DDBLTFXFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
public static class DDBLTFX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDBLTFX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDBLTFX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDBLTFX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDBLTFX position(long position) {
        return (DDBLTFX)super.position(position);
    }
    @Override public DDBLTFX getPointer(long i) {
        return new DDBLTFX((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDBLTFX dwSize(int setter);
	public native DDBLTFXFlags dwDDFX(); public native DDBLTFX dwDDFX(DDBLTFXFlags setter);
	public native @Cast("DWORD") int dwROP(); public native DDBLTFX dwROP(int setter);
	public native @Cast("DWORD") int dwFillColor(); public native DDBLTFX dwFillColor(int setter);
}

public static class DDPIXELFORMAT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDPIXELFORMAT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDPIXELFORMAT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDPIXELFORMAT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDPIXELFORMAT position(long position) {
        return (DDPIXELFORMAT)super.position(position);
    }
    @Override public DDPIXELFORMAT getPointer(long i) {
        return new DDPIXELFORMAT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDPIXELFORMAT dwSize(int setter);
	public native DDPixelFormatFlags dwFlags(); public native DDPIXELFORMAT dwFlags(DDPixelFormatFlags setter);
	public native @Cast("DWORD") int dwRGBBitCount(); public native DDPIXELFORMAT dwRGBBitCount(int setter); // Bit count, Lego Island only handles 8 or 16
	public native @Cast("DWORD") int dwRBitMask(); public native DDPIXELFORMAT dwRBitMask(int setter);    // Red bit mask (0xF800)
	public native @Cast("DWORD") int dwGBitMask(); public native DDPIXELFORMAT dwGBitMask(int setter);    // Green bit mask (0x07E0)
	public native @Cast("DWORD") int dwBBitMask(); public native DDPIXELFORMAT dwBBitMask(int setter);    // Blue bit mask (0x001F)
	public native @Cast("DWORD") int dwRGBAlphaBitMask(); public native DDPIXELFORMAT dwRGBAlphaBitMask(int setter);
}

public static class DDCOLORKEY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDCOLORKEY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDCOLORKEY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDCOLORKEY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDCOLORKEY position(long position) {
        return (DDCOLORKEY)super.position(position);
    }
    @Override public DDCOLORKEY getPointer(long i) {
        return new DDCOLORKEY((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwColorSpaceLowValue(); public native DDCOLORKEY dwColorSpaceLowValue(int setter);
	public native @Cast("DWORD") int dwColorSpaceHighValue(); public native DDCOLORKEY dwColorSpaceHighValue(int setter);
}

public static class DDSURFACEDESC extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDSURFACEDESC() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDSURFACEDESC(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDSURFACEDESC(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDSURFACEDESC position(long position) {
        return (DDSURFACEDESC)super.position(position);
    }
    @Override public DDSURFACEDESC getPointer(long i) {
        return new DDSURFACEDESC((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDSURFACEDESC dwSize(int setter);
	public native DDSurfaceDescFlags dwFlags(); public native DDSURFACEDESC dwFlags(DDSurfaceDescFlags setter);
	public native @Cast("DWORD") int dwHeight(); public native DDSURFACEDESC dwHeight(int setter);
	public native @Cast("DWORD") int dwWidth(); public native DDSURFACEDESC dwWidth(int setter);
	public native @Cast("LONG") long lPitch(); public native DDSURFACEDESC lPitch(long setter);
	public native @Cast("DWORD") int dwBackBufferCount(); public native DDSURFACEDESC dwBackBufferCount(int setter);
	public native @Cast("DWORD") int dwZBufferBitDepth(); public native DDSURFACEDESC dwZBufferBitDepth(int setter);
	public native Pointer lpSurface(); public native DDSURFACEDESC lpSurface(Pointer setter);
	public native @ByRef DDPIXELFORMAT ddpfPixelFormat(); public native DDSURFACEDESC ddpfPixelFormat(DDPIXELFORMAT setter);
	public native @ByRef DDSCAPS ddsCaps(); public native DDSURFACEDESC ddsCaps(DDSCAPS setter);
}

public static class PALETTEENTRY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PALETTEENTRY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PALETTEENTRY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PALETTEENTRY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PALETTEENTRY position(long position) {
        return (PALETTEENTRY)super.position(position);
    }
    @Override public PALETTEENTRY getPointer(long i) {
        return new PALETTEENTRY((Pointer)this).offsetAddress(i);
    }

	public native @Cast("BYTE") byte peRed(); public native PALETTEENTRY peRed(byte setter);
	public native @Cast("BYTE") byte peGreen(); public native PALETTEENTRY peGreen(byte setter);
	public native @Cast("BYTE") byte peBlue(); public native PALETTEENTRY peBlue(byte setter);
	public native PCFlags peFlags(); public native PALETTEENTRY peFlags(PCFlags setter);
}

public static class LOGPALETTE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LOGPALETTE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LOGPALETTE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LOGPALETTE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LOGPALETTE position(long position) {
        return (LOGPALETTE)super.position(position);
    }
    @Override public LOGPALETTE getPointer(long i) {
        return new LOGPALETTE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("WORD") short palVersion(); public native LOGPALETTE palVersion(short setter);
	public native @Cast("WORD") short palNumEntries(); public native LOGPALETTE palNumEntries(short setter);
	public native @ByRef PALETTEENTRY palPalEntry(int i); public native LOGPALETTE palPalEntry(int i, PALETTEENTRY setter);
	@MemberGetter public native PALETTEENTRY palPalEntry();
}
public static class IDirectDrawPalette extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawPalette(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetEntries(@Cast("DWORD") int dwFlags, @Cast("DWORD") int dwBase, @Cast("DWORD") int dwNumEntries, @Cast("LPPALETTEENTRY") PALETTEENTRY lpEntries);
	public native @Cast("HRESULT") long SetEntries(@Cast("DWORD") int dwFlags, @Cast("DWORD") int dwStartingEntry, @Cast("DWORD") int dwCount, @Cast("LPPALETTEENTRY") PALETTEENTRY lpEntries);
}

public static class IDirectDrawClipper extends IUnknown {
    static { Loader.load(); }
    /** Default native constructor. */
    public IDirectDrawClipper() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IDirectDrawClipper(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawClipper(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public IDirectDrawClipper position(long position) {
        return (IDirectDrawClipper)super.position(position);
    }
    @Override public IDirectDrawClipper getPointer(long i) {
        return new IDirectDrawClipper((Pointer)this).offsetAddress(i);
    }

	public native @Cast("HRESULT") long SetHWnd(@Cast("DWORD") int unnamedParam1, HWND hWnd);
}
public static class IDirectDrawSurface extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawSurface(Pointer p) { super(p); }

	public native @Cast("HRESULT") long AddAttachedSurface(IDirectDrawSurface lpDDSAttachedSurface);
	public native @Cast("HRESULT") long Blt(
			@Cast("RECT*") Pointer lpDestRect,
			IDirectDrawSurface lpDDSrcSurface,
			@Cast("RECT*") Pointer lpSrcRect,
			DDBltFlags dwFlags,
			@Cast("LPDDBLTFX") DDBLTFX lpDDBltFx
		);
	public native @Cast("HRESULT") long BltFast(
			@Cast("DWORD") int dwX,
			@Cast("DWORD") int dwY,
			IDirectDrawSurface lpDDSrcSurface,
			@Cast("RECT*") Pointer lpSrcRect,
			DDBltFastFlags dwTrans
		);
	public native @Cast("HRESULT") long Flip(IDirectDrawSurface lpDDSurfaceTargetOverride, DDFlipFlags dwFlags);
	public native @Cast("HRESULT") long GetAttachedSurface(DDSCAPS lpDDSCaps, @Cast("IDirectDrawSurface**") PointerPointer lplpDDAttachedSurface);
	public native @Cast("HRESULT") long GetAttachedSurface(DDSCAPS lpDDSCaps, @ByPtrPtr IDirectDrawSurface lplpDDAttachedSurface);
	
	public native @Cast("HRESULT") long GetPalette(@Cast("IDirectDrawPalette**") PointerPointer lplpDDPalette);
	public native @Cast("HRESULT") long GetPalette(@ByPtrPtr IDirectDrawPalette lplpDDPalette);
	public native @Cast("HRESULT") long GetPixelFormat(DDPIXELFORMAT lpDDPixelFormat);
	public native @Cast("HRESULT") long GetSurfaceDesc(DDSURFACEDESC lpDDSurfaceDesc);
	public native @Cast("HRESULT") long IsLost();
	public native @Cast("HRESULT") long Lock(@Cast("RECT*") Pointer lpDestRect, DDSURFACEDESC lpDDSurfaceDesc, DDLockFlags dwFlags, Pointer hEvent);
	public native @Cast("HRESULT") long ReleaseDC(HDC hDC);
	public native @Cast("HRESULT") long Restore();
	public native @Cast("HRESULT") long SetClipper(@Cast("LPDIRECTDRAWCLIPPER") IDirectDrawClipper lpDDClipper);
	public native @Cast("HRESULT") long SetColorKey(DDColorKeyFlags dwFlags, @Cast("LPDDCOLORKEY") DDCOLORKEY lpDDColorKey);
	public native @Cast("HRESULT") long SetPalette(IDirectDrawPalette lpDDPalette);
	public native @Cast("HRESULT") long Unlock(Pointer lpSurfaceData);
}

@Opaque public static class IDirectDrawSurface3 extends IDirectDrawSurface {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirectDrawSurface3() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawSurface3(Pointer p) { super(p); }
}

public static class LPDDENUMMODESCALLBACK extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LPDDENUMMODESCALLBACK(Pointer p) { super(p); }
    protected LPDDENUMMODESCALLBACK() { allocate(); }
    private native void allocate();
    public native @Cast("HRESULT") long call(DDSURFACEDESC arg0, Pointer arg1);
}
public static class IDirectDraw extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDraw(Pointer p) { super(p); }

	public native @Cast("HRESULT") long CreateClipper(@Cast("DWORD") int dwFlags, @Cast("LPDIRECTDRAWCLIPPER*") PointerPointer lplpDDClipper, IUnknown pUnkOuter);
	public native @Cast("HRESULT") long CreatePalette(
			DDPixelCaps dwFlags,
			@Cast("LPPALETTEENTRY") PALETTEENTRY lpColorTable,
			@Cast("IDirectDrawPalette**") PointerPointer lplpDDPalette,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreatePalette(
			DDPixelCaps dwFlags,
			@Cast("LPPALETTEENTRY") PALETTEENTRY lpColorTable,
			@ByPtrPtr IDirectDrawPalette lplpDDPalette,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreateSurface(
			DDSURFACEDESC lpDDSurfaceDesc,
			@Cast("IDirectDrawSurface**") PointerPointer lplpDDSurface,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreateSurface(
			DDSURFACEDESC lpDDSurfaceDesc,
			@ByPtrPtr IDirectDrawSurface lplpDDSurface,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long EnumDisplayModes(
			@Cast("DWORD") int dwFlags,
			DDSURFACEDESC lpDDSurfaceDesc,
			Pointer lpContext,
			LPDDENUMMODESCALLBACK lpEnumModesCallback
		);
	public native @Cast("HRESULT") long FlipToGDISurface();
	public native @Cast("HRESULT") long GetCaps(@Cast("LPDDCAPS") DDCAPS lpDDDriverCaps, @Cast("LPDDCAPS") DDCAPS lpDDHELCaps);
	public native @Cast("HRESULT") long GetDisplayMode(DDSURFACEDESC lpDDSurfaceDesc);
	public native @Cast("HRESULT") long RestoreDisplayMode();
	public native @Cast("HRESULT") long SetCooperativeLevel(HWND hWnd, DDSCLFlags dwFlags);
	public native @Cast("HRESULT") long SetDisplayMode(@Cast("DWORD") int dwWidth, @Cast("DWORD") int dwHeight, @Cast("DWORD") int dwBPP);
}

@Opaque public static class IDirectDraw2 extends IDirectDraw {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirectDraw2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDraw2(Pointer p) { super(p); }
}

// --- Functions ---

public static native @Cast("HRESULT") long DirectDrawCreate(@Cast("GUID*") Pointer lpGuid, @Cast("IDirectDraw**") PointerPointer lplpDD, IUnknown pUnkOuter);
public static native @Cast("HRESULT") long DirectDrawCreate(@Cast("GUID*") Pointer lpGuid, @ByPtrPtr IDirectDraw lplpDD, IUnknown pUnkOuter);

public static class LPDDENUMCALLBACKA extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LPDDENUMCALLBACKA(Pointer p) { super(p); }
    protected LPDDENUMCALLBACKA() { allocate(); }
    private native void allocate();
    public native @Cast("BOOL") boolean call(GUID arg0, @Cast("LPSTR") String arg1, @Cast("LPSTR") String arg2, Pointer arg3);
}
public static native @Cast("HRESULT") long DirectDrawEnumerate(LPDDENUMCALLBACKA cb, Pointer context);

public static native @Cast("UINT") long GetSystemPaletteEntries(HDC hdc, @Cast("UINT") long iStart, @Cast("UINT") long cEntries, @Cast("LPPALETTEENTRY") PALETTEENTRY pPalEntries);

public static native HPALETTE CreatePalette(LOGPALETTE lpLogPalette);

public static native int SelectPalette(HDC hdc, HPALETTE hpal, @Cast("BOOL") boolean bForceBackground);

public static native int RealizePalette(HDC hdc);


// Parsed from miniwin/windows.h

// #pragma once

// #include <SDL3/SDL_video.h>
// #include <limits.h>
// #include <stdint.h>
// #include <string.h>

// --- Defines and Macros ---
public static native long MAKE_HRESULT(long sev, long fac, long code);

// #define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
// 	const GUID name = {l, w1, w2, {b1, b2, b3, b4, b5, b6, b7, b8}}

// Remove WinAPI stuff
// #define CALLBACK
// #define FAR
// #define WINAPI
// #define HWND_NOTOPMOST ((HWND) (-2))
// #define RGB(r, g, b) (((BYTE) (r) | ((BYTE) (g) << 8) | ((BYTE) (b) << 16)))
// #define S_OK ((HRESULT) 0)
public static final int E_NOINTERFACE = (0x80004002);
// #define VOID void
public static final int TRUE = 1;
public static final int FALSE = 0;

public static final int SWP_NOACTIVATE = 0x0010;
public static final int SWP_NOMOVE = 0x0002;
public static final int SWP_NOSIZE = 0x0004;
public static final int SWP_NOZORDER = 0x0001;

public static final int WM_CLOSE = 0x0010;
public static final int WM_QUIT = 0x0012;
public static final int WM_TIMER = 0x0113;

public static final long WS_CAPTION = 0x00C00000L;
public static final long WS_OVERLAPPED = 0x00000000L;
public static final long WS_POPUP = 0x80000000L;
public static final long WS_THICKFRAME = 0x00040000L;

public static final int GWL_STYLE = (-16);
public static final int GWL_EXSTYLE = -20;

public static final int ANSI_CHARSET = 0;
public static final int BI_RGB = 0;
public static final int CLIP_DEFAULT_PRECIS = 0;
public static final int DEFAULT_QUALITY = 0;
public static final int ETO_OPAQUE = 0x0002;
public static final int RASTERCAPS = 0x00000000;
public static final int RC_PALETTE = 0x0100;
public static final int SIZEPALETTE = 104;
public static final int FW_NORMAL = 400;
public static final int OPAQUE = 2;
public static final int OUT_DEFAULT_PRECIS = 0;
public static final int RDW_FRAME = 0x0400;
public static final int SRCCOPY = 0x00CC0020;
public static final int VARIABLE_PITCH = 2;

// --- Typedefs ---
@Namespace @Name("void") @Opaque public static class LPVOID extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LPVOID() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LPVOID(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class HANDLE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HANDLE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HANDLE(Pointer p) { super(p); }
}
@Opaque public static class HICON__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HICON__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HICON__(Pointer p) { super(p); }
}
@Opaque public static class HFONT__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HFONT__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HFONT__(Pointer p) { super(p); }
}
@Opaque public static class HINSTANCE__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HINSTANCE__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HINSTANCE__(Pointer p) { super(p); }
}
@Opaque public static class HMENU__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HMENU__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HMENU__(Pointer p) { super(p); }
}
@Name("HWND__") @Opaque public static class HWND extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HWND() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HWND(Pointer p) { super(p); }
}
@Name("HDC__") @Opaque public static class HDC extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HDC() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HDC(Pointer p) { super(p); }
}
@Name("HPALETTE__") @Opaque public static class HPALETTE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HPALETTE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HPALETTE(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class HFILE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HFILE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HFILE(Pointer p) { super(p); }
}

// --- Structs ---
public static class tagPOINT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public tagPOINT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tagPOINT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tagPOINT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public tagPOINT position(long position) {
        return (tagPOINT)super.position(position);
    }
    @Override public tagPOINT getPointer(long i) {
        return new tagPOINT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long x(); public native tagPOINT x(long setter);
	public native @Cast("LONG") long y(); public native tagPOINT y(long setter);
}

public static class SIZE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SIZE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SIZE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SIZE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SIZE position(long position) {
        return (SIZE)super.position(position);
    }
    @Override public SIZE getPointer(long i) {
        return new SIZE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long cx(); public native SIZE cx(long setter);
	public native @Cast("LONG") long cy(); public native SIZE cy(long setter);
}

public static class RECT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RECT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RECT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RECT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RECT position(long position) {
        return (RECT)super.position(position);
    }
    @Override public RECT getPointer(long i) {
        return new RECT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long left(); public native RECT left(long setter);
	public native @Cast("LONG") long top(); public native RECT top(long setter);
	public native @Cast("LONG") long right(); public native RECT right(long setter);
	public native @Cast("LONG") long bottom(); public native RECT bottom(long setter);
}

public static class BITMAPINFOHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFOHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFOHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFOHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFOHEADER position(long position) {
        return (BITMAPINFOHEADER)super.position(position);
    }
    @Override public BITMAPINFOHEADER getPointer(long i) {
        return new BITMAPINFOHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int biSize(); public native BITMAPINFOHEADER biSize(int setter);
	public native @Cast("LONG") long biWidth(); public native BITMAPINFOHEADER biWidth(long setter);
	public native @Cast("LONG") long biHeight(); public native BITMAPINFOHEADER biHeight(long setter);
	public native @Cast("WORD") short biPlanes(); public native BITMAPINFOHEADER biPlanes(short setter);
	public native @Cast("WORD") short biBitCount(); public native BITMAPINFOHEADER biBitCount(short setter);
	public native @Cast("DWORD") int biCompression(); public native BITMAPINFOHEADER biCompression(int setter);
	public native @Cast("DWORD") int biSizeImage(); public native BITMAPINFOHEADER biSizeImage(int setter);
	public native @Cast("LONG") long biXPelsPerMeter(); public native BITMAPINFOHEADER biXPelsPerMeter(long setter);
	public native @Cast("LONG") long biYPelsPerMeter(); public native BITMAPINFOHEADER biYPelsPerMeter(long setter);
	public native @Cast("DWORD") int biClrUsed(); public native BITMAPINFOHEADER biClrUsed(int setter);
	public native @Cast("DWORD") int biClrImportant(); public native BITMAPINFOHEADER biClrImportant(int setter);
}

public static class RGBQUAD extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RGBQUAD() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RGBQUAD(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RGBQUAD(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RGBQUAD position(long position) {
        return (RGBQUAD)super.position(position);
    }
    @Override public RGBQUAD getPointer(long i) {
        return new RGBQUAD((Pointer)this).offsetAddress(i);
    }

	public native @Cast("BYTE") byte rgbBlue(); public native RGBQUAD rgbBlue(byte setter);
	public native @Cast("BYTE") byte rgbGreen(); public native RGBQUAD rgbGreen(byte setter);
	public native @Cast("BYTE") byte rgbRed(); public native RGBQUAD rgbRed(byte setter);
	public native @Cast("BYTE") byte rgbReserved(); public native RGBQUAD rgbReserved(byte setter);
}

// #pragma pack(push, 1)
public static class BITMAPFILEHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPFILEHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPFILEHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPFILEHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPFILEHEADER position(long position) {
        return (BITMAPFILEHEADER)super.position(position);
    }
    @Override public BITMAPFILEHEADER getPointer(long i) {
        return new BITMAPFILEHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("WORD") short bfType(); public native BITMAPFILEHEADER bfType(short setter);
	public native @Cast("DWORD") int bfSize(); public native BITMAPFILEHEADER bfSize(int setter);
	public native @Cast("WORD") short bfReserved1(); public native BITMAPFILEHEADER bfReserved1(short setter);
	public native @Cast("WORD") short bfReserved2(); public native BITMAPFILEHEADER bfReserved2(short setter);
	public native @Cast("DWORD") int bfOffBits(); public native BITMAPFILEHEADER bfOffBits(int setter);
}
// #pragma pack(pop)

public static class BITMAPINFO extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFO() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFO(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFO(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFO position(long position) {
        return (BITMAPINFO)super.position(position);
    }
    @Override public BITMAPINFO getPointer(long i) {
        return new BITMAPINFO((Pointer)this).offsetAddress(i);
    }

	public native @ByRef BITMAPINFOHEADER bmiHeader(); public native BITMAPINFO bmiHeader(BITMAPINFOHEADER setter);
	public native @ByRef RGBQUAD bmiColors(int i); public native BITMAPINFO bmiColors(int i, RGBQUAD setter);
	@MemberGetter public native RGBQUAD bmiColors();
}

public static class GUID extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GUID() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GUID(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GUID(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GUID position(long position) {
        return (GUID)super.position(position);
    }
    @Override public GUID getPointer(long i) {
        return new GUID((Pointer)this).offsetAddress(i);
    }

	public native @Cast("uint32_t") int m_data1(); public native GUID m_data1(int setter);
	public native @Cast("uint16_t") short m_data2(); public native GUID m_data2(short setter);
	public native @Cast("uint16_t") short m_data3(); public native GUID m_data3(short setter);
	public native @Cast("uint8_t") byte m_data4(int i); public native GUID m_data4(int i, byte setter);
	@MemberGetter public native @Cast("uint8_t*") BytePointer m_data4();
}

@NoOffset public static class IUnknown extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IUnknown(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IUnknown(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public IUnknown position(long position) {
        return (IUnknown)super.position(position);
    }
    @Override public IUnknown getPointer(long i) {
        return new IUnknown((Pointer)this).offsetAddress(i);
    }

	public IUnknown() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("ULONG") int AddRef();
	public native @Cast("ULONG") int Release();
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") PointerPointer ppvObject);
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") @ByPtrPtr Pointer ppvObject);
}

public static native @Cast("BOOL") boolean SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, @Cast("UINT") long uFlags);







public static native @Cast("BOOL") boolean RedrawWindow(Pointer hWnd, @Const Pointer lprcUpdate, Pointer hrgnUpdate, @Cast("unsigned int") int flags);



public static native int DrawMenuBar(Pointer hWnd);

public static native int StretchDIBits(
	Pointer hdc,
	int xDest,
	int yDest,
	int DestWidth,
	int DestHeight,
	int xSrc,
	int ySrc,
	int SrcWidth,
	int SrcHeight,
	@Const Pointer lpBits,
	@Const Pointer lpbmi,
	@Cast("unsigned int") int iUsage,
	@Cast("uint32_t") int rop
);

public static native @Cast("LONG") long GetWindowLong(HWND hWnd, int nIndex);

public static native @Cast("LONG") long SetWindowLong(HWND hWnd, int nIndex, @Cast("LONG") long dwNewLong);

public static native int DeleteObject(Pointer arg0);

public static native @Cast("BOOL") boolean AdjustWindowRectEx(RECT lpRect, @Cast("DWORD") int dwStyle, @Cast("BOOL") boolean bMenu, @Cast("DWORD") int dwExStyle);

public static native int SetRect(RECT rc, int left, int top, int right, int bottom);

public static native @Cast("BOOL") boolean ClientToScreen(HWND hWnd, @Cast("LPPOINT") tagPOINT lpPoint);


}
