// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.github.itzswirlz.isleportablelwjgl.lego1;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LEGO1 extends org.github.itzswirlz.isleportablelwjgl.lego1.presets.LEGO1Config {
    static { Loader.load(); }

// Parsed from vector.h

// #ifndef VECTOR_H
// #define VECTOR_H

// #include "compat.h"

// Note: virtual function overloads appear in the virtual table
// in reverse order of appearance.

// VTABLE: LEGO1 0x100d4288
// VTABLE: BETA10 0x101b8440
// SIZE 0x08
@NoOffset public static class Vector2 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Vector2(Pointer p) { super(p); }

	// FUNCTION: LEGO1 0x1000c0f0
	// FUNCTION: BETA10 0x100116a0
	public Vector2(FloatPointer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatPointer p_data);
	public Vector2(FloatBuffer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatBuffer p_data);
	public Vector2(float[] p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(float[] p_data);

	// FUNCTION: BETA10 0x100109e0

	public native FloatPointer GetData();                                        // vtable+0x28                            // vtable+0x24
	public native void Clear();                                            // vtable+0x2c
	public native float Dot(@Const FloatPointer p_a, @Const FloatPointer p_b);
	public native float Dot(@Const FloatBuffer p_a, @Const FloatBuffer p_b);
	public native float Dot(@Const float[] p_a, @Const float[] p_b);     // vtable+0x3c
	public native float Dot(@Const @ByRef Vector2 p_a, @Const @ByRef Vector2 p_b); // vtable+0x38
	public native float Dot(@Const FloatPointer p_a, @Const @ByRef Vector2 p_b);
	public native float Dot(@Const FloatBuffer p_a, @Const @ByRef Vector2 p_b);
	public native float Dot(@Const float[] p_a, @Const @ByRef Vector2 p_b);   // vtable+0x34
	public native float Dot(@Const @ByRef Vector2 p_a, @Const FloatPointer p_b);
	public native float Dot(@Const @ByRef Vector2 p_a, @Const FloatBuffer p_b);
	public native float Dot(@Const @ByRef Vector2 p_a, @Const float[] p_b);   // vtable+0x30
	public native float LenSquared();                                // vtable+0x40
	public native int Unitize();                                           // vtable+0x44
	public native @Name("operator +=") void addPut(float p_value);                          // vtable+0x50
	public native @Name("operator +=") void addPut(@Const FloatPointer p_other);
	public native @Name("operator +=") void addPut(@Const FloatBuffer p_other);
	public native @Name("operator +=") void addPut(@Const float[] p_other);                   // vtable+0x4c
	public native @Name("operator +=") void addPut(@Const @ByRef Vector2 p_other);                 // vtable+0x48
	public native @Name("operator -=") void subtractPut(@Const FloatPointer p_other);
	public native @Name("operator -=") void subtractPut(@Const FloatBuffer p_other);
	public native @Name("operator -=") void subtractPut(@Const float[] p_other);                   // vtable+0x58
	public native @Name("operator -=") void subtractPut(@Const @ByRef Vector2 p_other);                 // vtable+0x54
	public native @Name("operator *=") void multiplyPut(@Const FloatPointer p_other);
	public native @Name("operator *=") void multiplyPut(@Const FloatBuffer p_other);
	public native @Name("operator *=") void multiplyPut(@Const float[] p_other);                   // vtable+0x64
	public native @Name("operator *=") void multiplyPut(@Const @ByRef Vector2 p_other);                 // vtable+0x60
	public native @Name("operator *=") void multiplyPut(float p_value);                   // vtable+0x5c
	public native @Name("operator /=") void dividePut(float p_value);                   // vtable+0x68
	public native @Name("operator =") void put(@Const FloatPointer p_other);
	public native @Name("operator =") void put(@Const FloatBuffer p_other);
	public native @Name("operator =") void put(@Const float[] p_other);                    // vtable+0x70
	public native @Name("operator =") void put(@Const @ByRef Vector2 p_other);                  // vtable+0x6c

	// SYNTHETIC: LEGO1 0x10010be0
	// SYNTHETIC: BETA10 0x100121e0
	// Vector3::operator=

	// SYNTHETIC: BETA10 0x1004af40
	// Vector4::operator=

	// FUNCTION: BETA10 0x1001d140
	public native @ByRef @Name("operator []") FloatPointer get(int idx);

	// FUNCTION: BETA10 0x1001d170
}

// VTABLE: LEGO1 0x100d4518
// VTABLE: BETA10 0x101b8398
// SIZE 0x08
public static class Vector3 extends Vector2 {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Vector3(Pointer p) { super(p); }

	// FUNCTION: LEGO1 0x1001d150
	// FUNCTION: BETA10 0x10011660
	public Vector3(FloatPointer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatPointer p_data);
	public Vector3(FloatBuffer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatBuffer p_data);
	public Vector3(float[] p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(float[] p_data);

	// Hack: Some code initializes a Vector3 from a (most likely) const float* source.
	// Example: LegoCameraController::GetWorldUp
	// Vector3 however is a class that can mutate its underlying source, making
	// initialization with a const source fundamentally incompatible.

	// FUNCTION: BETA10 0x100109a0

	public native void Clear();                                            // vtable+0x2c
	public native float LenSquared();                                // vtable+0x40
	public native void EqualsCross(@Const @ByRef Vector3 p_a, @Const @ByRef Vector3 p_b); // vtable+0x80
	public native void EqualsCross(@Const @ByRef Vector3 p_a, @Const FloatPointer p_b);
	public native void EqualsCross(@Const @ByRef Vector3 p_a, @Const FloatBuffer p_b);
	public native void EqualsCross(@Const @ByRef Vector3 p_a, @Const float[] p_b);   // vtable+0x7c
	public native void EqualsCross(@Const FloatPointer p_a, @Const @ByRef Vector3 p_b);
	public native void EqualsCross(@Const FloatBuffer p_a, @Const @ByRef Vector3 p_b);
	public native void EqualsCross(@Const float[] p_a, @Const @ByRef Vector3 p_b);   // vtable+0x78
	public native void Fill(float p_value);                          // vtable+0x84
}

// VTABLE: LEGO1 0x100d45a0
// VTABLE: BETA10 0x101bac38
// SIZE 0x08
public static class Vector4 extends Vector3 {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Vector4(Pointer p) { super(p); }

	// FUNCTION: BETA10 0x10048780
	public Vector4(FloatPointer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatPointer p_data);
	public Vector4(FloatBuffer p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(FloatBuffer p_data);
	public Vector4(float[] p_data) { super((Pointer)null); allocate(p_data); }
	private native void allocate(float[] p_data);

	// Some code initializes a Vector4 from a `const float*` source.
	// Example: `LegoCarBuild::VTable0x6c`
	// Vector4 however is a class that can mutate its underlying source, making
	// initialization with a const source fundamentally incompatible.
	// BETA10 appears to have two separate constructors for Vector4 as well,
	// supporting the theory that this decompilation is correct.

	// FUNCTION: BETA10 0x100701b0

	public native void Clear();                                                     // vtable+0x2c
	public native float LenSquared();                                         // vtable+0x40
	public native void Fill(float p_value);                                  // vtable+0x84
	public native void SetMatrixProduct(@Const FloatPointer p_vec, @Const FloatPointer p_mat);
	public native void SetMatrixProduct(@Const FloatBuffer p_vec, @Const FloatBuffer p_mat);
	public native void SetMatrixProduct(@Const float[] p_vec, @Const float[] p_mat);     // vtable+0x8c
	public native void SetMatrixProduct(@Const @ByRef Vector4 p_a, @Const FloatPointer p_b);
	public native void SetMatrixProduct(@Const @ByRef Vector4 p_a, @Const FloatBuffer p_b);
	public native void SetMatrixProduct(@Const @ByRef Vector4 p_a, @Const float[] p_b);       // vtable+0x88
	public native int NormalizeQuaternion();                                         // vtable+0x90
	public native int EqualsHamiltonProduct(@Const @ByRef Vector4 p_a, @Const @ByRef Vector4 p_b); // vtable+0x94

	public native @ByRef @Name("operator []") FloatPointer get(int idx);

	// FUNCTION: BETA10 0x10010890
}

// #ifdef COMPAT_MODE
// #include "vector2d.inl.h"
// #include "vector3d.inl.h"
// #include "vector4d.inl.h"
// #endif

// #endif // VECTOR_H


// Parsed from lego3dmanager.h

// #ifndef _Lego3DManager_h
// #define _Lego3DManager_h

// #include "assert.h"
// #include "lego3dview.h"
 // namespace Tgl

@Opaque public static class ViewROI extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewROI() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewROI(Pointer p) { super(p); }
}

// ??? for now
@Opaque public static class ViewLODListManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewLODListManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewLODListManager(Pointer p) { super(p); }
}

/////////////////////////////////////////////////////////////////////////////
//
// Lego3DManager

// VTABLE: LEGO1 0x100dbfa4
// SIZE 0x10
@NoOffset public static class Lego3DManager extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Lego3DManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Lego3DManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Lego3DManager position(long position) {
        return (Lego3DManager)super.position(position);
    }
    @Override public Lego3DManager getPointer(long i) {
        return new Lego3DManager((Pointer)this).offsetAddress(i);
    }

	// SIZE 0x28
	public static class CreateStruct extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public CreateStruct() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public CreateStruct(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public CreateStruct(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public CreateStruct position(long position) {
	        return (CreateStruct)super.position(position);
	    }
	    @Override public CreateStruct getPointer(long i) {
	        return new CreateStruct((Pointer)this).offsetAddress(i);
	    }
	
		public native @Const GUID m_pDriverGUID(); public native CreateStruct m_pDriverGUID(GUID setter);          // 0x00
		public native HWND m_hWnd(); public native CreateStruct m_hWnd(HWND setter);                        // 0x04
		public native IDirectDraw m_pDirectDraw(); public native CreateStruct m_pDirectDraw(IDirectDraw setter);         // 0x08
		public native IDirectDrawSurface m_pFrontBuffer(); public native CreateStruct m_pFrontBuffer(IDirectDrawSurface setter); // 0x0c
		public native IDirectDrawSurface m_pBackBuffer(); public native CreateStruct m_pBackBuffer(IDirectDrawSurface setter);  // 0x10
		public native IDirectDrawPalette m_pPalette(); public native CreateStruct m_pPalette(IDirectDrawPalette setter);     // 0x14
		public native @Cast("BOOL") boolean m_isFullScreen(); public native CreateStruct m_isFullScreen(boolean setter);                // 0x18
		public native @Cast("BOOL") boolean m_isWideViewAngle(); public native CreateStruct m_isWideViewAngle(boolean setter);             // 0x1c
		public native IDirect3D2 m_direct3d(); public native CreateStruct m_direct3d(IDirect3D2 setter);             // 0x20
		public native IDirect3DDevice2 m_d3dDevice(); public native CreateStruct m_d3dDevice(IDirect3DDevice2 setter);      // 0x24
	}
	public Lego3DManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean Create(@ByRef CreateStruct arg0);
	public native void Destroy();

	public native @Cast("BOOL") boolean Add(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean Remove(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean Moved(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean SetPointOfView(@ByRef ViewROI arg0);

	public native double Render(double p_und);

	public native int SetFrustrum(float p_fov, float p_front, float p_bback);

	public native Renderer GetRenderer();
	public native Group GetScene();
	public native Lego3DView GetLego3DView();
	// ??? for now
	public native ViewLODListManager GetViewLODListManager();
}

/////////////////////////////////////////////////////////////////////////////
//
// Lego3DManager implementaion

// FUNCTION: BETA10 0x10079bd0


// FUNCTION: BETA10 0x10037430


// FUNCTION: BETA10 0x100d8990


// FUNCTION: BETA10 0x1004af70






// FUNCTION: BETA10 0x10011840




// #endif /* _Lego3DManager_h */


// Parsed from lego3dview.h

// #ifndef _Lego3DView_h
// #define _Lego3DView_h

// #include "decomp.h"
// #include "legoview1.h"

@Opaque public static class ViewManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewManager(Pointer p) { super(p); }
}

/////////////////////////////////////////////////////////////////////////////
// Lego3DView

// VTABLE: LEGO1 0x100dbf78
// SIZE 0xa8
@NoOffset public static class Lego3DView extends LegoView1 {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Lego3DView(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Lego3DView(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Lego3DView position(long position) {
        return (Lego3DView)super.position(position);
    }
    @Override public Lego3DView getPointer(long i) {
        return new Lego3DView((Pointer)this).offsetAddress(i);
    }

	public Lego3DView() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean Create(@Const @ByRef CreateStruct arg0, Renderer arg1);
	public native void Destroy(); // vtable+0x08

	public native @Cast("BOOL") boolean Add(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean Remove(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean Moved(@ByRef ViewROI arg0);
	public native @Cast("BOOL") boolean SetPointOfView(@ByRef ViewROI arg0);

	public native double Render(double p_und);

	public native ViewROI Pick(int x, int y);

	public native ViewROI GetPointOfView();
	public native ViewManager GetViewManager();
}

// SYNTHETIC: LEGO1 0x100aaf10
// Lego3DView::`scalar deleting destructor'

/////////////////////////////////////////////////////////////////////////////
//
// Lego3DView implementation

// FUNCTION: BETA10 0x10011810




// #endif /* _Lego3DView_h */


// Parsed from legoview1.h

// #ifndef _LegoView1_h
// #define _LegoView1_h

// #include "compat.h"
// #include "decomp.h"
// #include "tglsurface.h"
 // namespace Tgl

/////////////////////////////////////////////////////////////////////////////
// LegoView

// VTABLE: LEGO1 0x100dc000
// VTABLE: BETA10 0x101c3578
// SIZE 0x78
@NoOffset public static class LegoView extends TglSurface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoView(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoView(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoView position(long position) {
        return (LegoView)super.position(position);
    }
    @Override public LegoView getPointer(long i) {
        return new LegoView((Pointer)this).offsetAddress(i);
    }

	public LegoView() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean Create(@Const @ByRef CreateStruct arg0, Renderer arg1);
	public native void Destroy(); // vtable+0x08

	public native Group GetScene();
	public native Camera GetCamera();
}

/////////////////////////////////////////////////////////////////////////////
// LegoView implementation





// SYNTHETIC: LEGO1 0x100ab580
// SYNTHETIC: BETA10 0x1017cb80
// LegoView::`scalar deleting destructor'

/////////////////////////////////////////////////////////////////////////////
// LegoView1

// VTABLE: LEGO1 0x100dc018
// VTABLE: BETA10 0x101c3590
// SIZE 0x88
@NoOffset public static class LegoView1 extends LegoView {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoView1(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoView1(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoView1 position(long position) {
        return (LegoView1)super.position(position);
    }
    @Override public LegoView1 getPointer(long i) {
        return new LegoView1((Pointer)this).offsetAddress(i);
    }

	public LegoView1() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean AddLightsToViewport();
	public native @Cast("BOOL") boolean Create(@Const @ByRef CreateStruct arg0, Renderer arg1);
	public native void Destroy(); // vtable+0x08

	
	public native void SetLightColor(@Cast("BOOL") boolean bDirectionalLight, float red, float green, float blue);
}

// SYNTHETIC: LEGO1 0x100ab7a0
// SYNTHETIC: BETA10 0x1017cc00
// LegoView1::`scalar deleting destructor'

// #endif /* _LegoView1_h */


// Parsed from legoeventnotificationparam.h

// #ifndef LEGOEVENTNOTIFICATIONPARAM_H
// #define LEGOEVENTNOTIFICATIONPARAM_H

// #include "mxnotificationparam.h"
// #include "mxtypes.h"

// #include <SDL3/SDL_keycode.h>
// #include <stdlib.h>

@Opaque public static class LegoROI extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoROI() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoROI(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d6aa0
// SIZE 0x20
@NoOffset public static class LegoEventNotificationParam extends MxNotificationParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoEventNotificationParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoEventNotificationParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoEventNotificationParam position(long position) {
        return (LegoEventNotificationParam)super.position(position);
    }
    @Override public LegoEventNotificationParam getPointer(long i) {
        return new LegoEventNotificationParam((Pointer)this).offsetAddress(i);
    }

	/** enum LegoEventNotificationParam:: */
	public static final int
		c_lButtonState = 1,
		c_rButtonState = 2,
		c_modKey1 = 4,
		c_modKey2 = 8,
		c_motionHandled = 16;

	// FUNCTION: LEGO1 0x10028690
	public native MxNotificationParam Clone(); // vtable+0x04

	public LegoEventNotificationParam() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoEventNotificationParam(
			NotificationId p_type,
			MxCore p_sender,
			@Cast("MxU8") short p_modifier,
			@Cast("MxS32") int p_x,
			@Cast("MxS32") int p_y,
			int p_key
		) { super((Pointer)null); allocate(p_type, p_sender, p_modifier, p_x, p_y, p_key); }
	private native void allocate(
			NotificationId p_type,
			MxCore p_sender,
			@Cast("MxU8") short p_modifier,
			@Cast("MxS32") int p_x,
			@Cast("MxS32") int p_y,
			int p_key
		);

	public native LegoROI GetROI();
	public native @Cast("MxU8") short GetModifier();
	public native int GetKey();

	// FUNCTION: LEGO1 0x10012190
	// FUNCTION: BETA10 0x10024210
	public native @Cast("MxS32") int GetX();

	// FUNCTION: LEGO1 0x100121a0
	// FUNCTION: BETA10 0x10024240
	public native @Cast("MxS32") int GetY();

	public native void SetROI(LegoROI p_roi);

	// FUNCTION: BETA10 0x1007d620
	public native void SetModifier(@Cast("MxU8") short p_modifier);

	// FUNCTION: BETA10 0x1007d6b0
	public native void SetKey(int p_key);

	// FUNCTION: BETA10 0x1007d650
	public native void SetX(@Cast("MxS32") int p_x);

	// FUNCTION: BETA10 0x1007d680
	public native void SetY(@Cast("MxS32") int p_y);
}

// SYNTHETIC: LEGO1 0x10028770
// LegoEventNotificationParam::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100287e0
// LegoEventNotificationParam::~LegoEventNotificationParam

// #endif // LEGOEVENTNOTIFICATIONPARAM_H


// Parsed from legogamestate.h

// #ifndef LEGOGAMESTATE_H
// #define LEGOGAMESTATE_H

// #include "actionsfwd.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxtypes.h"
// #include "mxvariable.h"

// #include <string.h>

@Opaque public static class LegoFile extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoFile() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFile(Pointer p) { super(p); }
}
@Opaque public static class LegoState extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoState() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoState(Pointer p) { super(p); }
}
@Opaque public static class LegoStorage extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoStorage() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoStorage(Pointer p) { super(p); }
}
@Opaque public static class MxVariableTable extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVariableTable() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariableTable(Pointer p) { super(p); }
}

public static native @Cast("const char*") BytePointer g_actorNames(int i); public static native void g_actorNames(int i, BytePointer setter);
@MemberGetter public static native @Cast("const char**") PointerPointer g_actorNames();

// SIZE 0x08
public static class ColorStringStruct extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ColorStringStruct() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ColorStringStruct(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ColorStringStruct(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ColorStringStruct position(long position) {
        return (ColorStringStruct)super.position(position);
    }
    @Override public ColorStringStruct getPointer(long i) {
        return new ColorStringStruct((Pointer)this).offsetAddress(i);
    }

	public native @Cast("const char*") BytePointer m_targetName(); public native ColorStringStruct m_targetName(BytePointer setter); // 0x00
	public native @Cast("const char*") BytePointer m_colorName(); public native ColorStringStruct m_colorName(BytePointer setter);  // 0x04
}

public static class InternationalCharacter extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public InternationalCharacter() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InternationalCharacter(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InternationalCharacter(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public InternationalCharacter position(long position) {
        return (InternationalCharacter)super.position(position);
    }
    @Override public InternationalCharacter getPointer(long i) {
        return new InternationalCharacter((Pointer)this).offsetAddress(i);
    }

	public native @Cast("unsigned char") byte m_character(); public native InternationalCharacter m_character(byte setter);
	public native @Cast("const char*") BytePointer m_bitmap(); public native InternationalCharacter m_bitmap(BytePointer setter);
	public native @Cast("MxU32") long m_buttonId(); public native InternationalCharacter m_buttonId(long setter);
}

// VTABLE: LEGO1 0x100d74a8
// VTABLE: BETA10 0x101bc4f0
// SIZE 0x30
@NoOffset public static class LegoBackgroundColor extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBackgroundColor(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoBackgroundColor(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoBackgroundColor position(long position) {
        return (LegoBackgroundColor)super.position(position);
    }
    @Override public LegoBackgroundColor getPointer(long i) {
        return new LegoBackgroundColor((Pointer)this).offsetAddress(i);
    }

	public LegoBackgroundColor() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoBackgroundColor(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoBackgroundColor(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_colorString);
	public native void SetValue(String p_colorString); // vtable+0x04

	public native void SetLightColor(float p_r, float p_g, float p_b);
	public native void SetLightColor();
	public native void ToggleDayNight(@Cast("MxBool") boolean p_sun);
	public native void ToggleSkyColor();
}

// VTABLE: LEGO1 0x100d74b8
// VTABLE: BETA10 0x101bc500
// SIZE 0x24
public static class LegoFullScreenMovie extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFullScreenMovie(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoFullScreenMovie(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoFullScreenMovie position(long position) {
        return (LegoFullScreenMovie)super.position(position);
    }
    @Override public LegoFullScreenMovie getPointer(long i) {
        return new LegoFullScreenMovie((Pointer)this).offsetAddress(i);
    }

	public LegoFullScreenMovie() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoFullScreenMovie(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoFullScreenMovie(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_option);
	public native void SetValue(String p_option); // vtable+0x04
}

// SIZE 0x430
@NoOffset public static class LegoGameState extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoGameState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoGameState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoGameState position(long position) {
        return (LegoGameState)super.position(position);
    }
    @Override public LegoGameState getPointer(long i) {
        return new LegoGameState((Pointer)this).offsetAddress(i);
    }

	/** enum LegoGameState::Act */
	public static final int
		e_actNotFound = -1,
		e_act1 = 0,
		e_act2 = 1,
		e_act3 = 2;

	/** enum LegoGameState::Area */
	public static final int
		e_undefined = 0,
		e_previousArea = 0,
		e_isle = 1,
		e_infomain = 2,
		e_infodoor = 3,
		e_infocenterExited = 4,
		e_elevbott = 5,
		e_elevride = 6,
		e_elevride2 = 7,
		e_elevopen = 8,
		e_seaview = 9,
		e_observe = 10,
		e_elevdown = 11,
		e_regbook = 12,
		e_infoscor = 13,
		e_jetrace = 14,
		e_jetrace2 = 15,
		e_jetraceExterior = 16,
		e_jetskibuildExited = 17,
		e_carrace = 18,
		e_carraceExterior = 19,
		e_racecarbuildExited = 20,
		e_unk21 = 21,
		e_pizzeriaExterior = 22,
		e_unk23 = 23,
		e_unk24 = 24,
		e_garageExterior = 25,
		e_garage = 26,
		e_garadoor = 27,
		e_garageExited = 28,
		e_hospitalExterior = 29,
		e_hospital = 30,
		e_hospitalExited = 31,
		e_policeExterior = 32,
		e_policeExited = 33,
		e_police = 34,
		e_polidoor = 35,
		e_copterbuild = 36,
		e_dunecarbuild = 37,
		e_jetskibuild = 38,
		e_racecarbuild = 39,
		e_helicopterSpawn = 40,
		e_unk41 = 41,
		e_unk42 = 42,
		e_dunebuggySpawn = 43,
		e_racecarSpawn = 44,
		e_jetskiSpawn = 45,
		e_act2main = 46,
		e_act3script = 47,
		e_unk48 = 48,
		e_unk49 = 49,
		e_unk50 = 50,
		e_unk51 = 51,
		e_towTrackHookedUp = 52,
		e_jukeboxw = 53,
		e_jukeboxExterior = 54,
		e_unk55 = 55,
		e_histbook = 56,
		e_bike = 57,
		e_dunecar = 58,
		e_motocycle = 59,
		e_copter = 60,
		e_skateboard = 61,
		e_ambulance = 62,
		e_towtrack = 63,
		e_jetski = 64,

		e_vehicleExited = 66;

	// SIZE 0x0e
	public static class Username extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Username(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Username(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public Username position(long position) {
	        return (Username)super.position(position);
	    }
	    @Override public Username getPointer(long i) {
	        return new Username((Pointer)this).offsetAddress(i);
	    }
	
		public Username() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void Set(@ByRef Username p_other);

		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		public native @ByRef @Name("operator =") Username put(@Const @ByRef Username p_other);

		 // 0x00
	}

	// SIZE 0x2c
	public static class ScoreItem extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public ScoreItem() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public ScoreItem(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public ScoreItem(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public ScoreItem position(long position) {
	        return (ScoreItem)super.position(position);
	    }
	    @Override public ScoreItem getPointer(long i) {
	        return new ScoreItem((Pointer)this).offsetAddress(i);
	    }
	
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);

		public native @Cast("MxS16") short m_totalScore(); public native ScoreItem m_totalScore(short setter);  // 0x00
		 // 0x02
		     // 0x1c
		public native @Cast("MxS16") short m_playerId(); public native ScoreItem m_playerId(short setter);    // 0x2a

		public native @ByRef @Name("operator =") ScoreItem put(@Const @ByRef ScoreItem p_other);
	}

	// SIZE 0x372
	@NoOffset public static class History extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public History(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public History(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public History position(long position) {
	        return (History)super.position(position);
	    }
	    @Override public History getPointer(long i) {
	        return new History((Pointer)this).offsetAddress(i);
	    }
	
		public History() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void WriteScoreHistory();
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		

		// FUNCTION: BETA10 0x1002c2b0
		public native @Cast("MxS16") short GetCount();

		// TODO: Not yet correct
		// FUNCTION: BETA10 0x1002c540
		public native ScoreItem GetScore(@Cast("MxS32") int p_index);

		public native @Cast("MxS16") short m_count(); public native History m_count(short setter); // 0x00
// #ifdef BETA10
		 // 0x02
// #endif
		 // 0x02 (0x22 for BETA10)
		public native @Cast("MxS16") short m_nextPlayerId(); public native History m_nextPlayerId(short setter);   // 0x372 (0x392 for BETA10)
	}

	public LegoGameState() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void SetActor(@Cast("MxU8") short p_actorId);
	public native void RemoveActor();
	public native void ResetROI();

	public native @Cast("MxResult") int Save(@Cast("MxULong") long arg0);
	public native @Cast("MxResult") int DeleteState();
	public native @Cast("MxResult") int Load(@Cast("MxULong") long arg0);

	public native void SerializePlayersInfo(@Cast("MxS16") short p_flags);
	public native @Cast("MxResult") int AddPlayer(@ByRef Username p_player);
	public native void SwitchPlayer(@Cast("MxS16") short p_playerId);
	public native @Cast("MxS16") short FindPlayer(@ByRef Username p_player);

	public native void SerializeScoreHistory(@Cast("MxS16") short p_flags);
	public native void SetSavePath(@Cast("char*") BytePointer arg0);
	public native void SetSavePath(@Cast("char*") ByteBuffer arg0);
	public native void SetSavePath(@Cast("char*") byte[] arg0);

	public native LegoState GetState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState GetState(String p_stateName);
	public native LegoState CreateState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState CreateState(String p_stateName);

	public native void GetFileSavePath(MxString p_outPath, @Cast("MxS16") short p_slotn);
	public native void StopArea(@Cast("LegoGameState::Area") int p_area);
	public native void SwitchArea(@Cast("LegoGameState::Area") int p_area);
	public native void Init();

	// FUNCTION: BETA10 0x10083ff5
	public native @Cast("MxU8") short GetActorId();

	// FUNCTION: BETA10 0x1004a2d0
	public native @Cast("const char*") BytePointer GetActorName();

	// FUNCTION: BETA10 0x1002b4c0
	public native @Cast("LegoGameState::Act") int GetCurrentAct();

	public native @Cast("LegoGameState::Act") int GetLoadedAct();

	public native void SetActorId(@Cast("MxU8") short p_actorId);
	public native LegoBackgroundColor GetBackgroundColor();

	public native void SetCurrentAct(@Cast("LegoGameState::Act") int p_currentAct);
	public native void FindLoadedAct();
	public native void RegisterState(LegoState p_state);

	public native @Cast("const char*") BytePointer GetSavePath();
	public native @Cast("MxS16") short m_currentPlayerId(); public native LegoGameState m_currentPlayerId(short setter);              // 0x24
	public native @Cast("MxS16") short m_playerCount(); public native LegoGameState m_playerCount(short setter);                  // 0x26
	public native @ByRef Username m_players(int i); public native LegoGameState m_players(int i, Username setter);
	@MemberGetter public native Username m_players();                // 0x28
	public native @ByRef History m_history(); public native LegoGameState m_history(History setter);                    // 0xa6
	 // 0x41c
	public native @Cast("MxBool") boolean m_isDirty(); public native LegoGameState m_isDirty(boolean setter);                     // 0x420
	public native @Cast("LegoGameState::Area") int m_currentArea(); public native LegoGameState m_currentArea(int setter);                   // 0x424
	public native @Cast("LegoGameState::Area") int m_previousArea(); public native LegoGameState m_previousArea(int setter);                  // 0x428
	public native @Cast("LegoGameState::Area") int m_unk0x42c(); public native LegoGameState m_unk0x42c(int setter);                      // 0x42c

	@MemberGetter public static native @Const @ByRef InternationalCharacter g_intCharacters(int i);
	@MemberGetter public static native @Const InternationalCharacter g_intCharacters();
}

public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);

// SYNTHETIC: LEGO1 0x1003c860
// LegoGameState::ScoreItem::ScoreItem

// #endif // LEGOGAMESTATE_H


// Parsed from legoinputmanager.h

// #ifndef LEGOINPUTMANAGER_H
// #define LEGOINPUTMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "legoeventnotificationparam.h"
// #include "mxlist.h"
// #include "mxpresenter.h"
// #include "mxqueue.h"

// #include <SDL3/SDL_haptic.h>
// #include <SDL3/SDL_joystick.h>
// #include <SDL3/SDL_keyboard.h>
// #include <SDL3/SDL_keycode.h>
// #include <SDL3/SDL_timer.h>
// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif

// #include <map>
// #include <variant>

@Opaque public static class LegoCameraController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoCameraController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoCameraController(Pointer p) { super(p); }
}
@Opaque public static class LegoControlManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoControlManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoControlManager(Pointer p) { super(p); }
}
@Opaque public static class LegoWorld extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorld() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorld(Pointer p) { super(p); }
}

public static native @Cast("MxS32") int g_clickedObjectId(); public static native void g_clickedObjectId(int setter);
public static native @Cast("const char*") BytePointer g_clickedAtom(); public static native void g_clickedAtom(BytePointer setter);

// VTABLE: LEGO1 0x100d87b8
// class MxCollection<LegoEventNotificationParam>

// VTABLE: LEGO1 0x100d87d0
// class MxList<LegoEventNotificationParam>

// VTABLE: LEGO1 0x100d87e8
// class MxQueue<LegoEventNotificationParam>

// VTABLE: LEGO1 0x100d8800
// SIZE 0x18

// VTABLE: LEGO1 0x100d6a20
// class MxCollection<MxCore*>

// VTABLE: LEGO1 0x100d6a38
// class MxList<MxCore*>

// VTABLE: LEGO1 0x100d6a50
// class MxPtrList<MxCore>

// VTABLE: LEGO1 0x100d6a68
// SIZE 0x18

// VTABLE: LEGO1 0x100d6ac0
// class MxListCursor<MxCore *>

// VTABLE: LEGO1 0x100d6ad8
// class MxPtrListCursor<MxCore>

// VTABLE: LEGO1 0x100d6aa8
// SIZE 0x10

// VTABLE: LEGO1 0x100d8760
// SIZE 0x338
@NoOffset public static class LegoInputManager extends MxPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoInputManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoInputManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoInputManager position(long position) {
        return (LegoInputManager)super.position(position);
    }
    @Override public LegoInputManager getPointer(long i) {
        return new LegoInputManager((Pointer)this).offsetAddress(i);
    }

	public enum Keys {
		c_left(0x01),
		c_right(0x02),
		c_up(0x04),
		c_down(0x08),
		c_ctrl(0x10),

		c_leftOrRight(c_left.value | c_right.value),
		c_upOrDown(c_up.value | c_down.value);

	    public final int value;
	    private Keys(int v) { this.value = v; }
	    private Keys(Keys e) { this.value = e.value; }
	    public Keys intern() { for (Keys e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public enum TouchScheme {
		e_none(-1),
		e_mouse(0),
		e_arrowKeys(1),
		e_gamepad(2);

	    public final int value;
	    private TouchScheme(int v) { this.value = v; }
	    private TouchScheme(TouchScheme e) { this.value = e.value; }
	    public TouchScheme intern() { for (TouchScheme e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public LegoInputManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void QueueEvent(NotificationId p_id, @Cast("MxU8") short p_modifier, @Cast("MxLong") long p_x, @Cast("MxLong") long p_y, @ByVal int p_key);
	public native void Register(MxCore arg0);
	public native void UnRegister(MxCore arg0);

	// FUNCTION: LEGO1 0x1005b8b0
	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1005b8c0
	public native @Cast("MxResult") int PutData(); // vtable+0x4c

	public native @Cast("MxResult") int Create(HWND p_hwnd);
	public native void Destroy();
	public native @Cast("MxResult") int GetJoystick();
	public native @Cast("MxResult") int GetJoystickState(@Cast("MxU32*") long p_joystickX, @Cast("MxU32*") long p_joystickY, @Cast("MxU32*") long p_povPosition);
	public native void StartAutoDragTimer();
	public native void StopAutoDragTimer();
	public native void EnableInputProcessing();
	public native void SetCamera(LegoCameraController p_camera);
	public native void ClearCamera();
	public native void SetWorld(LegoWorld p_world);
	public native void ClearWorld();

	public native void SetUnknown88(@Cast("MxBool") boolean p_unk0x88);
	public native void SetUnknown335(@Cast("MxBool") boolean p_unk0x335);
	public native void SetUnknown336(@Cast("MxBool") boolean p_unk0x336);

	// FUNCTION: BETA10 0x1002e290
	public native void DisableInputProcessing();

	// FUNCTION: BETA10 0x10031ba0
	public native LegoControlManager GetControlManager();

	// FUNCTION: BETA10 0x10017870
	public native LegoWorld GetWorld();

	public native LegoCameraController GetCamera();

	public native void ProcessEvents();
	public native @Cast("MxBool") boolean ProcessOneEvent(@ByRef LegoEventNotificationParam p_param);
	public native @Cast("MxBool") boolean FUN_1005cdf0(@ByRef LegoEventNotificationParam p_param);
	public native void GetKeyboardState();
	
	
	public native void AddKeyboard(@ByVal int p_keyboardID);
	public native void RemoveKeyboard(@ByVal int p_keyboardID);
	public native void AddMouse(@ByVal int p_mouseID);
	public native void RemoveMouse(@ByVal int p_mouseID);
	public native void AddJoystick(@ByVal int p_joystickID);
	public native void RemoveJoystick(@ByVal int p_joystickID);
	public native @Cast("MxBool") boolean HandleTouchEvent(@Cast("SDL_Event*") Pointer p_event, @Cast("LegoInputManager::TouchScheme") int p_touchScheme);
	public native @Cast("MxBool") boolean HandleRumbleEvent(float p_strength, float p_lowFrequencyRumble, float p_highFrequencyRumble, @Cast("MxU32") long p_milliseconds);
	
}

// TEMPLATE: LEGO1 0x10028850
// MxCollection<MxCore *>::Compare

// TEMPLATE: LEGO1 0x10028860
// MxCollection<MxCore *>::~MxCollection<MxCore *>

// TEMPLATE: LEGO1 0x100288b0
// MxCollection<MxCore *>::Destroy

// TEMPLATE: LEGO1 0x100288c0
// MxList<MxCore *>::~MxList<MxCore *>

// SYNTHETIC: LEGO1 0x10028950
// LegoNotifyList::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100289c0
// MxPtrList<MxCore>::~MxPtrList<MxCore>

// SYNTHETIC: LEGO1 0x10028a10
// MxCollection<MxCore *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x10028a80
// MxList<MxCore *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x10028b30
// MxPtrList<MxCore>::`scalar deleting destructor'

// FUNCTION: LEGO1 0x10028ba0
// LegoNotifyList::~LegoNotifyList

// SYNTHETIC: LEGO1 0x10028fd0
// LegoNotifyListCursor::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x10029040
// MxPtrListCursor<MxCore>::~MxPtrListCursor<MxCore>

// SYNTHETIC: LEGO1 0x10029090
// MxListCursor<MxCore *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x10029100
// MxPtrListCursor<MxCore>::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x10029170
// MxListCursor<MxCore *>::~MxListCursor<MxCore *>

// TEMPLATE: LEGO1 0x100291c0
// LegoNotifyListCursor::~LegoNotifyListCursor

// TEMPLATE: LEGO1 0x1005bb80
// MxCollection<LegoEventNotificationParam>::Compare

// TEMPLATE: LEGO1 0x1005bbe0
// MxCollection<LegoEventNotificationParam>::~MxCollection<LegoEventNotificationParam>

// TEMPLATE: LEGO1 0x1005bc30
// MxCollection<LegoEventNotificationParam>::Destroy

// TEMPLATE: LEGO1 0x1005bc80
// MxList<LegoEventNotificationParam>::~MxList<LegoEventNotificationParam>

// SYNTHETIC: LEGO1 0x1005bd50
// MxCollection<LegoEventNotificationParam>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x1005bdc0
// MxList<LegoEventNotificationParam>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x1005beb0
// LegoEventQueue::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x1005bf20
// MxQueue<LegoEventNotificationParam>::~MxQueue<LegoEventNotificationParam>

// SYNTHETIC: LEGO1 0x1005bf70
// MxQueue<LegoEventNotificationParam>::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x1005d010
// MxListEntry<LegoEventNotificationParam>::GetValue

// #endif // LEGOINPUTMANAGER_H


// Parsed from legovideomanager.h

// #ifndef LEGOVIDEOMANAGER_H
// #define LEGOVIDEOMANAGER_H

// #include "cursor.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "legophonemelist.h"
// #include "mxvideomanager.h"

// #ifdef MINIWIN
// #else
// #include <d3drm.h>
// #include <ddraw.h>
// #endif
@Opaque public static class MxDirect3D extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDirect3D() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirect3D(Pointer p) { super(p); }
}
@Opaque public static class MxStopWatch extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStopWatch() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStopWatch(Pointer p) { super(p); }
}
@Opaque public static class ViewportAppData extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewportAppData() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewportAppData(Pointer p) { super(p); }
}


// VTABLE: LEGO1 0x100d9c88
// SIZE 0x590
@NoOffset public static class LegoVideoManager extends MxVideoManager {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoVideoManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoVideoManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoVideoManager position(long position) {
        return (LegoVideoManager)super.position(position);
    }
    @Override public LegoVideoManager getPointer(long i) {
        return new LegoVideoManager((Pointer)this).offsetAddress(i);
    }

	public LegoVideoManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native int EnableRMDevice();
	public native int DisableRMDevice();
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable);
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable, @Cast("MxBool") boolean p_scale);
	public native void MoveCursor(@Cast("MxS32") int p_cursorX, @Cast("MxS32") int p_cursorY);
	
	public native void ToggleFPS(@Cast("MxBool") boolean p_visible);

	public native @Cast("MxResult") int Tickle();                                                                       // vtable+0x08
	public native void Destroy();                                                                          // vtable+0x18
	public native @Cast("MxResult") int Create(@ByRef MxVideoParam p_videoParam, @Cast("MxU32") long p_frequencyMS, @Cast("MxBool") boolean p_createThread); // vtable+0x2c
	public native @Cast("MxResult") int RealizePalette(MxPalette arg0);                                                     // vtable+0x30
	public native void UpdateView(@Cast("MxU32") long p_x, @Cast("MxU32") long p_y, @Cast("MxU32") long p_width, @Cast("MxU32") long p_height);                    // vtable+0x34
	public native MxPresenter GetPresenterAt(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);                                        // vtable+0x38

	// FUNCTION: LEGO1 0x1007ab10
	 // vtable+0x3c

	public native void SetSkyColor(float p_red, float p_green, float p_blue);
	public native void OverrideSkyColor(@Cast("MxBool") boolean p_shouldOverride);
	public native @Cast("MxResult") int ResetPalette(@Cast("MxBool") boolean p_ignoreSkyColor);
	public native MxPresenter GetPresenterByActionObjectName(@Cast("const char*") BytePointer p_char);
	public native MxPresenter GetPresenterByActionObjectName(String p_char);

	public native void FUN_1007c520();

	public native Renderer GetRenderer();

	// FUNCTION: BETA10 0x100117e0
	public native Lego3DManager Get3DManager();

	// FUNCTION: BETA10 0x1003a380
	public native LegoROI GetViewROI();

	public native MxDirect3D GetDirect3D();
	public native @Cast("MxBool") boolean GetRender3D();
	public native double GetElapsedSeconds();

	// FUNCTION: BETA10 0x1002e290
	public native void SetRender3D(@Cast("MxBool") boolean p_render3d);

	public native void SetUnk0x554(@Cast("MxBool") boolean p_unk0x554);
}

// SYNTHETIC: LEGO1 0x1007ab20
// LegoVideoManager::`scalar deleting destructor'

// #endif // LEGOVIDEOMANAGER_H


// Parsed from mxcore.h

// #ifndef MXCORE_H
// #define MXCORE_H

// #include "compat.h"
// #include "mxtypes.h"

// #include <string.h>

@Opaque public static class MxParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxParam(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc0f8
// VTABLE: BETA10 0x101c1bc8
// SIZE 0x08
@NoOffset public static class MxCore extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCore(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxCore(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxCore position(long position) {
        return (MxCore)super.position(position);
    }
    @Override public MxCore getPointer(long i) {
        return new MxCore((Pointer)this).offsetAddress(i);
    }

	public MxCore() { super((Pointer)null); allocate(); }
	private native void allocate();                       // vtable+00
	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+04

	// FUNCTION: LEGO1 0x10001f70
	// FUNCTION: BETA10 0x1000f380
	public native @Cast("MxResult") int Tickle(); // vtable+08

	// FUNCTION: LEGO1 0x100144c0
	// FUNCTION: BETA10 0x100126d0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100140d0
	// FUNCTION: BETA10 0x10012680
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxU32") long GetId();
}

// SYNTHETIC: BETA10 0x10096940
// MxCore::operator=

// #endif // MXCORE_H


// Parsed from mxdirectdraw.h

// #ifndef MXDIRECTDRAW_H
// #define MXDIRECTDRAW_H

// #include "lego1_export.h"
// #include "mxdirectxinfo.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #include <windows.h>
// #endif

// VTABLE: LEGO1 0x100db818
// VTABLE: BETA10 0x101c1b10
// SIZE 0x880
@NoOffset public static class MxDirectDraw extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirectDraw(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDirectDraw(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDirectDraw position(long position) {
        return (MxDirectDraw)super.position(position);
    }
    @Override public MxDirectDraw getPointer(long i) {
        return new MxDirectDraw((Pointer)this).offsetAddress(i);
    }

	public static class ErrorHandler extends FunctionPointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public    ErrorHandler(Pointer p) { super(p); }
	    protected ErrorHandler() { allocate(); }
	    private native void allocate();
	    public native void call(@Cast("const char*") BytePointer arg0, @Cast("HRESULT") long arg1, Pointer arg2);
	}

	public static native int GetPrimaryBitDepth();

	public MxDirectDraw() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("BOOL") boolean Create(
			HWND hWnd,
			@Cast("BOOL") boolean fullscreen_1,
			@Cast("BOOL") boolean surface_fullscreen,
			@Cast("BOOL") boolean onlySystemMemory,
			int width,
			int height,
			int bpp,
			@Const PALETTEENTRY pPaletteEntries,
			int paletteEntryCount
		);                                      // vtable+0x04
	public native void Destroy();                 // vtable+0x08
	public native void DestroyButNotDirectDraw(); // vtable+0x0c

	public native IDirectDraw DirectDraw();

	// FUNCTION: BETA10 0x100d8ab0
	public native IDirectDrawSurface FrontBuffer();

	// FUNCTION: BETA10 0x100d8ae0
	public native IDirectDrawSurface BackBuffer();

	// FUNCTION: BETA10 0x100d8b10
	public native IDirectDrawClipper Clipper();

	// FUNCTION: BETA10 0x1011c190
	

	// FUNCTION: BETA10 0x1011c170
	public native @Cast("BOOL") boolean IsFullScreen();

	public native int Pause(@Cast("BOOL") boolean arg0);
	public native @Cast("BOOL") boolean RestoreSurfaces();

	public native @Cast("const char*") BytePointer ErrorToString(@Cast("HRESULT") long p_error); // vtable+0x10
	public native int FlipToGDISurface();
}

// #endif // MXDIRECTDRAW_H


// Parsed from mxdiskstreamcontroller.h

// #ifndef MXDISKSTREAMCONTROLLER_H
// #define MXDISKSTREAMCONTROLLER_H

// #include "decomp.h"
// #include "mxdsbuffer.h"
// #include "mxstl/stlcompat.h"
// #include "mxstreamcontroller.h"
// #include "mxtypes.h"

// #include <string.h>

@Opaque public static class MxDSStreamingAction extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSStreamingAction() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSStreamingAction(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dccb8
// VTABLE: BETA10 0x101c2818
// SIZE 0xc8
@NoOffset public static class MxDiskStreamController extends MxStreamController {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDiskStreamController(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDiskStreamController(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDiskStreamController position(long position) {
        return (MxDiskStreamController)super.position(position);
    }
    @Override public MxDiskStreamController getPointer(long i) {
        return new MxDiskStreamController((Pointer)this).offsetAddress(i);
    }

	public MxDiskStreamController() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x100c7360
	// FUNCTION: BETA10 0x10155c00
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100c7370
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int Open(@Cast("const char*") BytePointer p_filename);
	public native @Cast("MxResult") int Open(String p_filename);       // vtable+0x14
	public native @Cast("MxResult") int VTable0x18(@Cast("undefined4") long arg0, @Cast("undefined4") long arg1); // vtable+0x18
	public native @Cast("MxResult") int VTable0x20(MxDSAction p_action);   // vtable+0x20
	public native @Cast("MxResult") int VTable0x24(MxDSAction p_action);   // vtable+0x24
	public native MxDSStreamingAction VTable0x28();           // vtable+0x28
	public native @Cast("MxResult") int VTable0x30(MxDSAction p_action);   // vtable+0x30
	public native @Cast("MxResult") int VTable0x34(@Cast("undefined4") long arg0);              // vtable+0x34

	public native @Cast("MxBool") boolean GetUnk0xc4();

	public native @Cast("MxResult") int FUN_100c7890(MxDSStreamingAction p_action);
	public native void FUN_100c7cb0(MxDSStreamingAction p_action);
	public native void FUN_100c7f40(MxDSStreamingAction p_streamingaction);
	public native void FUN_100c8120(MxDSAction p_action);
	public native void InsertToList74(MxDSBuffer p_buffer);
	public native void FUN_100c8670(MxDSStreamingAction p_streamingAction);
}

// TEMPLATE: LEGO1 0x100c14d0
// list<MxDSObject *,allocator<MxDSObject *> >::erase

// TEMPLATE: LEGO1 0x100c7330
// list<MxDSObject *,allocator<MxDSObject *> >::_Buynode

// TEMPLATE: LEGO1 0x100c7420
// list<MxDSBuffer *,allocator<MxDSBuffer *> >::~list<MxDSBuffer *,allocator<MxDSBuffer *> >

// TEMPLATE: LEGO1 0x100c7490
// list<MxDSBuffer *,allocator<MxDSBuffer *> >::_Buynode

// SYNTHETIC: LEGO1 0x100c74c0
// MxDiskStreamController::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100c74e0
// List<MxDSBuffer *>::~List<MxDSBuffer *>

// TEMPLATE: LEGO1 0x100c7ef0
// list<MxNextActionDataStart *,allocator<MxNextActionDataStart *> >::insert

// TEMPLATE: BETA10 0x10150e60
// MxUtilityList<MxNextActionDataStart *>::PushBack

// TEMPLATE: BETA10 0x10150ff0
// MxUtilityList<MxDSObject *>::PushBack

// #endif // MXDISKSTREAMCONTROLLER_H


// Parsed from mxdsaction.h

// #ifndef MXDSACTION_H
// #define MXDSACTION_H

// #include "lego1_export.h"
// #include "mxdsobject.h"
// #include "mxgeometry/mxgeometry3d.h"
// #include "mxtypes.h"

// VTABLE: LEGO1 0x100dc098
// VTABLE: BETA10 0x101c1b68
// SIZE 0x94
@NoOffset public static class MxDSAction extends MxDSObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSAction(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSAction(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSAction position(long position) {
        return (MxDSAction)super.position(position);
    }
    @Override public MxDSAction getPointer(long i) {
        return new MxDSAction((Pointer)this).offsetAddress(i);
    }

	/** enum MxDSAction:: */
	public static final int
		c_looping = 0x01,
		c_bit3 = 0x04,
		c_bit4 = 0x08,
		c_bit5 = 0x10,
		c_enabled = 0x20,
		c_bit7 = 0x40,
		c_world = 0x80,
		c_bit9 = 0x100,
		c_bit10 = 0x200,
		c_bit11 = 0x400;

	public MxDSAction() { super((Pointer)null); allocate(); }
	private native void allocate();

	public MxDSAction(@ByRef MxDSAction p_dsAction) { super((Pointer)null); allocate(p_dsAction); }
	private native void allocate(@ByRef MxDSAction p_dsAction);
	public native void CopyFrom(@ByRef MxDSAction p_dsAction);
	public native @ByRef @Name("operator =") MxDSAction put(@ByRef MxDSAction p_dsAction);

	// FUNCTION: LEGO1 0x100ad980
	// FUNCTION: BETA10 0x1012bcf0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100ad990
	// FUNCTION: BETA10 0x1012bd10
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("undefined4") long VTable0x14();                            // vtable+0x14
	public native @Cast("MxU32") long GetSizeOnDisk();                              // vtable+0x18
	public native void Deserialize(@Cast("MxU8*&") short p_source, @Cast("MxS16") short p_unk0x24); // vtable+0x1c
	public native @Cast("MxLong") long GetDuration();                                // vtable+0x24
	public native void SetDuration(@Cast("MxLong") long p_duration);                 // vtable+0x28
	public native MxDSAction Clone();                                 // vtable+0x2c
	public native void MergeFrom(@ByRef MxDSAction p_dsAction);              // vtable+0x30
	public native @Cast("MxBool") boolean HasId(@Cast("MxU32") long p_objectId);                      // vtable+0x34
	public native void SetTimeStarted(@Cast("MxLong") long p_timeStarted);           // vtable+0x38
	public native @Cast("MxLong") long GetTimeStarted();                             // vtable+0x3c
	public native @Cast("MxLong") long GetElapsedTime();                             // vtable+0x40

	public native void AppendExtra(@Cast("MxU16") int p_extraLength, @Cast("const char*") BytePointer p_extraData);
	public native void AppendExtra(@Cast("MxU16") int p_extraLength, String p_extraData);

	// FUNCTION: BETA10 0x1003a560
	

	// FUNCTION: BETA10 0x1003cf70
	public native @Cast("MxU32") long GetFlags();

	// FUNCTION: BETA10 0x1004daa0
	public native void SetFlags(@Cast("MxU32") long p_flags);

	public native @Cast("char*") BytePointer GetExtraData();
	public native @Cast("MxU16") int GetExtraLength();

	// FUNCTION: BETA10 0x1005a560
	public native @Cast("MxLong") long GetStartTime();

	// FUNCTION: BETA10 0x1012be80
	public native @Cast("MxS32") int GetLoopCount();

	// FUNCTION: BETA10 0x100f27f0
	public native void SetLoopCount(@Cast("MxS32") int p_loopCount);

	// FUNCTION: BETA10 0x1003db50
	public native @Const @ByRef Vector3 GetLocation();

	// FUNCTION: BETA10 0x1003db80
	public native @Const @ByRef Vector3 GetDirection();

	// FUNCTION: BETA10 0x1003dbb0
	public native @Const @ByRef Vector3 GetUp();

	// FUNCTION: BETA10 0x100153b0
	public native void SetLocation(@Const @ByRef Vector3 p_location);

	// FUNCTION: BETA10 0x100153f0
	public native void SetDirection(@Const @ByRef Vector3 p_direction);

	// FUNCTION: BETA10 0x10015430
	public native void SetUp(@Const @ByRef Vector3 p_up);

	public native MxCore GetNotificationObject();
	public native void SetNotificationObject(MxCore p_notificationObject);
	public native MxCore GetOrigin();
	public native void SetOrigin(MxCore p_origin);

	public native @Cast("MxBool") boolean IsLooping();
	public native @Cast("MxBool") boolean IsBit3();
}

// #endif // MXDSACTION_H


// Parsed from mxdsbuffer.h

// #ifndef MXDSBUFFER_H
// #define MXDSBUFFER_H

// #include "decomp.h"
// #include "mxcore.h"
@Opaque public static class MxStreamChunk extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamChunk() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamChunk(Pointer p) { super(p); }
}
@Opaque public static class MxDSChunk extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSChunk() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSChunk(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dcca0
// VTABLE: BETA10 0x101c2898
// SIZE 0x34
@NoOffset public static class MxDSBuffer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSBuffer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSBuffer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSBuffer position(long position) {
        return (MxDSBuffer)super.position(position);
    }
    @Override public MxDSBuffer getPointer(long i) {
        return new MxDSBuffer((Pointer)this).offsetAddress(i);
    }

	/** enum MxDSBuffer::Type */
	public static final int
		e_chunk = 0,
		e_allocate = 1,
		e_preallocated = 2,
		e_unknown = 3;

	public MxDSBuffer() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x100c6500
	// FUNCTION: BETA10 0x10158510
	public native @Cast("const char*") BytePointer ClassName();

	public native @Cast("MxResult") int AllocateBuffer(@Cast("MxU32") long p_bufferSize, @Cast("MxDSBuffer::Type") int p_mode);
	public native @Cast("MxResult") int SetBufferPointer(@Cast("MxU8*") short p_buffer, @Cast("MxU32") long p_size);
	public native @Cast("MxResult") int FUN_100c67b0(
			MxStreamController p_controller,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction
		);
	public native @Cast("MxResult") int FUN_100c67b0(
			MxStreamController p_controller,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction
		);
	public native @Cast("MxResult") int CreateObject(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction
		);
	public native @Cast("MxResult") int CreateObject(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction
		);
	public native @Cast("MxResult") int StartPresenterFromAction(MxStreamController p_controller, MxDSAction p_action1, MxDSAction p_action2);
	public native @Cast("MxResult") int ParseChunk(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction,
			MxStreamChunk p_header
		);
	public native @Cast("MxResult") int ParseChunk(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction,
			MxStreamChunk p_header
		);
	
	public native @Cast("MxU8") short ReleaseRef(MxDSChunk arg0);
	public native void AddRef(MxDSChunk p_chunk);
	public native @Cast("MxResult") int CalcBytesRemaining(@Cast("MxU8*") short p_data);
	public native void FUN_100c6f80(@Cast("MxU32") long p_writeOffset);
	
	public native @Cast("MxResult") int FUN_100c7090(MxDSBuffer p_buf);

	public static native MxCore ReadChunk(MxDSBuffer p_buffer, @Cast("MxU32*") long p_chunkData, @Cast("MxU16") int p_flags);
	

	// FUNCTION: BETA10 0x10148c60
	

	// FUNCTION: BETA10 0x10164240
	public native @Cast("undefined4") long GetUnknown14();

	// FUNCTION: BETA10 0x10156420
	public native @Cast("MxBool") boolean HasRef();

	public native @Cast("MxU16") int GetRefCount();
	public native @Cast("MxDSBuffer::Type") int GetMode();

	// FUNCTION: BETA10 0x10148c40
	public native @Cast("MxU32") long GetWriteOffset();

	// FUNCTION: BETA10 0x101590d0
	public native @Cast("MxU32") long GetBytesRemaining();

	public native void SetUnknown14(@Cast("undefined4") long p_unk0x14);
	public native void SetUnknown1c(@Cast("undefined4") long p_unk0x1c);

	// FUNCTION: BETA10 0x10164260
	public native void SetMode(@Cast("MxDSBuffer::Type") int p_mode);

	public native void SetUnk30(MxDSStreamingAction p_unk0x30);
}

// #endif // MXDSBUFFER_H


// Parsed from mxdsobject.h

// #ifndef MXDSOBJECT_H
// #define MXDSOBJECT_H

// #include "decomp.h"
// #include "mxatom.h"
// #include "mxcore.h"
// #include "mxutilitylist.h"

@Opaque public static class MxDSFile extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSFile() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSFile(Pointer p) { super(p); }
}

// SIZE 0x0c

// VTABLE: LEGO1 0x100dc868
// VTABLE: BETA10 0x101c23f0
// SIZE 0x2c
@NoOffset public static class MxDSObject extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSObject(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSObject(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSObject position(long position) {
        return (MxDSObject)super.position(position);
    }
    @Override public MxDSObject getPointer(long i) {
        return new MxDSObject((Pointer)this).offsetAddress(i);
    }

	public enum Type {
		e_object(0),
		e_action(1),
		e_mediaAction(2),
		e_anim(3),
		e_sound(4),
		e_multiAction(5),
		e_serialAction(6),
		e_parallelAction(7),
		e_event(8),
		e_selectAction(9),
		e_still(10),
		e_objectAction(11);

	    public final int value;
	    private Type(int v) { this.value = v; }
	    private Type(Type e) { this.value = e.value; }
	    public Type intern() { for (Type e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public MxDSObject() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void CopyFrom(@ByRef MxDSObject p_dsObject);
	public MxDSObject(@ByRef MxDSObject p_dsObject) { super((Pointer)null); allocate(p_dsObject); }
	private native void allocate(@ByRef MxDSObject p_dsObject);
	public native @ByRef @Name("operator =") MxDSObject put(@ByRef MxDSObject p_dsObject);

	public native void SetObjectName(@Cast("const char*") BytePointer p_objectName);
	public native void SetObjectName(String p_objectName);
	public native void SetSourceName(@Cast("const char*") BytePointer p_sourceName);
	public native void SetSourceName(String p_sourceName);

	// FUNCTION: LEGO1 0x100bf730
	// FUNCTION: BETA10 0x1012bdd0
	public native @Cast("const char*") BytePointer ClassName(); // vtable+0x0c

	// FUNCTION: LEGO1 0x100bf740
	// FUNCTION: BETA10 0x1012bd70
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name); // vtable+0x10

	public native @Cast("undefined4") long VTable0x14();                            // vtable+0x14
	public native @Cast("MxU32") long GetSizeOnDisk();                              // vtable+0x18
	public native void Deserialize(@Cast("MxU8*&") short p_source, @Cast("MxS16") short p_unk0x24); // vtable+0x1c

	// FUNCTION: ISLE 0x401c40
	// FUNCTION: LEGO1 0x10005530
	// FUNCTION: BETA10 0x100152e0
	public native void SetAtomId(@ByVal MxAtomId p_atomId); // vtable+0x20

	// FUNCTION: BETA10 0x1012ef90
	public native Type GetType();

	// FUNCTION: BETA10 0x1012efb0
	public native @Cast("const char*") BytePointer GetSourceName();

	// FUNCTION: BETA10 0x10028460
	public native @Cast("const char*") BytePointer GetObjectName();

	// FUNCTION: BETA10 0x10017910
	public native @Cast("MxU32") long GetObjectId();

	// FUNCTION: BETA10 0x10017940
	public native @Const @ByRef MxAtomId GetAtomId();

	public native @Cast("MxS16") short GetUnknown24();
	public native MxPresenter GetUnknown28();

	public native void SetType(Type p_type);

	// FUNCTION: BETA10 0x100152b0
	public native void SetObjectId(@Cast("MxU32") long p_objectId);

	// FUNCTION: BETA10 0x10039570
	public native void SetUnknown24(@Cast("MxS16") short p_unk0x24);

	public native void SetUnknown28(MxPresenter p_unk0x28);

	public native void ClearAtom();
}

public static native MxDSObject DeserializeDSObjectDispatch(@Cast("MxU8*&") short arg0, @Cast("MxS16") short arg1);
public static native MxDSObject CreateStreamObject(MxDSFile arg0, @Cast("MxS16") short arg1);

// TEMPLATE: BETA10 0x10150950
// MxUtilityList<MxDSObject *>::PopFront

// #endif // MXDSOBJECT_H


// Parsed from mxdssubscriber.h

// #ifndef MXDSSUBSCRIBER_H
// #define MXDSSUBSCRIBER_H

// #include "decomp.h"
// #include "mxcore.h"
// #include "mxstreamchunklist.h"
// #include "mxutilitylist.h"

// SIZE 0x0c

// VTABLE: LEGO1 0x100dc698
// VTABLE: BETA10 0x101c1d38
// SIZE 0x4c
@NoOffset public static class MxDSSubscriber extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSSubscriber(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSSubscriber(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSSubscriber position(long position) {
        return (MxDSSubscriber)super.position(position);
    }
    @Override public MxDSSubscriber getPointer(long i) {
        return new MxDSSubscriber((Pointer)this).offsetAddress(i);
    }

	public MxDSSubscriber() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x100b7d50
	// FUNCTION: BETA10 0x10135180
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100b7d60
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int Create(MxStreamController p_controller, @Cast("MxU32") long p_objectId, @Cast("MxS16") short p_unk0x48);
	public native void DestroyData();
	public native @Cast("MxResult") int AddData(MxStreamChunk p_chunk, @Cast("MxBool") boolean p_append);
	public native MxStreamChunk PopData();
	public native MxStreamChunk PeekData();
	public native void FreeDataChunk(MxStreamChunk p_chunk);

	// FUNCTION: BETA10 0x101354f0
	public native @Cast("MxU32") long GetObjectId();

	// FUNCTION: BETA10 0x10135510
	public native @Cast("MxS16") short GetUnknown48();
}

// SYNTHETIC: LEGO1 0x100b7de0
// MxDSSubscriber::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b7d00
// MxStreamChunkList::~MxStreamChunkList

// TEMPLATE: BETA10 0x10150a70
// MxUtilityList<MxDSSubscriber *>::PopFront

// #endif // MXDSSUBSCRIBER_H


// Parsed from mxticklemanager.h

// #ifndef MXTICKLEMANAGER_H
// #define MXTICKLEMANAGER_H

// #include "mxcore.h"
// #include "mxstl/stlcompat.h"
// #include "mxtypes.h"

// SIZE 0x10
@NoOffset public static class MxTickleClient extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleClient(Pointer p) { super(p); }

	public MxTickleClient(MxCore p_client, @Cast("MxTime") int p_interval) { super((Pointer)null); allocate(p_client, p_interval); }
	private native void allocate(MxCore p_client, @Cast("MxTime") int p_interval);

	public native MxCore GetClient();

	public native @Cast("MxTime") int GetTickleInterval();

	public native @Cast("MxTime") int GetLastUpdateTime();

	public native @Cast("MxU16") int GetFlags();

	public native void SetTickleInterval(@Cast("MxTime") int p_interval);

	public native void SetLastUpdateTime(@Cast("MxTime") int p_lastUpdateTime);

	public native void SetFlags(@Cast("MxU16") int p_flags);
}

// VTABLE: LEGO1 0x100d86d8
// VTABLE: BETA10 0x101bc9d0
// SIZE 0x14
@NoOffset public static class MxTickleManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTickleManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTickleManager position(long position) {
        return (MxTickleManager)super.position(position);
    }
    @Override public MxTickleManager getPointer(long i) {
        return new MxTickleManager((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x100937c0
	public MxTickleManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle();                                                // vtable+0x08
	public native void RegisterClient(MxCore p_client, @Cast("MxTime") int p_interval);          // vtable+0x14
	public native void UnregisterClient(MxCore p_client);                           // vtable+0x18
	public native void SetClientTickleInterval(MxCore p_client, @Cast("MxTime") int p_interval); // vtable+0x1c
	public native @Cast("MxTime") int GetClientTickleInterval(MxCore p_client);
}

public static final int TICKLE_MANAGER_NOT_FOUND = 0x80000000;

// TEMPLATE: LEGO1 0x1005a4a0
// list<MxTickleClient *,allocator<MxTickleClient *> >::~list<MxTickleClient *,allocator<MxTickleClient *> >

// TEMPLATE: BETA10 0x10093870
// List<MxTickleClient *>::List<MxTickleClient *>

// TEMPLATE: LEGO1 0x1005a530
// TEMPLATE: BETA10 0x10096340
// List<MxTickleClient *>::~List<MxTickleClient *>

// #endif // MXTICKLEMANAGER_H


// Parsed from mxtimer.h

// #ifndef MXTIMER_H
// #define MXTIMER_H

// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>

// VTABLE: LEGO1 0x100dc0e0
// VTABLE: BETA10 0x101c1bb0
// SIZE 0x10
@NoOffset public static class MxTimer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTimer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTimer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTimer position(long position) {
        return (MxTimer)super.position(position);
    }
    @Override public MxTimer getPointer(long i) {
        return new MxTimer((Pointer)this).offsetAddress(i);
    }

	public MxTimer() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void Start();
	public native void Stop();

	public native @Cast("MxLong") long GetRealTime();

	// FUNCTION: BETA10 0x1012bf50
	public native void InitLastTimeCalculated();

	// FUNCTION: BETA10 0x10017810
	public native @Cast("MxLong") long GetTime();
}

// SYNTHETIC: BETA10 0x1012bfc0
// MxTimer::~MxTimer

// #endif // MXTIMER_H


// Parsed from mxgeometry.h

// #ifndef MXGEOMETRY_H
// #define MXGEOMETRY_H

// #include "mxlist.h"
// #include "mxutilities.h"

@Name("MxPoint<MxS32>") @NoOffset public static class MxPointInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPointInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPointInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPointInteger position(long position) {
        return (MxPointInteger)super.position(position);
    }
    @Override public MxPointInteger getPointer(long i) {
        return new MxPointInteger((Pointer)this).offsetAddress(i);
    }

	public MxPointInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPointInteger(@Const @ByRef MxPointInteger p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPointInteger p_p);
	public MxPointInteger(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);
	public native @Cast("MxS32") int GetX();
	public native @Cast("MxS32") int GetY();
	public native void SetX(@Cast("MxS32") int p_x);
	public native void SetY(@Cast("MxS32") int p_y);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator +") MxPointInteger add(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator -") MxPointInteger subtract(@Const @ByRef MxPointInteger p_p);
}

@Name("MxPoint<MxS16>") @NoOffset public static class MxPointShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPointShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPointShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPointShort position(long position) {
        return (MxPointShort)super.position(position);
    }
    @Override public MxPointShort getPointer(long i) {
        return new MxPointShort((Pointer)this).offsetAddress(i);
    }

	public MxPointShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPointShort(@Const @ByRef MxPointShort p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPointShort p_p);
	public MxPointShort(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y);
	public native @Cast("MxS16") short GetX();
	public native @Cast("MxS16") short GetY();
	public native void SetX(@Cast("MxS16") short p_x);
	public native void SetY(@Cast("MxS16") short p_y);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator +") MxPointShort add(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator -") MxPointShort subtract(@Const @ByRef MxPointShort p_p);
}

@Name("MxSize<MxS32>") @NoOffset public static class MxSizeInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSizeInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSizeInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSizeInteger position(long position) {
        return (MxSizeInteger)super.position(position);
    }
    @Override public MxSizeInteger getPointer(long i) {
        return new MxSizeInteger((Pointer)this).offsetAddress(i);
    }

	public MxSizeInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSizeInteger(@Const @ByRef MxSizeInteger p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSizeInteger p_s);
	public MxSizeInteger(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height);
	public native @Cast("MxS32") int GetWidth();
	public native @Cast("MxS32") int GetHeight();
	public native void SetWidth(@Cast("MxS32") int p_width);
	public native void SetHeight(@Cast("MxS32") int p_height);
}

@Name("MxSize<MxS16>") @NoOffset public static class MxSizeShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSizeShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSizeShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSizeShort position(long position) {
        return (MxSizeShort)super.position(position);
    }
    @Override public MxSizeShort getPointer(long i) {
        return new MxSizeShort((Pointer)this).offsetAddress(i);
    }

	public MxSizeShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSizeShort(@Const @ByRef MxSizeShort p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSizeShort p_s);
	public MxSizeShort(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height);
	public native @Cast("MxS16") short GetWidth();
	public native @Cast("MxS16") short GetHeight();
	public native void SetWidth(@Cast("MxS16") short p_width);
	public native void SetHeight(@Cast("MxS16") short p_height);
}

@Name("MxRect<MxS32>") @NoOffset public static class MxRectInteger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRectInteger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRectInteger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRectInteger position(long position) {
        return (MxRectInteger)super.position(position);
    }
    @Override public MxRectInteger getPointer(long i) {
        return new MxRectInteger((Pointer)this).offsetAddress(i);
    }

	public MxRectInteger() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRectInteger(@Const @ByRef MxRectInteger p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRectInteger p_r);
	public MxRectInteger(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b);
	public MxRectInteger(@Const @ByRef MxPointInteger p_p, @Const @ByRef MxSizeInteger p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@Const @ByRef MxPointInteger p_p, @Const @ByRef MxSizeInteger p_s);
	public native @Cast("MxS32") int GetLeft();
	public native void SetLeft(@Cast("MxS32") int p_left);
	public native @Cast("MxS32") int GetTop();
	public native void SetTop(@Cast("MxS32") int p_top);
	public native @Cast("MxS32") int GetRight();
	public native void SetRight(@Cast("MxS32") int p_right);
	public native @Cast("MxS32") int GetBottom();
	public native void SetBottom(@Cast("MxS32") int p_bottom);
	public native @Cast("MxS32") int GetWidth();
	public native @Cast("MxS32") int GetHeight();
	public native @ByVal MxPointInteger GetLT();
	public native @ByVal MxPointInteger GetRB();
	public native @Cast("MxBool") boolean Empty();
	public native @Cast("MxBool") boolean Contains(@Const @ByRef MxPointInteger p_p);
	public native @Cast("MxBool") boolean Intersects(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator =") void put(@Const @ByRef MxRectInteger p_r);
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Const @ByRef MxRectInteger p_r);
	public native @Cast("MxBool") @Name("operator !=") boolean notEquals(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointInteger p_p);
	public native @Name("operator &=") void andPut(@Const @ByRef MxRectInteger p_r);
	public native @Name("operator |=") void orPut(@Const @ByRef MxRectInteger p_r);
	public native @ByVal @Name("operator +") MxRectInteger add(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator -") MxRectInteger subtract(@Const @ByRef MxPointInteger p_p);
	public native @ByVal @Name("operator &") MxRectInteger and(@Const @ByRef MxRectInteger p_r);
	public native @ByVal @Name("operator |") MxRectInteger or(@Const @ByRef MxRectInteger p_r);
}

@Name("MxRect<MxS16>") @NoOffset public static class MxRectShort extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRectShort(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRectShort(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRectShort position(long position) {
        return (MxRectShort)super.position(position);
    }
    @Override public MxRectShort getPointer(long i) {
        return new MxRectShort((Pointer)this).offsetAddress(i);
    }

	public MxRectShort() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRectShort(@Const @ByRef MxRectShort p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRectShort p_r);
	public MxRectShort(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b);
	public MxRectShort(@Const @ByRef MxPointShort p_p, @Const @ByRef MxSizeShort p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@Const @ByRef MxPointShort p_p, @Const @ByRef MxSizeShort p_s);
	public native @Cast("MxS16") short GetLeft();
	public native void SetLeft(@Cast("MxS16") short p_left);
	public native @Cast("MxS16") short GetTop();
	public native void SetTop(@Cast("MxS16") short p_top);
	public native @Cast("MxS16") short GetRight();
	public native void SetRight(@Cast("MxS16") short p_right);
	public native @Cast("MxS16") short GetBottom();
	public native void SetBottom(@Cast("MxS16") short p_bottom);
	public native @Cast("MxS16") short GetWidth();
	public native @Cast("MxS16") short GetHeight();
	public native @ByVal MxPointShort GetLT();
	public native @ByVal MxPointShort GetRB();
	public native @Cast("MxBool") boolean Empty();
	public native @Cast("MxBool") boolean Contains(@Const @ByRef MxPointShort p_p);
	public native @Cast("MxBool") boolean Intersects(@Const @ByRef MxRectShort p_r);
	public native @Name("operator =") void put(@Const @ByRef MxRectShort p_r);
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Const @ByRef MxRectShort p_r);
	public native @Cast("MxBool") @Name("operator !=") boolean notEquals(@Const @ByRef MxRectShort p_r);
	public native @Name("operator +=") void addPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator -=") void subtractPut(@Const @ByRef MxPointShort p_p);
	public native @Name("operator &=") void andPut(@Const @ByRef MxRectShort p_r);
	public native @Name("operator |=") void orPut(@Const @ByRef MxRectShort p_r);
	public native @ByVal @Name("operator +") MxRectShort add(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator -") MxRectShort subtract(@Const @ByRef MxPointShort p_p);
	public native @ByVal @Name("operator &") MxRectShort and(@Const @ByRef MxRectShort p_r);
	public native @ByVal @Name("operator |") MxRectShort or(@Const @ByRef MxRectShort p_r);
}

/******************************* MxPoint16 **********************************/

// SIZE 0x04
public static class MxPoint16 extends MxPointShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPoint16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPoint16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPoint16 position(long position) {
        return (MxPoint16)super.position(position);
    }
    @Override public MxPoint16 getPointer(long i) {
        return new MxPoint16((Pointer)this).offsetAddress(i);
    }

	public MxPoint16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxPoint16(@Const @ByRef MxPoint16 p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPoint16 p_p);
	public MxPoint16(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS16") short p_x, @Cast("MxS16") short p_y);
}

/******************************* MxPoint32 **********************************/

// SIZE 0x08
public static class MxPoint32 extends MxPointInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPoint32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPoint32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPoint32 position(long position) {
        return (MxPoint32)super.position(position);
    }
    @Override public MxPoint32 getPointer(long i) {
        return new MxPoint32((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x10054d10
	public MxPoint32() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10031a50
	public MxPoint32(@Const @ByRef MxPoint32 p_p) { super((Pointer)null); allocate(p_p); }
	private native void allocate(@Const @ByRef MxPoint32 p_p);

	// FUNCTION: LEGO1 0x10012170
	// FUNCTION: BETA10 0x1006aa70
	public MxPoint32(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y) { super((Pointer)null); allocate(p_x, p_y); }
	private native void allocate(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);
}

// TEMPLATE: BETA10 0x10031a80
// ??0?$MxPoint@H@@QAE@ABV0@@Z

// TEMPLATE: BETA10 0x100318f0
// MxPoint<int>::GetX

// TEMPLATE: BETA10 0x10031920
// MxPoint<int>::GetY

// TEMPLATE: BETA10 0x10031cf0
// ??0?$MxPoint@H@@QAE@HH@Z

// TEMPLATE: BETA10 0x10054d40
// ??0?$MxPoint@H@@QAE@XZ

// TEMPLATE: BETA10 0x10142c90
// MxPoint<int>::SetX

// TEMPLATE: BETA10 0x10142cb0
// MxPoint<int>::SetY

/******************************** MxSize16 **********************************/

// SIZE 0x04
public static class MxSize16 extends MxSizeShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSize16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSize16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSize16 position(long position) {
        return (MxSize16)super.position(position);
    }
    @Override public MxSize16 getPointer(long i) {
        return new MxSize16((Pointer)this).offsetAddress(i);
    }

	public MxSize16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSize16(@Const @ByRef MxSize16 p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSize16 p_s);
	public MxSize16(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS16") short p_width, @Cast("MxS16") short p_height);
}

/******************************** MxSize32 **********************************/

// SIZE 0x08
public static class MxSize32 extends MxSizeInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSize32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxSize32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxSize32 position(long position) {
        return (MxSize32)super.position(position);
    }
    @Override public MxSize32 getPointer(long i) {
        return new MxSize32((Pointer)this).offsetAddress(i);
    }

	public MxSize32() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxSize32(@Const @ByRef MxSize32 p_s) { super((Pointer)null); allocate(p_s); }
	private native void allocate(@Const @ByRef MxSize32 p_s);

	// FUNCTION: BETA10 0x10137030
	public MxSize32(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height) { super((Pointer)null); allocate(p_width, p_height); }
	private native void allocate(@Cast("MxS32") int p_width, @Cast("MxS32") int p_height);
}

// TEMPLATE: BETA10 0x10031820
// ??0?$MxSize@H@@QAE@HH@Z

// TEMPLATE: BETA10 0x10031950
// MxSize<int>::GetWidth

// TEMPLATE: BETA10 0x10031980
// MxSize<int>::GetHeight

/******************************** MxRect16 **********************************/

// SIZE 0x08
public static class MxRect16 extends MxRectShort {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRect16(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRect16(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRect16 position(long position) {
        return (MxRect16)super.position(position);
    }
    @Override public MxRect16 getPointer(long i) {
        return new MxRect16((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x10097eb0
	public MxRect16() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxRect16(@Const @ByRef MxRect16 p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRect16 p_r);
	public MxRect16(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS16") short p_l, @Cast("MxS16") short p_t, @Cast("MxS16") short p_r, @Cast("MxS16") short p_b);
	public MxRect16(@ByRef MxPoint16 p_p, @ByRef MxSize16 p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@ByRef MxPoint16 p_p, @ByRef MxSize16 p_s);
}

// TEMPLATE: BETA10 0x10097ee0
// ??0?$MxRect@F@@QAE@XZ

// TEMPLATE: BETA10 0x100981f0
// MxRect<short>::SetLeft

// TEMPLATE: BETA10 0x10098220
// MxRect<short>::SetTop

// TEMPLATE: BETA10 0x10098250
// MxRect<short>::SetRight

// TEMPLATE: BETA10 0x10098280
// MxRect<short>::SetBottom

// TEMPLATE: BETA10 0x10098300
// MxRect<short>::GetLeft

// TEMPLATE: BETA10 0x10098330
// MxRect<short>::GetTop

// TEMPLATE: BETA10 0x10098360
// MxRect<short>::GetBottom

// TEMPLATE: BETA10 0x10098390
// MxRect<short>::GetWidth

// TEMPLATE: BETA10 0x100983c0
// MxRect<short>::GetHeight

/******************************** MxRect32 **********************************/

// SIZE 0x10
public static class MxRect32 extends MxRectInteger {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxRect32(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxRect32(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxRect32 position(long position) {
        return (MxRect32)super.position(position);
    }
    @Override public MxRect32 getPointer(long i) {
        return new MxRect32((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1012df70
	public MxRect32() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1012de40
	public MxRect32(@Const @ByRef MxRect32 p_r) { super((Pointer)null); allocate(p_r); }
	private native void allocate(@Const @ByRef MxRect32 p_r);

	// FUNCTION: BETA10 0x100d8e90
	public MxRect32(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b) { super((Pointer)null); allocate(p_l, p_t, p_r, p_b); }
	private native void allocate(@Cast("MxS32") int p_l, @Cast("MxS32") int p_t, @Cast("MxS32") int p_r, @Cast("MxS32") int p_b);

// #ifndef COMPAT_MODE
	// FUNCTION: BETA10 0x10137060
	public MxRect32(@ByRef MxPoint32 p_p, @ByRef MxSize32 p_s) { super((Pointer)null); allocate(p_p, p_s); }
	private native void allocate(@ByRef MxPoint32 p_p, @ByRef MxSize32 p_s);
// #else
// #endif
}

// VTABLE: LEGO1 0x100dc3f0
// VTABLE: BETA10 0x101c1fb8
// SIZE 0x18

// VTABLE: LEGO1 0x100dc438
// VTABLE: BETA10 0x101c2048
// class MxListCursor<MxRect32 *>

// VTABLE: LEGO1 0x100dc408
// VTABLE: BETA10 0x101c2030
// class MxPtrListCursor<MxRect32>

// VTABLE: LEGO1 0x100dc420
// VTABLE: BETA10 0x101c2018
// SIZE 0x10

// TEMPLATE: BETA10 0x10031800
// ??0?$MxRect@H@@QAE@XZ

// TEMPLATE: LEGO1 0x100b6fc0
// TEMPLATE: BETA10 0x10031860
// ??0?$MxRect@H@@QAE@ABV?$MxPoint@H@@ABV?$MxSize@H@@@Z

// TEMPLATE: BETA10 0x100319b0
// MxRect<int>::operator=

// TEMPLATE: BETA10 0x100d8090
// MxRect<int>::GetWidth

// TEMPLATE: BETA10 0x100d80c0
// MxRect<int>::GetHeight

// TEMPLATE: BETA10 0x100d8ed0
// ??0?$MxRect@H@@QAE@HHHH@Z

// TEMPLATE: BETA10 0x100ec100
// MxRect<int>::GetLeft

// TEMPLATE: BETA10 0x100ec130
// MxRect<int>::GetTop

// TEMPLATE: BETA10 0x100ec160
// MxRect<int>::GetRight

// TEMPLATE: BETA10 0x100ec190
// MxRect<int>::GetBottom

// TEMPLATE: BETA10 0x100ec1c0
// MxRect<int>::operator+=

// TEMPLATE: BETA10 0x1012de70
// ??0?$MxRect@H@@QAE@ABV0@@Z

// TEMPLATE: BETA10 0x1012dec0
// MxRect<int>::operator&=

// SYNTHETIC: BETA10 0x1012dfa0
// MxRect32::operator=

// TEMPLATE: BETA10 0x10031d30
// MxRect<int>::Contains

// TEMPLATE: BETA10 0x10137090
// MxRect<int>::Intersects

// TEMPLATE: BETA10 0x10137100
// MxRect<int>::operator-=

// TEMPLATE: BETA10 0x1014b320
// MxRect<int>::operator|=

// TEMPLATE: BETA10 0x1014b2d0
// MxRect<int>::Empty

// TEMPLATE: BETA10 0x1014bd80
// MxRect<int>::SetLeft

// TEMPLATE: BETA10 0x1014b270
// MxRect<int>::SetTop

// TEMPLATE: BETA10 0x1014bda0
// MxRect<int>::SetRight

// TEMPLATE: BETA10 0x1014b2a0
// MxRect<int>::SetBottom

// VTABLE: LEGO1 0x100dc3d8
// VTABLE: BETA10 0x101c1fd0
// class MxPtrList<MxRect32>

// VTABLE: LEGO1 0x100dc450
// VTABLE: BETA10 0x101c1fe8
// class MxList<MxRect32 *>

// VTABLE: LEGO1 0x100dc468
// VTABLE: BETA10 0x101c2000
// class MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3c00
// TEMPLATE: BETA10 0x1013ba00
// MxCollection<MxRect32 *>::Compare

// TEMPLATE: LEGO1 0x100b3c10
// TEMPLATE: BETA10 0x1013bb30
// MxCollection<MxRect32 *>::MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3c80
// TEMPLATE: BETA10 0x1013bbc0
// MxCollection<MxRect32 *>::~MxCollection<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3cd0
// TEMPLATE: BETA10 0x1013bc60
// MxCollection<MxRect32 *>::Destroy

// TEMPLATE: LEGO1 0x100b3ce0
// TEMPLATE: BETA10 0x1013bc70
// MxList<MxRect32 *>::~MxList<MxRect32 *>

// TEMPLATE: LEGO1 0x100b3d70
// TEMPLATE: BETA10 0x1013bd20
// MxPtrList<MxRect32>::Destroy

// SYNTHETIC: LEGO1 0x100b3d80
// SYNTHETIC: BETA10 0x1013bd50
// MxRect32List::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b3df0
// TEMPLATE: BETA10 0x1013bd90
// MxPtrList<MxRect32>::~MxPtrList<MxRect32>

// SYNTHETIC: LEGO1 0x100b3e40
// SYNTHETIC: BETA10 0x1013bdf0
// MxCollection<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3eb0
// SYNTHETIC: BETA10 0x1013be30
// MxList<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3f60
// SYNTHETIC: BETA10 0x1013be70
// MxPtrList<MxRect32>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b3fd0
// SYNTHETIC: BETA10 0x1013beb0
// MxRect32List::~MxRect32List

// SYNTHETIC: LEGO1 0x100b4020
// SYNTHETIC: BETA10 0x1013c0a0
// MxRect32ListCursor::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b4090
// TEMPLATE: BETA10 0x1013c0e0
// MxPtrListCursor<MxRect32>::~MxPtrListCursor<MxRect32>

// SYNTHETIC: LEGO1 0x100b40e0
// SYNTHETIC: BETA10 0x1013c140
// MxListCursor<MxRect32 *>::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b4150
// SYNTHETIC: BETA10 0x1013c180
// MxPtrListCursor<MxRect32>::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b41c0
// TEMPLATE: BETA10 0x1013c1c0
// MxListCursor<MxRect32 *>::~MxListCursor<MxRect32 *>

// SYNTHETIC: LEGO1 0x100b4210
// SYNTHETIC: BETA10 0x1013c220
// MxRect32ListCursor::~MxRect32ListCursor

// TEMPLATE: BETA10 0x1013ba20
// MxPtrList<MxRect32>::MxPtrList<MxRect32>

// TEMPLATE: BETA10 0x1013baa0
// MxList<MxRect32 *>::MxList<MxRect32 *>

// TEMPLATE: BETA10 0x1013bc30
// MxCollection<MxRect32 *>::SetDestroy

// TEMPLATE: BETA10 0x1013bce0
// MxPtrList<MxRect32>::SetOwnership

// TEMPLATE: BETA10 0x1013bf90
// MxPtrListCursor<MxRect32>::MxPtrListCursor<MxRect32>

// TEMPLATE: BETA10 0x1013c010
// MxListCursor<MxRect32 *>::MxListCursor<MxRect32 *>

// TEMPLATE: BETA10 0x1013c3c0
// MxList<MxRect32 *>::DeleteAll

// TEMPLATE: BETA10 0x1013c450
// MxListCursor<MxRect32 *>::Next

// TEMPLATE: BETA10 0x1013c610
// MxListEntry<MxRect32 *>::GetNext

// TEMPLATE: BETA10 0x1013c630
// MxListEntry<MxRect32 *>::GetValue

// TEMPLATE: BETA10 0x10152860
// MxList<MxRect32 *>::Append

// TEMPLATE: BETA10 0x10152890
// MxList<MxRect32 *>::InsertEntry

// TEMPLATE: BETA10 0x10152980
// MxListEntry<MxRect32 *>::MxListEntry<MxRect32 *>

// TEMPLATE: BETA10 0x101529c0
// MxListEntry<MxRect32 *>::SetPrev

// TEMPLATE: BETA10 0x101529f0
// MxListEntry<MxRect32 *>::SetNext

// #endif // MXGEOMETRY_H


// Parsed from mxmisc.h

// #ifndef MXMISC_H
// #define MXMISC_H

// #include "lego1_export.h"
// #include "mxtypes.h"

@Opaque public static class MxAtomSet extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxAtomSet() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomSet(Pointer p) { super(p); }
}
@Opaque public static class MxEventManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEventManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEventManager(Pointer p) { super(p); }
}
@Opaque public static class MxNotificationManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxNotificationManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationManager(Pointer p) { super(p); }
}
@Opaque public static class MxObjectFactory extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxObjectFactory() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxObjectFactory(Pointer p) { super(p); }
}
@Opaque public static class MxSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSoundManager(Pointer p) { super(p); }
}
@Opaque public static class MxVideoManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoManager(Pointer p) { super(p); }
}

public static native MxTickleManager TickleManager();
public static native MxTimer Timer();
public static native MxStreamer Streamer();
public static native MxSoundManager MSoundManager();
public static native MxVariableTable VariableTable();
public static native MxEventManager EventManager();
public static native @Cast("MxResult") int Start(MxDSAction arg0);
public static native MxNotificationManager NotificationManager();
public static native MxVideoManager MVideoManager();
public static native MxAtomSet AtomSet();
public static native MxObjectFactory ObjectFactory();
public static native void DeleteObject(@ByRef MxDSAction p_dsAction);

// #endif // MXMISC_H


// Parsed from mxnextactiondatastart.h

// #ifndef MXNEXTACTIONDATASTART_H
// #define MXNEXTACTIONDATASTART_H

// #include "mxcore.h"

// VTABLE: LEGO1 0x100dc9a0
// VTABLE: BETA10 0x101c26a8
// SIZE 0x14
@NoOffset public static class MxNextActionDataStart extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNextActionDataStart(Pointer p) { super(p); }

	// inlined constructor at 0x100c1847
	public MxNextActionDataStart(@Cast("MxU32") long p_objectId, @Cast("MxS16") short p_unk0x24, @Cast("MxU32") long p_data) { super((Pointer)null); allocate(p_objectId, p_unk0x24, p_data); }
	private native void allocate(@Cast("MxU32") long p_objectId, @Cast("MxS16") short p_unk0x24, @Cast("MxU32") long p_data);

	// FUNCTION: LEGO1 0x100c1900
	// FUNCTION: BETA10 0x1014f660
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100c1910
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxU32") long GetObjectId();
	public native @Cast("MxS16") short GetUnknown24();
	public native @Cast("MxU32") long GetData();
	public native void SetData(@Cast("MxU32") long p_data);
}

// #endif // MXNEXTACTIONDATASTART_H


// Parsed from mxnotificationparam.h

// #ifndef MXNOTIFICATIONPARAM_H
// #define MXNOTIFICATIONPARAM_H

// #include "compat.h"
// #include "mxparam.h"
// #include "mxtypes.h"

// Several of those should be defined in LegoOmni
public enum NotificationId {
	c_notificationType0(0),
	c_notificationStartAction(1), // 100dc210:100d8350
	c_notificationEndAction(2),   // 100d8358:100d8350
	c_notificationType4(4),       // 100dc208:100d8350
	c_notificationPresenter(5),
	c_notificationStreamer(6),   // 100dc760
	c_notificationKeyPress(7),   // 100d6aa0
	c_notificationButtonUp(8),   // 100d6aa0
	c_notificationButtonDown(9), // 100d6aa0
	c_notificationMouseMove(10), // 100d6aa0
	c_notificationClick(11),     // 100d6aa0
	c_notificationDragStart(12),
	c_notificationDrag(13),
	c_notificationDragEnd(14),
	c_notificationTimer(15), // 100d6aa0
	c_notificationControl(17),
	c_notificationEndAnim(18),    // 100d7e80
	c_notificationPathStruct(19), // 100d6230
	c_notificationType20(20),
	c_notificationNewPresenter(21),
	c_notificationType22(22),
	c_notificationType23(23),
	c_notificationTransitioned(24);

    public final int value;
    private NotificationId(int v) { this.value = v; }
    private NotificationId(NotificationId e) { this.value = e.value; }
    public NotificationId intern() { for (NotificationId e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// VTABLE: LEGO1 0x100d56e0
// VTABLE: BETA10 0x101b86a8
// SIZE 0x0c
@NoOffset public static class MxNotificationParam extends MxParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxNotificationParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxNotificationParam position(long position) {
        return (MxNotificationParam)super.position(position);
    }
    @Override public MxNotificationParam getPointer(long i) {
        return new MxNotificationParam((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x100702d0
	public MxNotificationParam() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10013490
	public MxNotificationParam(NotificationId p_type, MxCore p_sender) { super((Pointer)null); allocate(p_type, p_sender); }
	private native void allocate(NotificationId p_type, MxCore p_sender);

	// FUNCTION: LEGO1 0x10010390
	// FUNCTION: BETA10 0x100135f0
	public native MxNotificationParam Clone(); // vtable+0x04

	// FUNCTION: BETA10 0x100135c0
	public native NotificationId GetNotification();

	// FUNCTION: BETA10 0x1003c960
	public native MxCore GetSender();

	// FUNCTION: BETA10 0x1007d5c0
	public native void SetNotification(NotificationId p_type);

	// FUNCTION: BETA10 0x1007d5f0
	public native void SetSender(MxCore p_sender);
}

// SYNTHETIC: LEGO1 0x10010430
// SYNTHETIC: BETA10 0x100136c0
// MxNotificationParam::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100104a0
// SYNTHETIC: BETA10 0x10013740
// MxNotificationParam::~MxNotificationParam

// #endif // MXNOTIFICATIONPARAM_H


// Parsed from mxomnicreateflags.h

// #ifndef MXOMNICREATEFLAGS_H
// #define MXOMNICREATEFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// SIZE 0x02
@NoOffset public static class MxOmniCreateFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmniCreateFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmniCreateFlags position(long position) {
        return (MxOmniCreateFlags)super.position(position);
    }
    @Override public MxOmniCreateFlags getPointer(long i) {
        return new MxOmniCreateFlags((Pointer)this).offsetAddress(i);
    }

	public MxOmniCreateFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10092b50
	public native void CreateObjectFactory(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092b90
	public native void CreateTickleManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092bd0
	public native void CreateVideoManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092c10
	public native void CreateSoundManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10130cd0
	public native @Cast("const MxBool") boolean CreateObjectFactory();

	// FUNCTION: BETA10 0x10130cf0
	public native @Cast("const MxBool") boolean CreateVariableTable();

	// FUNCTION: BETA10 0x10130d10
	public native @Cast("const MxBool") boolean CreateTickleManager();

	// FUNCTION: BETA10 0x10130d30
	public native @Cast("const MxBool") boolean CreateNotificationManager();

	// FUNCTION: BETA10 0x10130d50
	public native @Cast("const MxBool") boolean CreateVideoManager();

	// FUNCTION: BETA10 0x10130d70
	public native @Cast("const MxBool") boolean CreateSoundManager();

	// FUNCTION: BETA10 0x10130d90
	public native @Cast("const MxBool") boolean CreateMusicManager();

	// FUNCTION: BETA10 0x10130db0
	public native @Cast("const MxBool") boolean CreateEventManager();

	// FUNCTION: BETA10 0x10130dd0
	public native @Cast("const MxBool") boolean CreateTimer();

	// FUNCTION: BETA10 0x10130e00
	public native @Cast("const MxBool") boolean CreateStreamer();
}

// #endif // MXOMNICREATEFLAGS_H


// Parsed from mxomnicreateparam.h

// #ifndef MXOMNICREATEPARAM_H
// #define MXOMNICREATEPARAM_H

// #include "lego1_export.h"
// #include "mxomnicreateflags.h"
// #include "mxparam.h"
// #include "mxstring.h"
// #include "mxvideoparam.h"

// #include <SDL3/SDL_video.h>

// VTABLE: LEGO1 0x100dc218
// VTABLE: BETA10 0x101c1ca8
@NoOffset public static class MxOmniCreateParam extends MxParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateParam(Pointer p) { super(p); }

	public MxOmniCreateParam(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);
	public MxOmniCreateParam(
			String p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			String p_mediaPath,
			HWND p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);

	// FUNCTION: BETA10 0x10092cb0
	public native @ByRef MxOmniCreateFlags CreateFlags();

	public native @Const @ByRef MxString GetMediaPath();
	public native HWND GetWindowHandle();
	public native @ByRef MxVideoParam GetVideoParam();
}

// SYNTHETIC: ISLE 0x4014b0
// SYNTHETIC: BETA10 0x10132780
// MxOmniCreateParam::~MxOmniCreateParam

// #endif // MXOMNICREATEPARAM_H


// Parsed from mxstreamcontroller.h

// #ifndef MXSTREAMCONTROLLER_H
// #define MXSTREAMCONTROLLER_H

// #include "decomp.h"
// #include "mxatom.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxdsobject.h"
// #include "mxdssubscriber.h"
// #include "mxnextactiondatastart.h"
// #include "mxstl/stlcompat.h"
@Opaque public static class MxStreamProvider extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamProvider() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamProvider(Pointer p) { super(p); }
}

// SIZE 0x0c

// VTABLE: LEGO1 0x100dc968
// VTABLE: BETA10 0x101c26c0
// SIZE 0x64
@NoOffset public static class MxStreamController extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamController(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxStreamController(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxStreamController position(long position) {
        return (MxStreamController)super.position(position);
    }
    @Override public MxStreamController getPointer(long i) {
        return new MxStreamController((Pointer)this).offsetAddress(i);
    }

	public MxStreamController() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	// FUNCTION: LEGO1 0x100c0f10
	// FUNCTION: BETA10 0x10146cf0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100c0f20
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int Open(@Cast("const char*") BytePointer p_filename);
	public native @Cast("MxResult") int Open(String p_filename); // vtable+0x14

	// FUNCTION: LEGO1 0x100b9400
	public native @Cast("MxResult") int VTable0x18(@Cast("undefined4") long arg0, @Cast("undefined4") long arg1); // vtable+0x18

	// FUNCTION: LEGO1 0x100b9410
	public native @Cast("MxResult") int VTable0x1c(@Cast("undefined4") long arg0, @Cast("undefined4") long arg1); // vtable+0x1c

	public native @Cast("MxResult") int VTable0x20(MxDSAction p_action); // vtable+0x20
	public native @Cast("MxResult") int VTable0x24(MxDSAction p_action); // vtable+0x24

	// FUNCTION: LEGO1 0x100b9420
	public native MxDSStreamingAction VTable0x28(); // vtable+0x28

	public native @Cast("MxResult") int VTable0x2c(MxDSAction p_action, @Cast("MxU32") long p_bufferval); // vtable+0x2c
	public native @Cast("MxResult") int VTable0x30(MxDSAction p_action);                    // vtable+0x30

	public native void AddSubscriber(MxDSSubscriber p_subscriber);
	public native void RemoveSubscriber(MxDSSubscriber p_subscriber);
	public native @Cast("MxResult") int FUN_100c1800(MxDSAction p_action, @Cast("MxU32") long p_val);
	public native @Cast("MxResult") int FUN_100c1a00(MxDSAction p_action, @Cast("MxU32") long p_offset);
	public native MxPresenter FUN_100c1e70(@ByRef MxDSAction p_action);
	public native @Cast("MxResult") int FUN_100c1f00(MxDSAction p_action);
	public native @Cast("MxBool") boolean IsStoped(MxDSObject p_obj);
	public native @Cast("MxResult") int InsertActionToList54(MxDSAction p_action);
	public native MxNextActionDataStart FindNextActionDataStartFromStreamingAction(MxDSStreamingAction p_action);

	public native @ByRef MxAtomId GetAtom();
	public native MxStreamProvider GetProvider();
}

// TEMPLATE: LEGO1 0x100c0d60
// list<MxDSObject *,allocator<MxDSObject *> >::~list<MxDSObject *,allocator<MxDSObject *> >

// TEMPLATE: LEGO1 0x100c0dd0
// list<MxDSSubscriber *,allocator<MxDSSubscriber *> >::~list<MxDSSubscriber *,allocator<MxDSSubscriber *> >

// TEMPLATE: LEGO1 0x100c0e40
// list<MxDSSubscriber *,allocator<MxDSSubscriber *> >::_Buynode

// clang-format off
// TEMPLATE: LEGO1 0x100c0e70
// list<MxNextActionDataStart *,allocator<MxNextActionDataStart *> >::~list<MxNextActionDataStart *,allocator<MxNextActionDataStart *> >
// clang-format on

// TEMPLATE: LEGO1 0x100c0ee0
// list<MxNextActionDataStart *,allocator<MxNextActionDataStart *> >::_Buynode

// SYNTHETIC: LEGO1 0x100c0fa0
// MxStreamController::`scalar deleting destructor'

// FUNCTION: LEGO1 0x100c0fc0
// MxDSSubscriberList::~MxDSSubscriberList

// FUNCTION: LEGO1 0x100c1010
// MxDSObjectList::~MxDSObjectList

// FUNCTION: LEGO1 0x100c1060
// MxNextActionDataStartList::~MxNextActionDataStartList

// TEMPLATE: LEGO1 0x100c10b0
// MxUtilityList<MxDSSubscriber *>::~MxUtilityList<MxDSSubscriber *>

// TEMPLATE: LEGO1 0x100c1100
// MxUtilityList<MxDSObject *>::~MxUtilityList<MxDSObject *>

// TEMPLATE: LEGO1 0x100c1150
// MxUtilityList<MxNextActionDataStart *>::~MxUtilityList<MxNextActionDataStart *>

// TEMPLATE: LEGO1 0x100c11a0
// List<MxDSSubscriber *>::~List<MxDSSubscriber *>

// TEMPLATE: LEGO1 0x100c11f0
// List<MxDSObject *>::~List<MxDSObject *>

// TEMPLATE: LEGO1 0x100c1240
// List<MxNextActionDataStart *>::~List<MxNextActionDataStart *>

// TEMPLATE: LEGO1 0x100c1bc0
// list<MxDSObject *,allocator<MxDSObject *> >::insert

// TEMPLATE: BETA10 0x10150b90
// MxUtilityList<MxDSSubscriber *>::PushBack

// TEMPLATE: BETA10 0x10150cf0
// MxUtilityList<MxDSSubscriber *>::Remove

// #endif // MXSTREAMCONTROLLER_H


// Parsed from mxstreamer.h

// #ifndef MXSTREAMER_H
// #define MXSTREAMER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxmemorypool.h"
// #include "mxnotificationparam.h"
// #include "mxstl/stlcompat.h"
// #include "mxstreamcontroller.h"
// #include "mxtypes.h"

// #include <assert.h>

// VTABLE: LEGO1 0x100dc760
// VTABLE: BETA10 0x101c23c8
// SIZE 0x10
@NoOffset public static class MxStreamerNotification extends MxNotificationParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamerNotification(Pointer p) { super(p); }

	// FUNCTION: BETA10 0x10146e40
	public MxStreamerNotification(NotificationId p_type, MxCore p_sender, MxStreamController p_ctrlr) { super((Pointer)null); allocate(p_type, p_sender, p_ctrlr); }
	private native void allocate(NotificationId p_type, MxCore p_sender, MxStreamController p_ctrlr);

	public native MxNotificationParam Clone();

	// FUNCTION: BETA10 0x10147190
	public native MxStreamController GetController();
}

// VTABLE: LEGO1 0x100dc710
// VTABLE: BETA10 0x101c2378
// SIZE 0x2c
@NoOffset public static class MxStreamer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxStreamer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxStreamer position(long position) {
        return (MxStreamer)super.position(position);
    }
    @Override public MxStreamer getPointer(long i) {
        return new MxStreamer((Pointer)this).offsetAddress(i);
    }

	public enum OpenMode {
		e_diskStream(0),
		e_RAMStream(1);

	    public final int value;
	    private OpenMode(int v) { this.value = v; }
	    private OpenMode(OpenMode e) { this.value = e.value; }
	    public OpenMode intern() { for (OpenMode e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public MxStreamer() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native MxStreamController Open(@Cast("const char*") BytePointer p_name, @Cast("MxU16") int p_openMode);
	public native MxStreamController Open(String p_name, @Cast("MxU16") int p_openMode);
	public native @Cast("MxLong") long Close(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxLong") long Close(String p_name);

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: LEGO1 0x100b9000
	// FUNCTION: BETA10 0x10145ee0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100b9010
	// FUNCTION: BETA10 0x10145f00
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int Create(); // vtable+0x14

	public native @Cast("MxBool") boolean FUN_100b9b30(@ByRef MxDSObject p_dsObject);
	public native MxStreamController GetOpenStream(@Cast("const char*") BytePointer p_name);
	public native MxStreamController GetOpenStream(String p_name);
	public native void FUN_100b98f0(MxDSAction p_action);
	public native @Cast("MxResult") int AddStreamControllerToOpenList(MxStreamController p_stream);
	public native @Cast("MxResult") int FUN_100b99b0(MxDSAction p_action);
	public native @Cast("MxResult") int DeleteObject(MxDSAction p_dsAction);

	// FUNCTION: BETA10 0x10158db0
	

	// FUNCTION: BETA10 0x10158570
	public native void ReleaseMemoryBlock(@Cast("MxU8*") short p_block, @Cast("MxU32") long p_blockSize);
}

// clang-format off
// TEMPLATE: LEGO1 0x100b9090
// TEMPLATE: BETA10 0x10146020
// list<MxStreamController *,allocator<MxStreamController *> >::~list<MxStreamController *,allocator<MxStreamController *> >
// clang-format on

// TEMPLATE: BETA10 0x10146090
// list<MxStreamController *,allocator<MxStreamController *> >::begin

// TEMPLATE: BETA10 0x10146120
// list<MxStreamController *,allocator<MxStreamController *> >::end

// TEMPLATE: BETA10 0x101461b0
// ??Eiterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@QAE?AV01@H@Z

// SYNTHETIC: LEGO1 0x100b9120
// SYNTHETIC: BETA10 0x101466e0
// MxStreamer::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b9140
// TEMPLATE: BETA10 0x10146720
// List<MxStreamController *>::~List<MxStreamController *>

// TEMPLATE: BETA10 0x10146ab0
// list<MxStreamController *,allocator<MxStreamController *> >::iterator::operator*

// SYNTHETIC: LEGO1 0x100b97b0
// SYNTHETIC: BETA10 0x10146f80
// MxStreamerNotification::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b9820
// SYNTHETIC: BETA10 0x10146fc0
// MxStreamerNotification::~MxStreamerNotification

// TEMPLATE: BETA10 0x10147020
// list<MxStreamController *,allocator<MxStreamController *> >::iterator::operator==

// TEMPLATE: BETA10 0x10147060
// list<MxStreamController *,allocator<MxStreamController *> >::push_back

// TEMPLATE: BETA10 0x10147200
// ??9@YAHABViterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@0@Z

// clang-format off
// TEMPLATE: BETA10 0x10147230
// ?find@@YA?AViterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@V12@0ABQAVMxStreamController@@@Z
// clang-format on

// #endif // MXSTREAMER_H


// Parsed from mxstring.h

// #ifndef MXSTRING_H
// #define MXSTRING_H

// #include "lego1_export.h"
// #include "mxcore.h"

// VTABLE: LEGO1 0x100dc110
// VTABLE: BETA10 0x101c1be0
// SIZE 0x10
@NoOffset public static class MxString extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxString position(long position) {
        return (MxString)super.position(position);
    }
    @Override public MxString getPointer(long i) {
        return new MxString((Pointer)this).offsetAddress(i);
    }

	public MxString() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxString(@Const @ByRef MxString p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Const @ByRef MxString p_str);
	public MxString(@Cast("const char*") BytePointer p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Cast("const char*") BytePointer p_str);
	public MxString(String p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(String p_str);
	public MxString(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen);
	public MxString(String p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(String p_str, @Cast("MxU16") int p_maxlen);

	public native void Reverse();
	public native void ToUpperCase();
	public native void ToLowerCase();
	public native void MapPathToFilesystem();

	public native @ByRef @Name("operator =") MxString put(@Const @ByRef MxString p_str);
	public native @Const @ByRef @Name("operator =") MxString put(@Cast("const char*") BytePointer p_str);
	public native @Const @ByRef @Name("operator =") MxString put(String p_str);
	public native @ByVal @Name("operator +") MxString add(@Const @ByRef MxString p_str);
	public native @ByVal @Name("operator +") MxString add(@Cast("const char*") BytePointer p_str);
	public native @ByVal @Name("operator +") MxString add(String p_str);
	public native @ByRef @Name("operator +=") MxString addPut(@Cast("const char*") BytePointer p_str);
	public native @ByRef @Name("operator +=") MxString addPut(String p_str);

	public static native void CharSwap(@Cast("char*") BytePointer p_a, @Cast("char*") BytePointer p_b);
	public static native void CharSwap(@Cast("char*") ByteBuffer p_a, @Cast("char*") ByteBuffer p_b);
	public static native void CharSwap(@Cast("char*") byte[] p_a, @Cast("char*") byte[] p_b);
	public static native void MapPathToFilesystem(@Cast("char*") BytePointer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") ByteBuffer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") byte[] p_path);

	// FUNCTION: BETA10 0x10017c50
	public native @Cast("char*") BytePointer GetData();

	// FUNCTION: BETA10 0x10067630
	public native @Cast("const MxU16") int GetLength();

	// FUNCTION: BETA10 0x100d8a30
	public native @Cast("MxBool") boolean Equal(@Const @ByRef MxString p_str);

	// FUNCTION: BETA10 0x1012a810
	public native @Cast("MxS8") char Compare(@Const @ByRef MxString p_str);
}

// #endif // MXSTRING_H


// Parsed from mxomni.h

// #ifndef MXOMNI_H
// #define MXOMNI_H

// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxstl/stlcompat.h"
// #include "mxstring.h"

// #include <SDL3/SDL_video.h>
// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif
@Opaque public static class MxEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEntity(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc168
// SIZE 0x68
@NoOffset public static class MxOmni extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmni position(long position) {
        return (MxOmni)super.position(position);
    }
    @Override public MxOmni getPointer(long i) {
        return new MxOmni((Pointer)this).offsetAddress(i);
    }

	public static native void DestroyInstance();
	public static native @Cast("const char*") BytePointer GetCD();
	public static native @Cast("const char*") BytePointer GetHD();
	public static native MxOmni GetInstance();
	public static native @Cast("MxBool") boolean IsSound3D();
	public static native void SetCD(@Cast("const char*") BytePointer p_cd);
	public static native void SetCD(String p_cd);
	public static native void SetHD(@Cast("const char*") BytePointer p_hd);
	public static native void SetHD(String p_hd);
	public static native void SetSound3D(@Cast("MxBool") boolean p_use3dSound);
	
	

	public MxOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param);                                                 // vtable+0x04
	public native void Init();                                                                      // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                      // vtable+0x18
	public native void Destroy();                                                                   // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                           // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                        // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                   // vtable+0x28
	public native @Cast("MxResult") int CreatePresenter(MxStreamController p_controller, @ByRef MxDSAction p_action); // vtable+0x2c
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer arg0, @Cast("MxS32") int arg1, MxPresenter arg2);
	public native MxEntity AddToWorld(String arg0, @Cast("MxS32") int arg1, MxPresenter arg2);                           // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                     // vtable+0x34
	public native void Pause();                                                                     // vtable+0x38
	public native void Resume();                                                                    // vtable+0x3c

	// FUNCTION: LEGO1 0x10058a90
	public native @Cast("MxBool") boolean IsPaused(); // vtable+0x40

	public static native void SetInstance(MxOmni p_instance);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, @Cast("const char*") BytePointer p_name);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, String p_name);

	public native HWND GetWindowHandle();

	// FUNCTION: BETA10 0x10125100
	public native MxObjectFactory GetObjectFactory();

	// FUNCTION: BETA10 0x10125120
	public native MxNotificationManager GetNotificationManager();

	// FUNCTION: BETA10 0x10125140
	public native MxTickleManager GetTickleManager();

	// FUNCTION: BETA10 0x10125160
	public native MxTimer GetTimer();

	// FUNCTION: BETA10 0x101251a0
	public native MxStreamer GetStreamer();

	// FUNCTION: BETA10 0x100e5250
	public native MxSoundManager GetSoundManager();

	// FUNCTION: BETA10 0x1009e860
	public native MxVideoManager GetVideoManager();

	// FUNCTION: BETA10 0x101251c0
	public native MxVariableTable GetVariableTable();

	// FUNCTION: BETA10 0x10125200
	public native MxEventManager GetEventManager();

	// FUNCTION: BETA10 0x10125180
	public native MxAtomSet GetAtomSet();

	public native @Cast("MxLong") long HandleEndAction(@ByRef MxParam p_param);
}

// #endif // MXOMNI_H


// Parsed from legomain.h

// #ifndef LEGOMAIN_H
// #define LEGOMAIN_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "legoutils.h"
// #include "mxdsaction.h"
// #include "mxomni.h"

// #include <SDL3/SDL_events.h>
// #include <SDL3/SDL_timer.h>

@Opaque public static class Isle extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Isle() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Isle(Pointer p) { super(p); }
}
@Opaque public static class LegoAnimationManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoAnimationManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoAnimationManager(Pointer p) { super(p); }
}
@Opaque public static class LegoBuildingManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoBuildingManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBuildingManager(Pointer p) { super(p); }
}
@Opaque public static class LegoCharacterManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoCharacterManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoCharacterManager(Pointer p) { super(p); }
}
@Opaque public static class LegoEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoEntity(Pointer p) { super(p); }
}
@Opaque public static class LegoNavController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoNavController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoNavController(Pointer p) { super(p); }
}
@Opaque public static class LegoPathActor extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathActor() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathActor(Pointer p) { super(p); }
}
@Opaque public static class LegoPathBoundary extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathBoundary() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathBoundary(Pointer p) { super(p); }
}
@Opaque public static class LegoPlantManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPlantManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPlantManager(Pointer p) { super(p); }
}
@Opaque public static class LegoSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoSoundManager(Pointer p) { super(p); }
}
@Opaque public static class LegoTextureContainer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoTextureContainer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoTextureContainer(Pointer p) { super(p); }
}
@Opaque public static class LegoWorldList extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorldList() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorldList(Pointer p) { super(p); }
}
@Opaque public static class MxAtomId extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxAtomId() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomId(Pointer p) { super(p); }
}
@Opaque public static class MxBackgroundAudioManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxBackgroundAudioManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxBackgroundAudioManager(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d8638
// VTABLE: BETA10 0x101bc8b8
// SIZE 0x140
@NoOffset public static class LegoOmni extends MxOmni {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoOmni position(long position) {
        return (LegoOmni)super.position(position);
    }
    @Override public LegoOmni getPointer(long i) {
        return new LegoOmni((Pointer)this).offsetAddress(i);
    }

	/** enum LegoOmni:: */
	public static final int
		c_disableInput = 0x01,
		c_disable3d = 0x02,
		c_clearScreen = 0x04;

	public enum World {
		e_undefined(-1),
		e_act1(0),
		e_imain(1),
		e_icube(2),
		e_ireg(3),
		e_ielev(4),
		e_iisle(5),
		e_hosp(6),
		e_police(7),
		e_gmain(8),
		e_bldh(9),
		e_bldd(10),
		e_bldj(11),
		e_bldr(12),
		e_racc(13),
		e_racj(14),
		e_act2(15),
		e_act3(16),
		e_test(17),
		e_numWorlds(e_test.value + 2);// count e_undefined

	    public final int value;
	    private World(int v) { this.value = v; }
	    private World(World e) { this.value = e.value; }
	    public World intern() { for (World e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	// SIZE 0x1c
	@NoOffset public static class WorldContainer extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public WorldContainer(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public WorldContainer(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public WorldContainer position(long position) {
	        return (WorldContainer)super.position(position);
	    }
	    @Override public WorldContainer getPointer(long i) {
	        return new WorldContainer((Pointer)this).offsetAddress(i);
	    }
	
		// FUNCTION: LEGO1 0x1005ac40
		public WorldContainer() { super((Pointer)null); allocate(); }
		private native void allocate();

		public WorldContainer(World p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(World p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId);
		public WorldContainer(World p_id, String p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(World p_id, String p_key, MxAtomId p_atomId);

		// FUNCTION: LEGO1 0x1005ac50
		public native @ByRef @Name("operator =") WorldContainer put(@Const @ByRef WorldContainer p_container);

		public native World m_id(); public native WorldContainer m_id(World setter);         // 0x00
		public native @Cast("char") byte m_key(int i); public native WorldContainer m_key(int i, byte setter);
		@MemberGetter public native @Cast("char*") BytePointer m_key();     // 0x04
		public native MxAtomId m_atomId(); public native WorldContainer m_atomId(MxAtomId setter); // 0x18
	}

	public LegoOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: LEGO1 0x10058aa0
	// FUNCTION: BETA10 0x1008f830
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x10058ab0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void Init();                                                                        // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                        // vtable+0x18
	public native void Destroy();                                                                     // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                             // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                          // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                     // vtable+0x28
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter);
	public native MxEntity AddToWorld(String p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter); // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                       // vtable+0x34
	public native void Pause();                                                                       // vtable+0x38
	public native void Resume();                                                                      // vtable+0x3c

	public native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
	public native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
	public native LegoROI FindROI(String p_name);
	public native void AddWorld(LegoWorld p_world);
	public native void DeleteWorld(LegoWorld p_world);
	public native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
	public native void CreateBackgroundAudio();
	public native void RemoveWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxLong") long p_objectId);
	public native @Cast("MxResult") int RegisterWorlds();
	public native @Cast("const char*") BytePointer GetWorldName(World p_id);
	public native MxAtomId GetWorldAtom(World p_id);
	public native World GetWorldId(@Cast("const char*") BytePointer p_key);
	public native World GetWorldId(String p_key);
	public native void DeleteAction();

	
	public static native void CreateInstance();
	public static native LegoOmni GetInstance();

	
	

	// FUNCTION: BETA10 0x1009e7a0
	public native LegoInputManager GetInputManager();

	public native LegoTextureContainer GetTextureContainer();
	public native ViewLODListManager GetViewLODListManager();
	public native LegoWorld GetCurrentWorld();
	public native LegoNavController GetNavController();
	public native LegoPathActor GetUserActor();

	// FUNCTION: BETA10 0x100e53a0
	public native LegoPlantManager GetPlantManager();

	public native LegoAnimationManager GetAnimationManager();

	// FUNCTION: BETA10 0x100e53d0
	public native LegoBuildingManager GetBuildingManager();

	// FUNCTION: BETA10 0x100e52b0
	public native LegoGameState GetGameState();

	// FUNCTION: BETA10 0x100e5280
	public native MxBackgroundAudioManager GetBackgroundAudioManager();

	public native MxTransitionManager GetTransitionManager();
	public native @ByRef MxDSAction GetCurrentAction();
	public native LegoCharacterManager GetCharacterManager();
	public native LegoWorldList GetWorldList();

	public native void SetNavController(LegoNavController p_navController);
	public native void SetUserActor(LegoPathActor p_userActor);
	public native void SetCurrentWorld(LegoWorld p_currentWorld);

	// FUNCTION: BETA10 0x100d55c0
	public native void SetExit(@Cast("MxBool") boolean p_exit);

	public native @Cast("MxResult") int StartActionIfInitialized(@ByRef MxDSAction p_dsAction);
	public native void SetInitialized(@Cast("MxBool") boolean p_unk0x13c);

	public native void CloseMainWindow();

	public native void SetVersion10(@Cast("MxBool") boolean p_version10);
	public native @Cast("MxBool") boolean IsVersion10();
	public native @Cast("MxBool") boolean m_initialized(); public native LegoOmni m_initialized(boolean setter); // 0x13c
}

// #endif // LEGOMAIN_H


// Parsed from mxpresenter.h

// #ifndef MXPRESENTER_H
// #define MXPRESENTER_H

// #include "decomp.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxgeometry.h"
// #include "mxutilities.h"

// #include <SDL3/SDL_events.h>

@Opaque public static class MxCompositePresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxCompositePresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCompositePresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d4d38
// SIZE 0x40
@NoOffset public static class MxPresenter extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPresenter position(long position) {
        return (MxPresenter)super.position(position);
    }
    @Override public MxPresenter getPointer(long i) {
        return new MxPresenter((Pointer)this).offsetAddress(i);
    }

	public enum TickleState {
		e_idle(0),
		e_ready(1),
		e_starting(2),
		e_streaming(3),
		e_repeating(4),
		e_freezing(5),
		e_done(6);

	    public final int value;
	    private TickleState(int v) { this.value = v; }
	    private TickleState(TickleState e) { this.value = e.value; }
	    public TickleState intern() { for (TickleState e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public MxPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1000be30
	public native void VTable0x14(); // vtable+0x14

	// FUNCTION: LEGO1 0x1000be40
	public native void ReadyTickle(); // vtable+0x18

	// FUNCTION: LEGO1 0x1000be60
	public native void StartingTickle(); // vtable+0x1c

	// FUNCTION: LEGO1 0x1000be80
	public native void StreamingTickle(); // vtable+0x20

	// FUNCTION: LEGO1 0x1000bea0
	public native void RepeatingTickle(); // vtable+0x24

	// FUNCTION: LEGO1 0x1000bec0
	public native void FreezingTickle();
	// FUNCTION: LEGO1 0x1000bf00 // vtable+0x00

	// FUNCTION: LEGO1 0x1000bf70
	public native @Cast("MxResult") int AddToManager(); // vtable+0x34

	// FUNCTION: LEGO1 0x1000bf80
	public native void Destroy(); // vtable+0x38

	public native @Cast("MxResult") int StartAction(MxStreamController arg0, MxDSAction arg1); // vtable+0x3c
	public native void EndAction();                                       // vtable+0x40

	// FUNCTION: LEGO1 0x1000bf90
	// FUNCTION: BETA10 0x10054a50
	public native void SetTickleState(TickleState p_tickleState); // vtable+0x44

	// FUNCTION: LEGO1 0x1000bfb0
	public native @Cast("MxBool") boolean HasTickleStatePassed(TickleState p_tickleState); // vtable+0x48

	// FUNCTION: LEGO1 0x1000bfc0
	public native @Cast("MxResult") int PutData(); // vtable+0x4c

	// FUNCTION: LEGO1 0x1000bfd0
	public native @Cast("MxBool") boolean IsHit(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y); // vtable+0x50

	public native void Enable(@Cast("MxBool") boolean p_enable); // vtable+0x54

	// FUNCTION: BETA10 0x1004d9e0
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000bfe0
	// FUNCTION: BETA10 0x1004d9b0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000bff0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native MxEntity CreateEntity(@Cast("const char*") BytePointer p_defaultName);
	public native MxEntity CreateEntity(String p_defaultName);
	public native void SendToCompositePresenter(MxOmni p_omni);
	public native @Cast("MxBool") boolean IsEnabled();

	public native @Cast("MxS32") int GetCurrentTickleState();
	public native @ByVal MxPoint32 GetLocation();
	public native @Cast("MxS32") int GetX();
	public native @Cast("MxS32") int GetY();

	// FUNCTION: BETA10 0x10031b70
	public native @Cast("MxS32") int GetDisplayZ();

	// FUNCTION: BETA10 0x10028430
	public native MxDSAction GetAction();

	public native void SetAction(MxDSAction p_action);

	public native void SetCompositePresenter(MxCompositePresenter p_compositePresenter);

	// FUNCTION: BETA10 0x10031b40
	public native void SetDisplayZ(@Cast("MxS32") int p_displayZ);
}

public static native @Cast("const char*") BytePointer PresenterNameDispatch(@Const @ByRef MxDSAction arg0);

// #endif // MXPRESENTER_H


// Parsed from mxpresentationmanager.h

// #ifndef MXPRESENTATIONMANAGER_H
// #define MXPRESENTATIONMANAGER_H

// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxpresenterlist.h"
// #include "mxtypes.h"

@Opaque public static class MxThread extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxThread() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxThread(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc6b0
// VTABLE: BETA10 0x101c2318
// SIZE 0x2c
@NoOffset public static class MxPresentationManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPresentationManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPresentationManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPresentationManager position(long position) {
        return (MxPresentationManager)super.position(position);
    }
    @Override public MxPresentationManager getPointer(long i) {
        return new MxPresentationManager((Pointer)this).offsetAddress(i);
    }

	public MxPresentationManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle();                                 // vtable+08
	public native @Cast("MxResult") int Create();                                  // vtable+14
	public native void Destroy();                                     // vtable+18
	public native void RegisterPresenter(@ByRef MxPresenter p_presenter);   // vtable+1c
	public native void UnregisterPresenter(@ByRef MxPresenter p_presenter); // vtable+20
	public native void StopPresenters();                              // vtable+24

	public native @Cast("MxResult") int Init();
}

// #endif // MXPRESENTATIONMANAGER_H


// Parsed from mxtransitionmanager.h

// #ifndef MXTRANSITIONMANAGER_H
// #define MXTRANSITIONMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>
// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxVideoPresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoPresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoPresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d7ea0
// VTABLE: BETA10 0x101bf670
// SIZE 0x900
@NoOffset public static class MxTransitionManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTransitionManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTransitionManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTransitionManager position(long position) {
        return (MxTransitionManager)super.position(position);
    }
    @Override public MxTransitionManager getPointer(long i) {
        return new MxTransitionManager((Pointer)this).offsetAddress(i);
    }

	public MxTransitionManager() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native void SetWaitIndicator(MxVideoPresenter p_waitIndicator);

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1004b950
	// FUNCTION: BETA10 0x100ed8e0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1004b960
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int GetDDrawSurfaceFromVideoManager(); // vtable+0x14

	public enum TransitionType {
		e_idle(0), // name verified by BETA10 0x100ec4e6
		e_noAnimation(1),
		e_dissolve(2),
		e_mosaic(3),
		e_wipeDown(4),
		e_windows(5),
		e_broken(6);// Unknown what this is supposed to be, it locks the game up

	    public final int value;
	    private TransitionType(int v) { this.value = v; }
	    private TransitionType(TransitionType e) { this.value = e.value; }
	    public TransitionType intern() { for (TransitionType e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	public native @Cast("MxResult") int StartTransition(TransitionType p_animationType, @Cast("MxS32") int p_speed, @Cast("MxBool") boolean p_doCopy, @Cast("MxBool") boolean p_playMusicInAnim);

	public native TransitionType GetTransitionType();

	public static native void configureMxTransitionManager(TransitionType p_transitionManagerConfig);
}

// #endif // MXTRANSITIONMANAGER_H


// Parsed from mxvariable.h

// #ifndef MXVARIABLE_H
// #define MXVARIABLE_H

// #include "mxcore.h"
// #include "mxstring.h"

// VTABLE: LEGO1 0x100d7498
// VTABLE: BETA10 0x101bc038
// SIZE 0x24
@NoOffset public static class MxVariable extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariable(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVariable(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVariable position(long position) {
        return (MxVariable)super.position(position);
    }
    @Override public MxVariable getPointer(long i) {
        return new MxVariable((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1007b750
	public MxVariable() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1012a840
	public MxVariable(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public MxVariable(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	// FUNCTION: BETA10 0x1012aa30
	public MxVariable(@Cast("const char*") BytePointer p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(@Cast("const char*") BytePointer p_key);
	public MxVariable(String p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(String p_key);

	// FUNCTION: LEGO1 0x1003bea0
	// FUNCTION: BETA10 0x1007b810
	public native MxString GetValue(); // vtable+0x00

	// FUNCTION: LEGO1 0x1003beb0
	// FUNCTION: BETA10 0x1007b840
	public native void SetValue(@Cast("const char*") BytePointer p_value);
	public native void SetValue(String p_value); // vtable+0x04

	// FUNCTION: LEGO1 0x1003bec0
	// FUNCTION: BETA10 0x1007b870
	public native void Destroy(); // vtable+0x08

	// FUNCTION: BETA10 0x1012a7f0
	public native @Const MxString GetKey();
}

// SYNTHETIC: LEGO1 0x1003bf40
// SYNTHETIC: BETA10 0x1007b910
// MxVariable::~MxVariable

// #endif // MXVARIABLE_H


// Parsed from mxvideoparam.h

// #ifndef MXVIDEOPARAM_H
// #define MXVIDEOPARAM_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "mxgeometry.h"
// #include "mxtypes.h"
// #include "mxvideoparamflags.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxPalette extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxPalette() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPalette(Pointer p) { super(p); }
}

public static final String ISLE_PROP_WINDOW_CREATE_VIDEO_PARAM = "ISLE.window.create.videoParam";

// SIZE 0x24
@NoOffset public static class MxVideoParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParam position(long position) {
        return (MxVideoParam)super.position(position);
    }
    @Override public MxVideoParam getPointer(long i) {
        return new MxVideoParam((Pointer)this).offsetAddress(i);
    }

	public MxVideoParam() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxVideoParam(
			@ByRef MxRect32 p_rect,
			MxPalette p_palette,
			@Cast("MxULong") long p_backBuffers,
			@ByRef MxVideoParamFlags p_flags
		) { super((Pointer)null); allocate(p_rect, p_palette, p_backBuffers, p_flags); }
	private native void allocate(
			@ByRef MxRect32 p_rect,
			MxPalette p_palette,
			@Cast("MxULong") long p_backBuffers,
			@ByRef MxVideoParamFlags p_flags
		);
	public MxVideoParam(@ByRef MxVideoParam p_videoParam) { super((Pointer)null); allocate(p_videoParam); }
	private native void allocate(@ByRef MxVideoParam p_videoParam);
	public native void SetDeviceName(@Cast("char*") BytePointer p_deviceId);
	public native void SetDeviceName(@Cast("char*") ByteBuffer p_deviceId);
	public native void SetDeviceName(@Cast("char*") byte[] p_deviceId);
	public native @ByRef @Name("operator =") MxVideoParam put(@Const @ByRef MxVideoParam p_videoParam);

	// FUNCTION: BETA10 0x100886e0
	public native @ByRef MxVideoParamFlags Flags();

	// FUNCTION: BETA10 0x100d81f0
	public native @ByRef MxRect32 GetRect();

	// FUNCTION: BETA10 0x100d8210
	public native MxPalette GetPalette();

	// FUNCTION: BETA10 0x100d8240
	public native void SetPalette(MxPalette p_palette);

	// FUNCTION: BETA10 0x100d8270
	public native @Cast("char*") BytePointer GetDeviceName();

	// FUNCTION: BETA10 0x10141f60
	public native @Cast("MxU32") long GetBackBuffers();

	// FUNCTION: BETA10 0x10141fe0
	public native void SetBackBuffers(@Cast("MxU32") long p_backBuffers);

	public native void SetMSAASamples(@Cast("MxU32") long p_msaaSamples);
	public native @Cast("MxU32") long GetMSAASamples();

	public native void SetAnisotropic(@Cast("MxFloat") float p_anisotropic);
	public native @Cast("MxFloat") float GetAnisotropic();
}

// #endif // MXVIDEOPARAM_H


// Parsed from mxvideoparamflags.h

// #ifndef MXVIDEOPARAMFLAGS_H
// #define MXVIDEOPARAMFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif

@NoOffset public static class MxVideoParamFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParamFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParamFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParamFlags position(long position) {
        return (MxVideoParamFlags)super.position(position);
    }
    @Override public MxVideoParamFlags getPointer(long i) {
        return new MxVideoParamFlags((Pointer)this).offsetAddress(i);
    }

	public MxVideoParamFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// inlined in ISLE
	public native void SetFullScreen(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141f80
	public native void SetFlipSurfaces(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141fb0
	public native void SetBackBuffers(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d9250
	public native void SetDoubleScaling(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void Set16Bit(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetWideViewAngle(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF1bit7(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d81b0
	public native void SetLacksLightSupport(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetEnabled(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x1009e770
	public native @Cast("MxBool") boolean GetFullScreen();

	// FUNCTION: BETA10 0x100d80f0
	public native @Cast("MxBool") boolean GetFlipSurfaces();

	// FUNCTION: BETA10 0x100d8120
	public native @Cast("MxBool") boolean GetBackBuffers();

	// FUNCTION: BETA10 0x10142010
	public native @Cast("MxBool") boolean GetDoubleScaling();

	// FUNCTION: BETA10 0x100d8150
	public native @Cast("MxBool") boolean Get16Bit();

	// FUNCTION: BETA10 0x100d8180
	public native @Cast("MxBool") boolean GetWideViewAngle();

	// FUNCTION: BETA10 0x100886b0
	public native @Cast("MxBool") boolean GetLacksLightSupport();

	// FUNCTION: BETA10 0x10142050
	public native @Cast("MxBool") boolean GetEnabled();
}

// #endif // MXVIDEOPARAMFLAGS_H


// Parsed from decomp.h

// #ifndef DECOMP_H
// #define DECOMP_H

// #ifndef NDEBUG
// Disable size assertions for debug builds because the sizes differ between debug and release builds.
// The release LEGO1.DLL is what we ultimately want to decompile, so this is what we assert against.
// #undef ENABLE_DECOMP_ASSERTS
// #endif

// #if defined(ENABLE_DECOMP_ASSERTS)
// #define DECOMP_STATIC_ASSERT(V)
// 	namespace
// 	{
// 	typedef int foo[(V) ? 1 : -1];
// 	}
// #define DECOMP_SIZE_ASSERT(T, S) DECOMP_STATIC_ASSERT(sizeof(T) == S)
// #else
// #define DECOMP_STATIC_ASSERT(V)
// #define DECOMP_SIZE_ASSERT(T, S)
// #endif

// #ifndef sizeOfArray
// #define sizeOfArray(arr) (sizeof(arr) / sizeof(arr[0]))
// #endif

// #endif // DECOMP_H


// Parsed from misc.h

// #ifndef MISC_H
// #define MISC_H

// #include "compat.h"
// #include "decomp.h"
// Long include path due to dependency of misc library on LegoOmni
// #include "lego/legoomni/include/actions/actionsfwd.h"
// #include "lego1_export.h"
// #include "mxtypes.h"

public static native @Cast("MxBool") boolean g_isWorldActive(); public static native void g_isWorldActive(boolean setter);

public static native LegoOmni Lego();
public static native LegoSoundManager SoundManager();
public static native LegoVideoManager VideoManager();
public static native MxBackgroundAudioManager BackgroundAudioManager();
public static native LegoInputManager InputManager();
public static native LegoControlManager ControlManager();
public static native LegoGameState GameState();
public static native LegoAnimationManager AnimationManager();
public static native LegoNavController NavController();
public static native LegoPathActor UserActor();
public static native LegoWorld CurrentWorld();
public static native LegoCharacterManager CharacterManager();
public static native ViewManager GetViewManager();
public static native LegoPlantManager PlantManager();
public static native LegoBuildingManager BuildingManager();
public static native LegoTextureContainer TextureContainer();
public static native ViewLODListManager GetViewLODListManager();
public static native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
public static native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
public static native LegoROI FindROI(String p_name);
public static native void SetROIVisible(@Cast("const char*") BytePointer p_name, @Cast("MxBool") boolean p_visible);
public static native void SetROIVisible(String p_name, @Cast("MxBool") boolean p_visible);
public static native void SetUserActor(LegoPathActor p_userActor);
public static native @Cast("MxResult") int StartActionIfInitialized(@ByRef MxDSAction p_dsAction);
public static native void DeleteAction();
public static native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
public static native @ByRef MxDSAction GetCurrentAction();
public static native void SetCurrentWorld(LegoWorld p_world);
public static native MxTransitionManager TransitionManager();

public static native void SetIsWorldActive(@Cast("MxBool") boolean p_isWorldActive);
public static native void DeleteObjects(MxAtomId p_id, @Cast("MxS32") int p_first, @Cast("MxS32") int p_last);

// #endif // MISC_H


// Parsed from miniwin/bitflags.h

// #pragma once

// #include <type_traits>

// Enable bitwise ops only for enum classes with the ENABLE_BITMASK_OPERATORS trait

// #define ENABLE_BITMASK_OPERATORS(x)
// 	template <>
// 	struct EnableBitMaskOperators<x> {
// 		static const bool enable = true;
// 	};


// Parsed from miniwin/d3d.h

// #pragma once

// #include "miniwin/ddraw.h"

// --- GUIDs ---


// --- Enums ---
// #define DDBD_8 DDBitDepths::BPP_8
// #define DDBD_16 DDBitDepths::BPP_16
// #define DDBD_24 DDBitDepths::BPP_24
// #define DDBD_32 DDBitDepths::BPP_32
public enum DDBitDepths {
	BPP_8(1 << 11),
	BPP_16(1 << 10),
	BPP_24(1 << 9),
	BPP_32(1 << 8);

    public final int value;
    private DDBitDepths(int v) { this.value = v; }
    private DDBitDepths(DDBitDepths e) { this.value = e.value; }
    public DDBitDepths intern() { for (DDBitDepths e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DDD_DEVICEZBUFFERBITDEPTH D3DDeviceDescFlags::DEVICEZBUFFERBITDEPTH
public enum D3DDeviceDescFlags {
	DEVICEZBUFFERBITDEPTH(1 << 8);

    public final int value;
    private D3DDeviceDescFlags(int v) { this.value = v; }
    private D3DDeviceDescFlags(D3DDeviceDescFlags e) { this.value = e.value; }
    public D3DDeviceDescFlags intern() { for (D3DDeviceDescFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DPSHADECAPS_ALPHAFLATBLEND D3DPShadeCaps::ALPHAFLATBLEND
public enum D3DPShadeCaps {
	ALPHAFLATBLEND(1 << 12);

    public final int value;
    private D3DPShadeCaps(int v) { this.value = v; }
    private D3DPShadeCaps(D3DPShadeCaps e) { this.value = e.value; }
    public D3DPShadeCaps intern() { for (D3DPShadeCaps e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DPTEXTURECAPS_PERSPECTIVE D3DPTextureCaps::PERSPECTIVE
public enum D3DPTextureCaps {
	PERSPECTIVE(1 << 0);

    public final int value;
    private D3DPTextureCaps(int v) { this.value = v; }
    private D3DPTextureCaps(D3DPTextureCaps e) { this.value = e.value; }
    public D3DPTextureCaps intern() { for (D3DPTextureCaps e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DPTFILTERCAPS_LINEAR D3DPTextureFilterCaps::LINEAR
public enum D3DPTextureFilterCaps {
	LINEAR(1 << 1);

    public final int value;
    private D3DPTextureFilterCaps(int v) { this.value = v; }
    private D3DPTextureFilterCaps(D3DPTextureFilterCaps e) { this.value = e.value; }
    public D3DPTextureFilterCaps intern() { for (D3DPTextureFilterCaps e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DCOLOR_NONE D3DCOLORMODEL::NONE
// #define D3DCOLOR_RGB D3DCOLORMODEL::RGB
// #define D3DCOLOR_MONO D3DCOLORMODEL::MONO
public enum D3DCOLORMODEL {
	NONE(0),
	RGB(1),
	MONO(2);

    public final int value;
    private D3DCOLORMODEL(int v) { this.value = v; }
    private D3DCOLORMODEL(D3DCOLORMODEL e) { this.value = e.value; }
    public D3DCOLORMODEL intern() { for (D3DCOLORMODEL e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// --- Structs ---
public static class D3DVECTOR extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DVECTOR() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DVECTOR(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DVECTOR(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DVECTOR position(long position) {
        return (D3DVECTOR)super.position(position);
    }
    @Override public D3DVECTOR getPointer(long i) {
        return new D3DVECTOR((Pointer)this).offsetAddress(i);
    }

	public native float x(); public native D3DVECTOR x(float setter);
	public native float y(); public native D3DVECTOR y(float setter);
	public native float z(); public native D3DVECTOR z(float setter);
}

public static class D3DDEVICEDESC extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DDEVICEDESC() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DDEVICEDESC(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DDEVICEDESC(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DDEVICEDESC position(long position) {
        return (D3DDEVICEDESC)super.position(position);
    }
    @Override public D3DDEVICEDESC getPointer(long i) {
        return new D3DDEVICEDESC((Pointer)this).offsetAddress(i);
    }

	public native D3DDeviceDescFlags dwFlags(); public native D3DDEVICEDESC dwFlags(D3DDeviceDescFlags setter);
	public native DDBitDepths dwDeviceZBufferBitDepth(); public native D3DDEVICEDESC dwDeviceZBufferBitDepth(DDBitDepths setter);
	public native D3DCOLORMODEL dcmColorModel(); public native D3DDEVICEDESC dcmColorModel(D3DCOLORMODEL setter); // D3DCOLOR_* Bit flag, but Isle think it's an enum
	public native DDBitDepths dwDeviceRenderBitDepth(); public native D3DDEVICEDESC dwDeviceRenderBitDepth(DDBitDepths setter);
		@Name("dpcTriCaps.dwShadeCaps") public native D3DPShadeCaps dpcTriCaps_dwShadeCaps(); public native D3DDEVICEDESC dpcTriCaps_dwShadeCaps(D3DPShadeCaps setter);
		@Name("dpcTriCaps.dwTextureCaps") public native D3DPTextureCaps dpcTriCaps_dwTextureCaps(); public native D3DDEVICEDESC dpcTriCaps_dwTextureCaps(D3DPTextureCaps setter);
		@Name("dpcTriCaps.dwTextureFilterCaps") public native D3DPTextureFilterCaps dpcTriCaps_dwTextureFilterCaps(); public native D3DDEVICEDESC dpcTriCaps_dwTextureFilterCaps(D3DPTextureFilterCaps setter);
}

@Opaque public static class IDirect3DDevice2 extends IUnknown {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DDevice2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DDevice2(Pointer p) { super(p); }
}

public static class LPD3DENUMDEVICESCALLBACK extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LPD3DENUMDEVICESCALLBACK(Pointer p) { super(p); }
    protected LPD3DENUMDEVICESCALLBACK() { allocate(); }
    private native void allocate();
    public native @Cast("HRESULT") long call(@Cast("GUID*") Pointer arg0, @Cast("LPSTR") String arg1, @Cast("LPSTR") String arg2, @Cast("LPD3DDEVICEDESC") D3DDEVICEDESC arg3, @Cast("LPD3DDEVICEDESC") D3DDEVICEDESC arg4, Pointer arg5);
}
public static class IDirect3D2 extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3D2(Pointer p) { super(p); }

	public native @Cast("HRESULT") long CreateDevice(
			@Const @ByRef GUID guid,
			IDirectDrawSurface pBackBuffer,
			@Cast("IDirect3DDevice2**") PointerPointer ppDirect3DDevice
		);
	public native @Cast("HRESULT") long CreateDevice(
			@Const @ByRef GUID guid,
			IDirectDrawSurface pBackBuffer,
			@ByPtrPtr IDirect3DDevice2 ppDirect3DDevice
		);
	public native @Cast("HRESULT") long EnumDevices(LPD3DENUMDEVICESCALLBACK cb, Pointer ctx);
}


// Parsed from miniwin/d3drm.h

// #pragma once

// #include "miniwin/d3d.h"

// #include <stdlib.h> // abort // FIXME: remove

// --- Defines and Macros ---
public static native @MemberGetter int D3DRM_OK();
public static final int D3DRM_OK = D3DRM_OK();
public static final int MAXSHORT = ((short) 0x7fff);
// #define SUCCEEDED(hr) ((hr) >= D3DRM_OK)
public static native @MemberGetter long D3DRMERR_NOTFOUND();
public static final long D3DRMERR_NOTFOUND = D3DRMERR_NOTFOUND();

// --- Typedefs ---
@Namespace @Name("void") @Opaque public static class LPD3DRM_APPDATA extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LPD3DRM_APPDATA() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LPD3DRM_APPDATA(Pointer p) { super(p); }
}
public static class D3DRMOBJECTCALLBACK extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    D3DRMOBJECTCALLBACK(Pointer p) { super(p); }
    protected D3DRMOBJECTCALLBACK() { allocate(); }
    private native void allocate();
    public native void call(IDirect3DRMObject obj, Pointer arg);
}

// --- Enums ---
// #define D3DRMCOMBINE_REPLACE D3DRMCOMBINETYPE::REPLACE
public enum D3DRMCOMBINETYPE {
	REPLACE(0);

    public final int value;
    private D3DRMCOMBINETYPE(int v) { this.value = v; }
    private D3DRMCOMBINETYPE(D3DRMCOMBINETYPE e) { this.value = e.value; }
    public D3DRMCOMBINETYPE intern() { for (D3DRMCOMBINETYPE e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMPALETTE_READONLY D3DRMPALETTEFLAGS::READONLY
public enum D3DRMPALETTEFLAGS {
	READONLY(1);

    public final int value;
    private D3DRMPALETTEFLAGS(int v) { this.value = v; }
    private D3DRMPALETTEFLAGS(D3DRMPALETTEFLAGS e) { this.value = e.value; }
    public D3DRMPALETTEFLAGS intern() { for (D3DRMPALETTEFLAGS e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMTEXTURE_LINEAR D3DRMTEXTUREQUALITY::LINEAR
public enum D3DRMTEXTUREQUALITY {
	LINEAR(1);

    public final int value;
    private D3DRMTEXTUREQUALITY(int v) { this.value = v; }
    private D3DRMTEXTUREQUALITY(D3DRMTEXTUREQUALITY e) { this.value = e.value; }
    public D3DRMTEXTUREQUALITY intern() { for (D3DRMTEXTUREQUALITY e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMRENDERMODE_BLENDEDTRANSPARENCY D3DRMRENDERMODE::BLENDEDTRANSPARENCY
public enum D3DRMRENDERMODE {
	BLENDEDTRANSPARENCY(1);

    public final int value;
    private D3DRMRENDERMODE(int v) { this.value = v; }
    private D3DRMRENDERMODE(D3DRMRENDERMODE e) { this.value = e.value; }
    public D3DRMRENDERMODE intern() { for (D3DRMRENDERMODE e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMMAP_NONE D3DRMMAPPING::NONE
// #define D3DRMMAP_PERSPCORRECT D3DRMMAPPING::PERSPCORRECT
public enum D3DRMMAPPING {
	NONE(0),
	PERSPCORRECT(4);

    public final int value;
    private D3DRMMAPPING(int v) { this.value = v; }
    private D3DRMMAPPING(D3DRMMAPPING e) { this.value = e.value; }
    public D3DRMMAPPING intern() { for (D3DRMMAPPING e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMLIGHT_AMBIENT D3DRMLIGHTTYPE::AMBIENT
// #define D3DRMLIGHT_POINT D3DRMLIGHTTYPE::POINT
// #define D3DRMLIGHT_SPOT D3DRMLIGHTTYPE::SPOT
// #define D3DRMLIGHT_DIRECTIONAL D3DRMLIGHTTYPE::DIRECTIONAL
// #define D3DRMLIGHT_PARALLELPOINT D3DRMLIGHTTYPE::PARALLELPOINT
public enum D3DRMLIGHTTYPE {
	AMBIENT(0),
	POINT(1),
	SPOT(2),
	DIRECTIONAL(3),
	PARALLELPOINT(4);

    public final int value;
    private D3DRMLIGHTTYPE(int v) { this.value = v; }
    private D3DRMLIGHTTYPE(D3DRMLIGHTTYPE e) { this.value = e.value; }
    public D3DRMLIGHTTYPE intern() { for (D3DRMLIGHTTYPE e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMMATERIAL_FROMMESH D3DRMMATERIALMODE::FROMMESH
// #define D3DRMMATERIAL_FROMPARENT D3DRMMATERIALMODE::FROMPARENT
// #define D3DRMMATERIAL_FROMFRAME D3DRMMATERIALMODE::FROMFRAME
public enum D3DRMMATERIALMODE {
	FROMMESH(0),
	FROMPARENT(1),
	FROMFRAME(2);

    public final int value;
    private D3DRMMATERIALMODE(int v) { this.value = v; }
    private D3DRMMATERIALMODE(D3DRMMATERIALMODE e) { this.value = e.value; }
    public D3DRMMATERIALMODE intern() { for (D3DRMMATERIALMODE e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMRENDER_WIREFRAME D3DRMRENDERQUALITY::WIREFRAME
// #define D3DRMRENDER_UNLITFLAT D3DRMRENDERQUALITY::UNLITFLAT
// #define D3DRMRENDER_FLAT D3DRMRENDERQUALITY::FLAT
// #define D3DRMRENDER_GOURAUD D3DRMRENDERQUALITY::GOURAUD
// #define D3DRMRENDER_PHONG D3DRMRENDERQUALITY::PHONG

public enum D3DRMRENDERQUALITY {
	WIREFRAME(64),
	UNLITFLAT(128),
	FLAT(136),
	GOURAUD(137),
	PHONG(138);

    public final int value;
    private D3DRMRENDERQUALITY(int v) { this.value = v; }
    private D3DRMRENDERQUALITY(D3DRMRENDERQUALITY e) { this.value = e.value; }
    public D3DRMRENDERQUALITY intern() { for (D3DRMRENDERQUALITY e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define D3DRMPROJECT_PERSPECTIVE D3DRMPROJECTIONTYPE::PERSPECTIVE
// #define D3DRMPROJECT_ORTHOGRAPHIC D3DRMPROJECTIONTYPE::ORTHOGRAPHIC
public enum D3DRMPROJECTIONTYPE {
	PERSPECTIVE(0),
	ORTHOGRAPHIC(1);

    public final int value;
    private D3DRMPROJECTIONTYPE(int v) { this.value = v; }
    private D3DRMPROJECTIONTYPE(D3DRMPROJECTIONTYPE e) { this.value = e.value; }
    public D3DRMPROJECTIONTYPE intern() { for (D3DRMPROJECTIONTYPE e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// --- GUIDs ---








// --- Structs ---
public static class D3DRMVECTOR4D extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMVECTOR4D() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMVECTOR4D(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMVECTOR4D(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMVECTOR4D position(long position) {
        return (D3DRMVECTOR4D)super.position(position);
    }
    @Override public D3DRMVECTOR4D getPointer(long i) {
        return new D3DRMVECTOR4D((Pointer)this).offsetAddress(i);
    }

	public native float x(); public native D3DRMVECTOR4D x(float setter);
	public native float y(); public native D3DRMVECTOR4D y(float setter);
	public native float z(); public native D3DRMVECTOR4D z(float setter);
	public native float w(); public native D3DRMVECTOR4D w(float setter);
}

public static class D3DRMPALETTEENTRY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMPALETTEENTRY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMPALETTEENTRY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMPALETTEENTRY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMPALETTEENTRY position(long position) {
        return (D3DRMPALETTEENTRY)super.position(position);
    }
    @Override public D3DRMPALETTEENTRY getPointer(long i) {
        return new D3DRMPALETTEENTRY((Pointer)this).offsetAddress(i);
    }

	public native @Cast("unsigned char") byte red(); public native D3DRMPALETTEENTRY red(byte setter);
	public native @Cast("unsigned char") byte green(); public native D3DRMPALETTEENTRY green(byte setter);
	public native @Cast("unsigned char") byte blue(); public native D3DRMPALETTEENTRY blue(byte setter);
	public native D3DRMPALETTEFLAGS flags(); public native D3DRMPALETTEENTRY flags(D3DRMPALETTEFLAGS setter);
}

public static class D3DRMIMAGE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMIMAGE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMIMAGE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMIMAGE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMIMAGE position(long position) {
        return (D3DRMIMAGE)super.position(position);
    }
    @Override public D3DRMIMAGE getPointer(long i) {
        return new D3DRMIMAGE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int width(); public native D3DRMIMAGE width(int setter);
	public native @Cast("DWORD") int height(); public native D3DRMIMAGE height(int setter);
	public native @Cast("DWORD") int depth(); public native D3DRMIMAGE depth(int setter);
	public native @Cast("DWORD") int bytes_per_line(); public native D3DRMIMAGE bytes_per_line(int setter);
	public native @Cast("DWORD") int red_mask(); public native D3DRMIMAGE red_mask(int setter);
	public native @Cast("DWORD") int green_mask(); public native D3DRMIMAGE green_mask(int setter);
	public native @Cast("DWORD") int blue_mask(); public native D3DRMIMAGE blue_mask(int setter);
	public native @Cast("DWORD") int alpha_mask(); public native D3DRMIMAGE alpha_mask(int setter);
	public native @Cast("DWORD") int palette_size(); public native D3DRMIMAGE palette_size(int setter);
	public native D3DRMPALETTEENTRY palette(); public native D3DRMIMAGE palette(D3DRMPALETTEENTRY setter);
	public native Pointer buffer1(); public native D3DRMIMAGE buffer1(Pointer setter);
	public native Pointer buffer2(); public native D3DRMIMAGE buffer2(Pointer setter);
	public native Pointer data(); public native D3DRMIMAGE data(Pointer setter);
	public native int rgb(); public native D3DRMIMAGE rgb(int setter);
	public native int aspectx(); public native D3DRMIMAGE aspectx(int setter);
	public native int aspecty(); public native D3DRMIMAGE aspecty(int setter);
	public native @Cast("DWORD") int format(); public native D3DRMIMAGE format(int setter);
}

public static class D3DRMBOX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMBOX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMBOX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMBOX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMBOX position(long position) {
        return (D3DRMBOX)super.position(position);
    }
    @Override public D3DRMBOX getPointer(long i) {
        return new D3DRMBOX((Pointer)this).offsetAddress(i);
    }

	public native @ByRef D3DVECTOR min(); public native D3DRMBOX min(D3DVECTOR setter);
	public native @ByRef D3DVECTOR max(); public native D3DRMBOX max(D3DVECTOR setter);
}

public static class TexCoord extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TexCoord() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TexCoord(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TexCoord(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TexCoord position(long position) {
        return (TexCoord)super.position(position);
    }
    @Override public TexCoord getPointer(long i) {
        return new TexCoord((Pointer)this).offsetAddress(i);
    }

	public native float u(); public native TexCoord u(float setter);
	public native float v(); public native TexCoord v(float setter);
}

public static class D3DRMVERTEX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMVERTEX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMVERTEX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMVERTEX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMVERTEX position(long position) {
        return (D3DRMVERTEX)super.position(position);
    }
    @Override public D3DRMVERTEX getPointer(long i) {
        return new D3DRMVERTEX((Pointer)this).offsetAddress(i);
    }

	public native @ByRef @Name("position") D3DVECTOR _position(); public native D3DRMVERTEX _position(D3DVECTOR setter);
	public native @ByRef D3DVECTOR normal(); public native D3DRMVERTEX normal(D3DVECTOR setter);
		public native @ByRef TexCoord texCoord(); public native D3DRMVERTEX texCoord(TexCoord setter);
			public native @Cast("D3DVALUE") float tu(); public native D3DRMVERTEX tu(float setter);
			public native @Cast("D3DVALUE") float tv(); public native D3DRMVERTEX tv(float setter);
}

public static class IDirect3DRMObject extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMObject(Pointer p) { super(p); }

	public native @Cast("HRESULT") long AddDestroyCallback(D3DRMOBJECTCALLBACK callback, Pointer arg);
	public native @Cast("HRESULT") long DeleteDestroyCallback(D3DRMOBJECTCALLBACK callback, Pointer arg);
	public native @Cast("HRESULT") long SetAppData(LPD3DRM_APPDATA appData);
	public native Pointer GetAppData();
	public native @Cast("HRESULT") long SetName(@Cast("const char*") BytePointer name);
	public native @Cast("HRESULT") long SetName(String name);
	public native @Cast("HRESULT") long GetName(@Cast("DWORD*") int size, @Cast("char*") BytePointer name);
	public native @Cast("HRESULT") long GetName(@Cast("DWORD*") int size, @Cast("char*") ByteBuffer name);
	public native @Cast("HRESULT") long GetName(@Cast("DWORD*") int size, @Cast("char*") byte[] name);
}

@Opaque public static class IDirect3DRMVisual extends IDirect3DRMObject {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRMVisual() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMVisual(Pointer p) { super(p); }
}

public static class IDirect3DRMTexture extends IDirect3DRMVisual {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMTexture(Pointer p) { super(p); }

	public native @Cast("HRESULT") long Changed(@Cast("BOOL") boolean pixels, @Cast("BOOL") boolean palette);
}

@Opaque public static class IDirect3DRMTexture2 extends IDirect3DRMTexture {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRMTexture2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMTexture2(Pointer p) { super(p); }
}

public static class IDirect3DRMMaterial extends IDirect3DRMObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMMaterial(Pointer p) { super(p); }

	public native @Cast("D3DVALUE") float GetPower();
}

public static class IDirect3DRMMesh extends IDirect3DRMVisual {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMMesh(Pointer p) { super(p); }

	public native @Cast("HRESULT") long Clone(int flags, @ByVal GUID iid, @Cast("void**") PointerPointer object);
	public native @Cast("HRESULT") long Clone(int flags, @ByVal GUID iid, @Cast("void**") @ByPtrPtr Pointer object);
	public native @Cast("HRESULT") long GetBox(D3DRMBOX box);
	public native @Cast("HRESULT") long AddGroup(
			@Cast("unsigned int") int vertexCount,
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexPerFace,
			@Cast("unsigned int*") IntPointer faceBuffer,
			@Cast("D3DRMGROUPINDEX*") int groupIndex
		);
	public native @Cast("HRESULT") long AddGroup(
			@Cast("unsigned int") int vertexCount,
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexPerFace,
			@Cast("unsigned int*") IntBuffer faceBuffer,
			@Cast("D3DRMGROUPINDEX*") int groupIndex
		);
	public native @Cast("HRESULT") long AddGroup(
			@Cast("unsigned int") int vertexCount,
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexPerFace,
			@Cast("unsigned int*") int[] faceBuffer,
			@Cast("D3DRMGROUPINDEX*") int groupIndex
		);
	public native @Cast("HRESULT") long GetGroup(
			@Cast("D3DRMGROUPINDEX") int groupIndex,
			@Cast("unsigned int*") IntPointer vertexCount,
			@Cast("unsigned int*") IntPointer faceCount,
			@Cast("unsigned int*") IntPointer vertexPerFace,
			@Cast("DWORD*") int indexCount,
			@Cast("unsigned int*") IntPointer indices
		);
	public native @Cast("HRESULT") long GetGroup(
			@Cast("D3DRMGROUPINDEX") int groupIndex,
			@Cast("unsigned int*") IntBuffer vertexCount,
			@Cast("unsigned int*") IntBuffer faceCount,
			@Cast("unsigned int*") IntBuffer vertexPerFace,
			@Cast("DWORD*") int indexCount,
			@Cast("unsigned int*") IntBuffer indices
		);
	public native @Cast("HRESULT") long GetGroup(
			@Cast("D3DRMGROUPINDEX") int groupIndex,
			@Cast("unsigned int*") int[] vertexCount,
			@Cast("unsigned int*") int[] faceCount,
			@Cast("unsigned int*") int[] vertexPerFace,
			@Cast("DWORD*") int indexCount,
			@Cast("unsigned int*") int[] indices
		);
	public native @Cast("DWORD") int GetGroupCount();
	public native @Cast("HRESULT") long SetGroupColor(@Cast("D3DRMGROUPINDEX") int groupIndex, @Cast("D3DCOLOR") int color);
	public native @Cast("HRESULT") long SetGroupColorRGB(@Cast("D3DRMGROUPINDEX") int groupIndex, float r, float g, float b);
	public native @Cast("HRESULT") long SetGroupTexture(@Cast("D3DRMGROUPINDEX") int groupIndex, IDirect3DRMTexture texture);
	public native @Cast("HRESULT") long SetGroupMaterial(@Cast("D3DRMGROUPINDEX") int groupIndex, IDirect3DRMMaterial material);
	public native @Cast("HRESULT") long SetGroupMapping(@Cast("D3DRMGROUPINDEX") int groupIndex, D3DRMMAPPING mapping);
	public native @Cast("HRESULT") long SetGroupQuality(@Cast("D3DRMGROUPINDEX") int groupIndex, D3DRMRENDERQUALITY quality);
	public native @Cast("HRESULT") long SetVertices(@Cast("D3DRMGROUPINDEX") int groupIndex, int offset, int count, D3DRMVERTEX vertices);
	public native @Cast("HRESULT") long GetGroupTexture(@Cast("D3DRMGROUPINDEX") int groupIndex, @Cast("LPDIRECT3DRMTEXTURE*") PointerPointer texture);
	public native D3DRMMAPPING GetGroupMapping(@Cast("D3DRMGROUPINDEX") int groupIndex);
	public native @Cast("HRESULT") long GetGroupMaterial(@Cast("D3DRMGROUPINDEX") int groupIndex, @Cast("LPDIRECT3DRMMATERIAL*") PointerPointer material);
	public native D3DRMRENDERQUALITY GetGroupQuality(@Cast("D3DRMGROUPINDEX") int groupIndex);
	public native @Cast("D3DCOLOR") int GetGroupColor(@Cast("D3DRMGROUPINDEX") int index);
	public native @Cast("HRESULT") long GetVertices(@Cast("D3DRMGROUPINDEX") int groupIndex, int startIndex, int count, D3DRMVERTEX vertices);
}

public static class IDirect3DRMLight extends IDirect3DRMObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMLight(Pointer p) { super(p); }

	public native @Cast("HRESULT") long SetColorRGB(float r, float g, float b);
	public native D3DRMLIGHTTYPE GetType();
	public native @Cast("D3DCOLOR") int GetColor();
}

public static class IDirect3DRMArray extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMArray(Pointer p) { super(p); }

	public native @Cast("DWORD") int GetSize();
}

public static class IDirect3DRMLightArray extends IDirect3DRMArray {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMLightArray(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @Cast("IDirect3DRMLight**") PointerPointer out);
	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @ByPtrPtr IDirect3DRMLight out);
	public native @Cast("HRESULT") long AddElement(IDirect3DRMLight in);
	public native @Cast("HRESULT") long DeleteElement(IDirect3DRMLight element);
}

public static class IDirect3DRMVisualArray extends IDirect3DRMArray {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMVisualArray(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @Cast("IDirect3DRMVisual**") PointerPointer out);
	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @ByPtrPtr IDirect3DRMVisual out);
	public native @Cast("HRESULT") long AddElement(IDirect3DRMVisual in);
	public native @Cast("HRESULT") long DeleteElement(IDirect3DRMVisual element);
}
public static class IDirect3DRMFrame extends IDirect3DRMVisual {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMFrame(Pointer p) { super(p); }

	public native @Cast("HRESULT") long AddChild(IDirect3DRMFrame child);
	public native @Cast("HRESULT") long DeleteChild(IDirect3DRMFrame child);
	public native @Cast("HRESULT") long SetSceneBackgroundRGB(float r, float g, float b);
	public native @Cast("HRESULT") long AddLight(IDirect3DRMLight light);
	public native @Cast("HRESULT") long GetLights(@Cast("IDirect3DRMLightArray**") PointerPointer lightArray);
	public native @Cast("HRESULT") long GetLights(@ByPtrPtr IDirect3DRMLightArray lightArray);
	public native @Cast("HRESULT") long GetPosition(IDirect3DRMFrame reference, D3DVECTOR _position);
	public native @Cast("HRESULT") long AddVisual(IDirect3DRMVisual visual);
	public native @Cast("HRESULT") long DeleteVisual(IDirect3DRMVisual visual);
	public native @Cast("HRESULT") long GetVisuals(@Cast("IDirect3DRMVisualArray**") PointerPointer visuals);
	public native @Cast("HRESULT") long GetVisuals(@ByPtrPtr IDirect3DRMVisualArray visuals);
	public native @Cast("HRESULT") long SetTexture(IDirect3DRMTexture texture);
	public native @Cast("HRESULT") long GetTexture(@Cast("IDirect3DRMTexture**") PointerPointer texture);
	public native @Cast("HRESULT") long GetTexture(@ByPtrPtr IDirect3DRMTexture texture);
	public native @Cast("HRESULT") long SetColor(float r, float g, float b, float a);
	public native @Cast("HRESULT") long SetColor(@Cast("D3DCOLOR") int arg0);
	public native @Cast("HRESULT") long SetColorRGB(float r, float g, float b);
	public native @Cast("HRESULT") long SetMaterialMode(D3DRMMATERIALMODE mode);
	public native @Cast("HRESULT") long GetChildren(@Cast("IDirect3DRMFrameArray**") PointerPointer children);
	public native @Cast("HRESULT") long GetChildren(@ByPtrPtr IDirect3DRMFrameArray children);
}

public static class IDirect3DRMFrameArray extends IDirect3DRMArray {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMFrameArray(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @Cast("IDirect3DRMFrame**") PointerPointer out);
	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @ByPtrPtr IDirect3DRMFrame out);
	public native @Cast("HRESULT") long AddElement(IDirect3DRMFrame in);
	public native @Cast("HRESULT") long DeleteElement(IDirect3DRMFrame element);
}

@Opaque public static class IDirect3DRMFrame2 extends IDirect3DRMFrame {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRMFrame2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMFrame2(Pointer p) { super(p); }
}

public static class D3DRMPICKDESC extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public D3DRMPICKDESC() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public D3DRMPICKDESC(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public D3DRMPICKDESC(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public D3DRMPICKDESC position(long position) {
        return (D3DRMPICKDESC)super.position(position);
    }
    @Override public D3DRMPICKDESC getPointer(long i) {
        return new D3DRMPICKDESC((Pointer)this).offsetAddress(i);
    }

	public native float dist(); public native D3DRMPICKDESC dist(float setter);
}

public static class IDirect3DRMPickedArray extends IDirect3DRMArray {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMPickedArray(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetPick(
			@Cast("DWORD") int index,
			@Cast("IDirect3DRMVisual**") PointerPointer visual,
			@Cast("IDirect3DRMFrameArray**") PointerPointer frameArray,
			D3DRMPICKDESC desc
		);
	public native @Cast("HRESULT") long GetPick(
			@Cast("DWORD") int index,
			@ByPtrPtr IDirect3DRMVisual visual,
			@ByPtrPtr IDirect3DRMFrameArray frameArray,
			D3DRMPICKDESC desc
		);
}

public static class IDirect3DRMViewport extends IDirect3DRMObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMViewport(Pointer p) { super(p); }

	public native @Cast("HRESULT") long Render(IDirect3DRMFrame group);
	public native @Cast("HRESULT") long ForceUpdate(int x, int y, int w, int h);
	public native @Cast("HRESULT") long Clear();
	public native @Cast("HRESULT") long SetCamera(IDirect3DRMFrame camera);
	public native @Cast("HRESULT") long GetCamera(@Cast("IDirect3DRMFrame**") PointerPointer camera);
	public native @Cast("HRESULT") long GetCamera(@ByPtrPtr IDirect3DRMFrame camera);
	public native @Cast("HRESULT") long SetProjection(D3DRMPROJECTIONTYPE type);
	public native D3DRMPROJECTIONTYPE GetProjection();
	public native @Cast("HRESULT") long SetFront(@Cast("D3DVALUE") float z);
	public native @Cast("D3DVALUE") float GetFront();
	public native @Cast("HRESULT") long SetBack(@Cast("D3DVALUE") float z);
	public native @Cast("D3DVALUE") float GetBack();
	public native @Cast("HRESULT") long SetField(@Cast("D3DVALUE") float field);
	public native @Cast("D3DVALUE") float GetField();
	public native @Cast("DWORD") int GetWidth();
	public native @Cast("DWORD") int GetHeight();
	public native @Cast("HRESULT") long Transform(D3DRMVECTOR4D screen, D3DVECTOR world);
	public native @Cast("HRESULT") long InverseTransform(D3DVECTOR world, D3DRMVECTOR4D screen);
	public native @Cast("HRESULT") long Pick(float x, float y, @Cast("LPDIRECT3DRMPICKEDARRAY*") PointerPointer pickedArray);
}

public static class IDirect3DRMViewportArray extends IDirect3DRMArray {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMViewportArray(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @Cast("IDirect3DRMViewport**") PointerPointer out);
	public native @Cast("HRESULT") long GetElement(@Cast("DWORD") int index, @ByPtrPtr IDirect3DRMViewport out);
	public native @Cast("HRESULT") long AddElement(IDirect3DRMViewport in);
	public native @Cast("HRESULT") long DeleteElement(IDirect3DRMViewport element);
}

public static class IDirect3DRMWinDevice extends IDirect3DRMObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMWinDevice(Pointer p) { super(p); }
    /** Downcast constructor. */
    public IDirect3DRMWinDevice(IDirect3DRMObject pointer) { super((Pointer)null); allocate(pointer); }
    @Namespace private native @Name("dynamic_cast<IDirect3DRMWinDevice*>") void allocate(IDirect3DRMObject pointer);
    public IDirect3DRMObject asIDirect3DRMObject() { return asIDirect3DRMObject(this); }
    @Namespace public static native @Name("static_cast<IDirect3DRMObject*>") IDirect3DRMObject asIDirect3DRMObject(IDirect3DRMWinDevice pointer);

	public native @Cast("HRESULT") long Activate();
	public native @Cast("HRESULT") long Paint();
	public native void HandleActivate(@Cast("WORD") short wParam);
	public native void HandlePaint(Pointer p_dc);
}

public static class IDirect3DRMDevice extends IDirect3DRMObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMDevice(Pointer p) { super(p); }
    /** Downcast constructor. */
    public IDirect3DRMDevice(IDirect3DRMObject pointer) { super((Pointer)null); allocate(pointer); }
    @Namespace private native @Name("dynamic_cast<IDirect3DRMDevice*>") void allocate(IDirect3DRMObject pointer);
    public IDirect3DRMObject asIDirect3DRMObject() { return asIDirect3DRMObject(this); }
    @Namespace public static native @Name("static_cast<IDirect3DRMObject*>") IDirect3DRMObject asIDirect3DRMObject(IDirect3DRMDevice pointer);

	public native @Cast("DWORD") int GetWidth();
	public native @Cast("DWORD") int GetHeight();
	public native @Cast("HRESULT") long SetBufferCount(int count);
	public native @Cast("DWORD") int GetBufferCount();
	public native @Cast("HRESULT") long SetShades(@Cast("DWORD") int shadeCount);
	public native @Cast("DWORD") int GetShades();
	public native @Cast("HRESULT") long SetQuality(D3DRMRENDERQUALITY quality);
	public native D3DRMRENDERQUALITY GetQuality();
	public native @Cast("HRESULT") long SetDither(@Cast("BOOL") boolean dither);
	public native @Cast("BOOL") boolean GetDither();
	public native @Cast("HRESULT") long SetTextureQuality(D3DRMTEXTUREQUALITY quality);
	public native D3DRMTEXTUREQUALITY GetTextureQuality();
	public native @Cast("HRESULT") long SetRenderMode(D3DRMRENDERMODE mode);
	public native D3DRMRENDERMODE GetRenderMode();
	public native @Cast("HRESULT") long Update();
	public native @Cast("HRESULT") long AddViewport(IDirect3DRMViewport viewport);
	public native @Cast("HRESULT") long GetViewports(@Cast("IDirect3DRMViewportArray**") PointerPointer ppViewportArray);
	public native @Cast("HRESULT") long GetViewports(@ByPtrPtr IDirect3DRMViewportArray ppViewportArray);
}

@Opaque public static class IDirect3DRMDevice2 extends IDirect3DRMDevice {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRMDevice2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMDevice2(Pointer p) { super(p); }
}

public static class IDirect3DRM extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRM(Pointer p) { super(p); }

	public native @Cast("HRESULT") long CreateDeviceFromD3D(
			@Const IDirect3D2 d3d,
			IDirect3DDevice2 d3dDevice,
			@Cast("IDirect3DRMDevice2**") PointerPointer outDevice
		);
	public native @Cast("HRESULT") long CreateDeviceFromD3D(
			@Const IDirect3D2 d3d,
			IDirect3DDevice2 d3dDevice,
			@ByPtrPtr IDirect3DRMDevice2 outDevice
		);
	public native @Cast("HRESULT") long CreateDeviceFromSurface(
			@Const GUID guid,
			IDirectDraw dd,
			IDirectDrawSurface surface,
			@Cast("IDirect3DRMDevice2**") PointerPointer outDevice
		);
	public native @Cast("HRESULT") long CreateDeviceFromSurface(
			@Const GUID guid,
			IDirectDraw dd,
			IDirectDrawSurface surface,
			@ByPtrPtr IDirect3DRMDevice2 outDevice
		);
	public native @Cast("HRESULT") long CreateTexture(D3DRMIMAGE image, @Cast("IDirect3DRMTexture2**") PointerPointer outTexture);
	public native @Cast("HRESULT") long CreateTexture(D3DRMIMAGE image, @ByPtrPtr IDirect3DRMTexture2 outTexture);
	public native @Cast("HRESULT") long CreateTextureFromSurface(@Cast("IDirectDrawSurface*") Pointer surface, @Cast("IDirect3DRMTexture2**") PointerPointer outTexture);
	public native @Cast("HRESULT") long CreateTextureFromSurface(@Cast("IDirectDrawSurface*") Pointer surface, @ByPtrPtr IDirect3DRMTexture2 outTexture);
	public native @Cast("HRESULT") long CreateMesh(@Cast("IDirect3DRMMesh**") PointerPointer outMesh);
	public native @Cast("HRESULT") long CreateMesh(@ByPtrPtr IDirect3DRMMesh outMesh);
	public native @Cast("HRESULT") long CreateMaterial(@Cast("D3DVAL") float power, @Cast("IDirect3DRMMaterial**") PointerPointer outMaterial);
	public native @Cast("HRESULT") long CreateMaterial(@Cast("D3DVAL") float power, @ByPtrPtr IDirect3DRMMaterial outMaterial);
	public native @Cast("HRESULT") long CreateLightRGB(D3DRMLIGHTTYPE type, @Cast("D3DVAL") float r, @Cast("D3DVAL") float g, @Cast("D3DVAL") float b, @Cast("IDirect3DRMLight**") PointerPointer outLight);
	public native @Cast("HRESULT") long CreateLightRGB(D3DRMLIGHTTYPE type, @Cast("D3DVAL") float r, @Cast("D3DVAL") float g, @Cast("D3DVAL") float b, @ByPtrPtr IDirect3DRMLight outLight);
	public native @Cast("HRESULT") long CreateFrame(IDirect3DRMFrame parent, @Cast("IDirect3DRMFrame2**") PointerPointer outFrame);
	public native @Cast("HRESULT") long CreateFrame(IDirect3DRMFrame parent, @ByPtrPtr IDirect3DRMFrame2 outFrame);
	public native @Cast("HRESULT") long CreateViewport(
			IDirect3DRMDevice2 device,
			IDirect3DRMFrame camera,
			int x,
			int y,
			int width,
			int height,
			@Cast("IDirect3DRMViewport**") PointerPointer outViewport
		);
	public native @Cast("HRESULT") long CreateViewport(
			IDirect3DRMDevice2 device,
			IDirect3DRMFrame camera,
			int x,
			int y,
			int width,
			int height,
			@ByPtrPtr IDirect3DRMViewport outViewport
		);
	public native @Cast("HRESULT") long SetDefaultTextureShades(@Cast("DWORD") int count);
	public native @Cast("HRESULT") long SetDefaultTextureColors(@Cast("DWORD") int count);
}

@Opaque public static class IDirect3DRM2 extends IDirect3DRM {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRM2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRM2(Pointer p) { super(p); }
}

// Functions
public static native @Cast("HRESULT") long Direct3DRMCreate(@Cast("IDirect3DRM**") PointerPointer direct3DRM);
public static native @Cast("HRESULT") long Direct3DRMCreate(@ByPtrPtr IDirect3DRM direct3DRM);

public static native @Cast("D3DCOLOR") int D3DRMCreateColorRGBA(@Cast("D3DVALUE") float red, @Cast("D3DVALUE") float green, @Cast("D3DVALUE") float blue, @Cast("D3DVALUE") float alpha);


// Parsed from miniwin/ddraw.h

// #pragma once

// #include "bitflags.h"
// #include "miniwin/windows.h"

// #define DDENUMRET_OK TRUE

public static native long MAKE_DDHRESULT(long code);

// #define DD_OK S_OK
// #define DDERR_ALREADYINITIALIZED MAKE_DDHRESULT(5)
// #define DDERR_CANNOTATTACHSURFACE MAKE_DDHRESULT(10)
// #define DDERR_CANNOTDETACHSURFACE MAKE_DDHRESULT(20)
// #define DDERR_CURRENTLYNOTAVAIL MAKE_DDHRESULT(40)
// #define DDERR_EXCEPTION MAKE_DDHRESULT(55)
// #define DDERR_GENERIC ((HRESULT) 0x80004005)
// #define DDERR_HEIGHTALIGN MAKE_DDHRESULT(90)
// #define DDERR_INCOMPATIBLEPRIMARY MAKE_DDHRESULT(95)
// #define DDERR_INVALIDCAPS MAKE_DDHRESULT(100)
// #define DDERR_INVALIDCLIPLIST MAKE_DDHRESULT(110)
// #define DDERR_INVALIDMODE MAKE_DDHRESULT(120)
// #define DDERR_INVALIDOBJECT MAKE_DDHRESULT(130)
// #define DDERR_INVALIDPARAMS ((HRESULT) 0x80070057)
// #define DDERR_INVALIDPIXELFORMAT MAKE_DDHRESULT(145)
// #define DDERR_INVALIDRECT MAKE_DDHRESULT(150)
// #define DDERR_LOCKEDSURFACES MAKE_DDHRESULT(160)
// #define DDERR_NO3D MAKE_DDHRESULT(170)
// #define DDERR_NOALPHAHW MAKE_DDHRESULT(180)
// #define DDERR_NOCLIPLIST MAKE_DDHRESULT(205)
// #define DDERR_NOCOLORCONVHW MAKE_DDHRESULT(210)
// #define DDERR_NOCOOPERATIVELEVELSET MAKE_DDHRESULT(212)
// #define DDERR_NOCOLORKEY MAKE_DDHRESULT(215)
// #define DDERR_NOCOLORKEYHW MAKE_DDHRESULT(220)
// #define DDERR_NOEXCLUSIVEMODE MAKE_DDHRESULT(225)
// #define DDERR_NOFLIPHW MAKE_DDHRESULT(230)
// #define DDERR_NOGDI MAKE_DDHRESULT(240)
// #define DDERR_NOMIRRORHW MAKE_DDHRESULT(250)
// #define DDERR_NOTFOUND MAKE_DDHRESULT(255)
// #define DDERR_NOOVERLAYHW MAKE_DDHRESULT(260)
// #define DDERR_NORASTEROPHW MAKE_DDHRESULT(280)
// #define DDERR_NOROTATIONHW MAKE_DDHRESULT(290)
// #define DDERR_NOSTRETCHHW MAKE_DDHRESULT(310)
// #define DDERR_NOT4BITCOLOR MAKE_DDHRESULT(316)
// #define DDERR_NOT4BITCOLORINDEX MAKE_DDHRESULT(317)
// #define DDERR_NOT8BITCOLOR MAKE_DDHRESULT(320)
// #define DDERR_NOTEXTUREHW MAKE_DDHRESULT(330)
// #define DDERR_NOVSYNCHW MAKE_DDHRESULT(335)
// #define DDERR_NOZBUFFERHW MAKE_DDHRESULT(340)
// #define DDERR_NOZOVERLAYHW MAKE_DDHRESULT(350)
// #define DDERR_OUTOFCAPS MAKE_DDHRESULT(360)
// #define DDERR_OUTOFMEMORY ((HRESULT) 0x8007000E)
// #define DDERR_OUTOFVIDEOMEMORY MAKE_DDHRESULT(380)
// #define DDERR_OVERLAYCANTCLIP MAKE_DDHRESULT(382)
// #define DDERR_OVERLAYCOLORKEYONLYONEACTIVE MAKE_DDHRESULT(384)
// #define DDERR_PALETTEBUSY MAKE_DDHRESULT(387)
// #define DDERR_COLORKEYNOTSET MAKE_DDHRESULT(400)
// #define DDERR_SURFACEALREADYATTACHED MAKE_DDHRESULT(410)
// #define DDERR_SURFACEALREADYDEPENDENT MAKE_DDHRESULT(420)
// #define DDERR_SURFACEBUSY MAKE_DDHRESULT(430)
// #define DDERR_SURFACEISOBSCURED MAKE_DDHRESULT(440)
// #define DDERR_SURFACELOST MAKE_DDHRESULT(450)
// #define DDERR_SURFACENOTATTACHED MAKE_DDHRESULT(460)
// #define DDERR_TOOBIGHEIGHT MAKE_DDHRESULT(470)
// #define DDERR_TOOBIGSIZE MAKE_DDHRESULT(480)
// #define DDERR_TOOBIGWIDTH MAKE_DDHRESULT(490)
// #define DDERR_UNSUPPORTED ((HRESULT) 0x80004001)
// #define DDERR_UNSUPPORTEDFORMAT MAKE_DDHRESULT(510)
// #define DDERR_UNSUPPORTEDMASK MAKE_DDHRESULT(520)
// #define DDERR_VERTICALBLANKINPROGRESS MAKE_DDHRESULT(537)
// #define DDERR_WASSTILLDRAWING MAKE_DDHRESULT(540)
// #define DDERR_XALIGN MAKE_DDHRESULT(560)
// #define DDERR_INVALIDDIRECTDRAWGUID MAKE_DDHRESULT(561)
// #define DDERR_DIRECTDRAWALREADYCREATED MAKE_DDHRESULT(562)
// #define DDERR_NODIRECTDRAWHW MAKE_DDHRESULT(563)
// #define DDERR_PRIMARYSURFACEALREADYEXISTS MAKE_DDHRESULT(564)
// #define DDERR_NOEMULATION MAKE_DDHRESULT(565)
// #define DDERR_REGIONTOOSMALL MAKE_DDHRESULT(566)
// #define DDERR_CLIPPERISUSINGHWND MAKE_DDHRESULT(567)
// #define DDERR_NOCLIPPERATTACHED MAKE_DDHRESULT(568)
// #define DDERR_NOHWND MAKE_DDHRESULT(569)
// #define DDERR_HWNDSUBCLASSED MAKE_DDHRESULT(570)
// #define DDERR_HWNDALREADYSET MAKE_DDHRESULT(571)
// #define DDERR_NOPALETTEATTACHED MAKE_DDHRESULT(572)
// #define DDERR_NOPALETTEHW MAKE_DDHRESULT(573)
// #define DDERR_BLTFASTCANTCLIP MAKE_DDHRESULT(574)
// #define DDERR_NOBLTHW MAKE_DDHRESULT(575)
// #define DDERR_NODDROPSHW MAKE_DDHRESULT(576)
// #define DDERR_OVERLAYNOTVISIBLE MAKE_DDHRESULT(577)
// #define DDERR_NOOVERLAYDEST MAKE_DDHRESULT(578)
// #define DDERR_INVALIDPOSITION MAKE_DDHRESULT(579)
// #define DDERR_NOTAOVERLAYSURFACE MAKE_DDHRESULT(580)
// #define DDERR_EXCLUSIVEMODEALREADYSET MAKE_DDHRESULT(581)
// #define DDERR_NOTFLIPPABLE MAKE_DDHRESULT(582)
// #define DDERR_CANTDUPLICATE MAKE_DDHRESULT(583)
// #define DDERR_NOTLOCKED MAKE_DDHRESULT(584)
// #define DDERR_CANTCREATEDC MAKE_DDHRESULT(585)
// #define DDERR_NODC MAKE_DDHRESULT(586)
// #define DDERR_WRONGMODE MAKE_DDHRESULT(587)
// #define DDERR_IMPLICITLYCREATED MAKE_DDHRESULT(588)
// #define DDERR_NOTPALETTIZED MAKE_DDHRESULT(589)

// --- GUIDs ---



// --- Enums ---
// #define DDCKEY_SRCBLT DDColorKeyFlags::SRCBLT
public enum DDColorKeyFlags {
	SRCBLT(1 << 3);

    public final int value;
    private DDColorKeyFlags(int v) { this.value = v; }
    private DDColorKeyFlags(DDColorKeyFlags e) { this.value = e.value; }
    public DDColorKeyFlags intern() { for (DDColorKeyFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDFLIP_WAIT DDFlipFlags::WAIT
public enum DDFlipFlags {
	WAIT(1);

    public final int value;
    private DDFlipFlags(int v) { this.value = v; }
    private DDFlipFlags(DDFlipFlags e) { this.value = e.value; }
    public DDFlipFlags intern() { for (DDFlipFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDCAPS2_CERTIFIED DDCaps2Flags::CERTIFIED
public enum DDCaps2Flags {
	CERTIFIED(1);

    public final int value;
    private DDCaps2Flags(int v) { this.value = v; }
    private DDCaps2Flags(DDCaps2Flags e) { this.value = e.value; }
    public DDCaps2Flags intern() { for (DDCaps2Flags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDPCAPS_8BIT DDPixelCaps::_8BIT
// #define DDPCAPS_INITIALIZE DDPixelCaps::INITIALIZE
// #define DDPCAPS_ALLOW256 DDPixelCaps::ALLOW256
public enum DDPixelCaps {
	_8BIT(1 << 2),
	INITIALIZE(1 << 3),
	ALLOW256(1 << 6);

    public final int value;
    private DDPixelCaps(int v) { this.value = v; }
    private DDPixelCaps(DDPixelCaps e) { this.value = e.value; }
    public DDPixelCaps intern() { for (DDPixelCaps e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDBLT_NONE DDBltFlags::NONE
// #define DDBLT_KEYSRC DDBltFlags::KEYSRC
// #define DDBLT_ROP DDBltFlags::ROP
// #define DDBLT_COLORFILL DDBltFlags::COLORFILL
// #define DDBLT_WAIT DDBltFlags::WAIT
public enum DDBltFlags {
	NONE(0),
	COLORFILL(1 << 10),
	KEYSRC(1 << 15),
	ROP(1 << 17),
	WAIT(1 << 24);

    public final int value;
    private DDBltFlags(int v) { this.value = v; }
    private DDBltFlags(DDBltFlags e) { this.value = e.value; }
    public DDBltFlags intern() { for (DDBltFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDPF_ALPHAPIXELS DDPixelFormatFlags::ALPHAPIXELS
// #define DDPF_PALETTEINDEXED8 DDPixelFormatFlags::PALETTEINDEXED8
// #define DDPF_RGB DDPixelFormatFlags::RGB
// #define DDPF_ALPHAPIXELS DDPixelFormatFlags::ALPHAPIXELS
public enum DDPixelFormatFlags {
	ALPHAPIXELS(1 << 0),     // dwRGBAlphaBitMask is valid
	PALETTEINDEXED8(1 << 5), // The texture uses an 8 bit palette
	RGB(1 << 6);            // dwRGBBitCount, dwRBitMask, dwGBitMask, and dwBBitMask is valid

    public final int value;
    private DDPixelFormatFlags(int v) { this.value = v; }
    private DDPixelFormatFlags(DDPixelFormatFlags e) { this.value = e.value; }
    public DDPixelFormatFlags intern() { for (DDPixelFormatFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDBLTFAST_SRCCOLORKEY DDBltFastFlags::SRCCOLORKEY
// #define DDBLTFAST_WAIT DDBltFastFlags::WAIT
public enum DDBltFastFlags {
	SRCCOLORKEY(1 << 0),
	WAIT(1 << 4);

    public final int value;
    private DDBltFastFlags(int v) { this.value = v; }
    private DDBltFastFlags(DDBltFastFlags e) { this.value = e.value; }
    public DDBltFastFlags intern() { for (DDBltFastFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDLOCK_SURFACEMEMORYPTR DDLockFlags::SURFACEMEMORYPTR
// #define DDLOCK_WAIT DDLockFlags::WAIT
// #define DDLOCK_WRITEONLY DDLockFlags::WRITEONLY
// #define DDLOCK_READONLY DDLockFlags::READONLY
public enum DDLockFlags {
	SURFACEMEMORYPTR(0),
	WAIT(1 << 0),
	READONLY(1 << 4),
	WRITEONLY(1 << 5);

    public final int value;
    private DDLockFlags(int v) { this.value = v; }
    private DDLockFlags(DDLockFlags e) { this.value = e.value; }
    public DDLockFlags intern() { for (DDLockFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSCL_FULLSCREEN DDSCLFlags::FULLSCREEN
// #define DDSCL_ALLOWREBOOT DDSCLFlags::ALLOWREBOOT
// #define DDSCL_NORMAL DDSCLFlags::NORMAL
// #define DDSCL_EXCLUSIVE DDSCLFlags::EXCLUSIVE
public enum DDSCLFlags {
	FULLSCREEN(1 << 0),
	ALLOWREBOOT(1 << 1),
	NORMAL(1 << 3),
	EXCLUSIVE(1 << 4);

    public final int value;
    private DDSCLFlags(int v) { this.value = v; }
    private DDSCLFlags(DDSCLFlags e) { this.value = e.value; }
    public DDSCLFlags intern() { for (DDSCLFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSD_CAPS DDSurfaceDescFlags::CAPS
// #define DDSD_HEIGHT DDSurfaceDescFlags::HEIGHT
// #define DDSD_WIDTH DDSurfaceDescFlags::WIDTH
// #define DDSD_BACKBUFFERCOUNT DDSurfaceDescFlags::BACKBUFFERCOUNT
// #define DDSD_ZBUFFERBITDEPTH DDSurfaceDescFlags::ZBUFFERBITDEPTH
// #define DDSD_PIXELFORMAT DDSurfaceDescFlags::PIXELFORMAT
public enum DDSurfaceDescFlags {
	CAPS(1 << 0),            // ddsCaps is valid
	HEIGHT(1 << 1),          // dwHeight is valid
	WIDTH(1 << 2),           // dwWidth is valid
	BACKBUFFERCOUNT(1 << 5), // dwBackBufferCount is valid
	ZBUFFERBITDEPTH(1 << 6), // dwZBufferBitDepth is valid
	PIXELFORMAT(1 << 12);   // ddpfPixelFormat is valid

    public final int value;
    private DDSurfaceDescFlags(int v) { this.value = v; }
    private DDSurfaceDescFlags(DDSurfaceDescFlags e) { this.value = e.value; }
    public DDSurfaceDescFlags intern() { for (DDSurfaceDescFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define DDSCAPS_BACKBUFFER DDSCapsFlags::BACKBUFFER
// #define DDSCAPS_COMPLEX DDSCapsFlags::COMPLEX
// #define DDSCAPS_FLIP DDSCapsFlags::FLIP
// #define DDSCAPS_OFFSCREENPLAIN DDSCapsFlags::OFFSCREENPLAIN
// #define DDSCAPS_PRIMARYSURFACE DDSCapsFlags::PRIMARYSURFACE
// #define DDSCAPS_SYSTEMMEMORY DDSCapsFlags::SYSTEMMEMORY
// #define DDSCAPS_TEXTURE DDSCapsFlags::TEXTURE
// #define DDSCAPS_3DDEVICE DDSCapsFlags::D3DDEVICE
// #define DDSCAPS_VIDEOMEMORY DDSCapsFlags::VIDEOMEMORY
// #define DDSCAPS_ZBUFFER DDSCapsFlags::ZBUFFER
public enum DDSCapsFlags {
	BACKBUFFER(1 << 2),
	COMPLEX(1 << 3),
	FLIP(1 << 4),
	OFFSCREENPLAIN(1 << 6),
	PRIMARYSURFACE(1 << 9),
	SYSTEMMEMORY(1 << 11),
	TEXTURE(1 << 12),
	D3DDEVICE(1 << 13),
	VIDEOMEMORY(1 << 14),
	ZBUFFER(1 << 17);

    public final int value;
    private DDSCapsFlags(int v) { this.value = v; }
    private DDSCapsFlags(DDSCapsFlags e) { this.value = e.value; }
    public DDSCapsFlags intern() { for (DDSCapsFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define PC_NONE PCFlags::NONE
// #define PC_NOCOLLAPSE PCFlags::NOCOLLAPSE
// #define D3DPAL_READONLY PCFlags::D3DREADONLY
// #define D3DPAL_RESERVED PCFlags::D3DRESERVED
public enum PCFlags {
	NONE((byte)(0)),
	NOCOLLAPSE((byte)(1 << 2)),
	D3DREADONLY((byte)(1 << 6)),
	D3DRESERVED((byte)(1 << 7));

    public final byte value;
    private PCFlags(byte v) { this.value = v; }
    private PCFlags(PCFlags e) { this.value = e.value; }
    public PCFlags intern() { for (PCFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// --- Structs ---
public static class DDCAPS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDCAPS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDCAPS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDCAPS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDCAPS position(long position) {
        return (DDCAPS)super.position(position);
    }
    @Override public DDCAPS getPointer(long i) {
        return new DDCAPS((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDCAPS dwSize(int setter);
	public native DDCaps2Flags dwCaps2(); public native DDCAPS dwCaps2(DDCaps2Flags setter);
	
}

public static class DDSCAPS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDSCAPS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDSCAPS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDSCAPS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDSCAPS position(long position) {
        return (DDSCAPS)super.position(position);
    }
    @Override public DDSCAPS getPointer(long i) {
        return new DDSCAPS((Pointer)this).offsetAddress(i);
    }

	public native DDSCapsFlags dwCaps(); public native DDSCAPS dwCaps(DDSCapsFlags setter);
}

// #define DDBLTFX_NOTEARING DDBLTFXFlags::NOTEARING
public enum DDBLTFXFlags {
	NOTEARING((byte)(1 << 3));

    public final byte value;
    private DDBLTFXFlags(byte v) { this.value = v; }
    private DDBLTFXFlags(DDBLTFXFlags e) { this.value = e.value; }
    public DDBLTFXFlags intern() { for (DDBLTFXFlags e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
public static class DDBLTFX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDBLTFX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDBLTFX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDBLTFX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDBLTFX position(long position) {
        return (DDBLTFX)super.position(position);
    }
    @Override public DDBLTFX getPointer(long i) {
        return new DDBLTFX((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDBLTFX dwSize(int setter);
	public native DDBLTFXFlags dwDDFX(); public native DDBLTFX dwDDFX(DDBLTFXFlags setter);
	public native @Cast("DWORD") int dwROP(); public native DDBLTFX dwROP(int setter);
	public native @Cast("DWORD") int dwFillColor(); public native DDBLTFX dwFillColor(int setter);
}

public static class DDPIXELFORMAT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDPIXELFORMAT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDPIXELFORMAT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDPIXELFORMAT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDPIXELFORMAT position(long position) {
        return (DDPIXELFORMAT)super.position(position);
    }
    @Override public DDPIXELFORMAT getPointer(long i) {
        return new DDPIXELFORMAT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDPIXELFORMAT dwSize(int setter);
	public native DDPixelFormatFlags dwFlags(); public native DDPIXELFORMAT dwFlags(DDPixelFormatFlags setter);
	public native @Cast("DWORD") int dwRGBBitCount(); public native DDPIXELFORMAT dwRGBBitCount(int setter); // Bit count, Lego Island only handles 8 or 16
	public native @Cast("DWORD") int dwRBitMask(); public native DDPIXELFORMAT dwRBitMask(int setter);    // Red bit mask (0xF800)
	public native @Cast("DWORD") int dwGBitMask(); public native DDPIXELFORMAT dwGBitMask(int setter);    // Green bit mask (0x07E0)
	public native @Cast("DWORD") int dwBBitMask(); public native DDPIXELFORMAT dwBBitMask(int setter);    // Blue bit mask (0x001F)
	public native @Cast("DWORD") int dwRGBAlphaBitMask(); public native DDPIXELFORMAT dwRGBAlphaBitMask(int setter);
}

public static class DDCOLORKEY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDCOLORKEY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDCOLORKEY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDCOLORKEY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDCOLORKEY position(long position) {
        return (DDCOLORKEY)super.position(position);
    }
    @Override public DDCOLORKEY getPointer(long i) {
        return new DDCOLORKEY((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwColorSpaceLowValue(); public native DDCOLORKEY dwColorSpaceLowValue(int setter);
	public native @Cast("DWORD") int dwColorSpaceHighValue(); public native DDCOLORKEY dwColorSpaceHighValue(int setter);
}

public static class DDSURFACEDESC extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DDSURFACEDESC() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DDSURFACEDESC(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DDSURFACEDESC(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DDSURFACEDESC position(long position) {
        return (DDSURFACEDESC)super.position(position);
    }
    @Override public DDSURFACEDESC getPointer(long i) {
        return new DDSURFACEDESC((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int dwSize(); public native DDSURFACEDESC dwSize(int setter);
	public native DDSurfaceDescFlags dwFlags(); public native DDSURFACEDESC dwFlags(DDSurfaceDescFlags setter);
	public native @Cast("DWORD") int dwHeight(); public native DDSURFACEDESC dwHeight(int setter);
	public native @Cast("DWORD") int dwWidth(); public native DDSURFACEDESC dwWidth(int setter);
	public native @Cast("LONG") long lPitch(); public native DDSURFACEDESC lPitch(long setter);
	public native @Cast("DWORD") int dwBackBufferCount(); public native DDSURFACEDESC dwBackBufferCount(int setter);
	public native @Cast("DWORD") int dwZBufferBitDepth(); public native DDSURFACEDESC dwZBufferBitDepth(int setter);
	public native Pointer lpSurface(); public native DDSURFACEDESC lpSurface(Pointer setter);
	public native @ByRef DDPIXELFORMAT ddpfPixelFormat(); public native DDSURFACEDESC ddpfPixelFormat(DDPIXELFORMAT setter);
	public native @ByRef DDSCAPS ddsCaps(); public native DDSURFACEDESC ddsCaps(DDSCAPS setter);
}

public static class PALETTEENTRY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PALETTEENTRY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PALETTEENTRY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PALETTEENTRY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PALETTEENTRY position(long position) {
        return (PALETTEENTRY)super.position(position);
    }
    @Override public PALETTEENTRY getPointer(long i) {
        return new PALETTEENTRY((Pointer)this).offsetAddress(i);
    }

	public native @Cast("BYTE") byte peRed(); public native PALETTEENTRY peRed(byte setter);
	public native @Cast("BYTE") byte peGreen(); public native PALETTEENTRY peGreen(byte setter);
	public native @Cast("BYTE") byte peBlue(); public native PALETTEENTRY peBlue(byte setter);
	public native PCFlags peFlags(); public native PALETTEENTRY peFlags(PCFlags setter);
}

public static class LOGPALETTE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LOGPALETTE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LOGPALETTE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LOGPALETTE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LOGPALETTE position(long position) {
        return (LOGPALETTE)super.position(position);
    }
    @Override public LOGPALETTE getPointer(long i) {
        return new LOGPALETTE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("WORD") short palVersion(); public native LOGPALETTE palVersion(short setter);
	public native @Cast("WORD") short palNumEntries(); public native LOGPALETTE palNumEntries(short setter);
	public native @ByRef PALETTEENTRY palPalEntry(int i); public native LOGPALETTE palPalEntry(int i, PALETTEENTRY setter);
	@MemberGetter public native PALETTEENTRY palPalEntry();
}
public static class IDirectDrawPalette extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawPalette(Pointer p) { super(p); }

	public native @Cast("HRESULT") long GetEntries(@Cast("DWORD") int dwFlags, @Cast("DWORD") int dwBase, @Cast("DWORD") int dwNumEntries, @Cast("LPPALETTEENTRY") PALETTEENTRY lpEntries);
	public native @Cast("HRESULT") long SetEntries(@Cast("DWORD") int dwFlags, @Cast("DWORD") int dwStartingEntry, @Cast("DWORD") int dwCount, @Cast("LPPALETTEENTRY") PALETTEENTRY lpEntries);
}

public static class IDirectDrawClipper extends IUnknown {
    static { Loader.load(); }
    /** Default native constructor. */
    public IDirectDrawClipper() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IDirectDrawClipper(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawClipper(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public IDirectDrawClipper position(long position) {
        return (IDirectDrawClipper)super.position(position);
    }
    @Override public IDirectDrawClipper getPointer(long i) {
        return new IDirectDrawClipper((Pointer)this).offsetAddress(i);
    }

	public native @Cast("HRESULT") long SetHWnd(@Cast("DWORD") int unnamedParam1, HWND hWnd);
}
public static class IDirectDrawSurface extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawSurface(Pointer p) { super(p); }

	public native @Cast("HRESULT") long AddAttachedSurface(IDirectDrawSurface lpDDSAttachedSurface);
	public native @Cast("HRESULT") long Blt(
			@Cast("RECT*") Pointer lpDestRect,
			IDirectDrawSurface lpDDSrcSurface,
			@Cast("RECT*") Pointer lpSrcRect,
			DDBltFlags dwFlags,
			@Cast("LPDDBLTFX") DDBLTFX lpDDBltFx
		);
	public native @Cast("HRESULT") long BltFast(
			@Cast("DWORD") int dwX,
			@Cast("DWORD") int dwY,
			IDirectDrawSurface lpDDSrcSurface,
			@Cast("RECT*") Pointer lpSrcRect,
			DDBltFastFlags dwTrans
		);
	public native @Cast("HRESULT") long Flip(IDirectDrawSurface lpDDSurfaceTargetOverride, DDFlipFlags dwFlags);
	public native @Cast("HRESULT") long GetAttachedSurface(DDSCAPS lpDDSCaps, @Cast("IDirectDrawSurface**") PointerPointer lplpDDAttachedSurface);
	public native @Cast("HRESULT") long GetAttachedSurface(DDSCAPS lpDDSCaps, @ByPtrPtr IDirectDrawSurface lplpDDAttachedSurface);
	
	public native @Cast("HRESULT") long GetPalette(@Cast("IDirectDrawPalette**") PointerPointer lplpDDPalette);
	public native @Cast("HRESULT") long GetPalette(@ByPtrPtr IDirectDrawPalette lplpDDPalette);
	public native @Cast("HRESULT") long GetPixelFormat(DDPIXELFORMAT lpDDPixelFormat);
	public native @Cast("HRESULT") long GetSurfaceDesc(DDSURFACEDESC lpDDSurfaceDesc);
	public native @Cast("HRESULT") long IsLost();
	public native @Cast("HRESULT") long Lock(@Cast("RECT*") Pointer lpDestRect, DDSURFACEDESC lpDDSurfaceDesc, DDLockFlags dwFlags, Pointer hEvent);
	public native @Cast("HRESULT") long ReleaseDC(HDC hDC);
	public native @Cast("HRESULT") long Restore();
	public native @Cast("HRESULT") long SetClipper(@Cast("LPDIRECTDRAWCLIPPER") IDirectDrawClipper lpDDClipper);
	public native @Cast("HRESULT") long SetColorKey(DDColorKeyFlags dwFlags, @Cast("LPDDCOLORKEY") DDCOLORKEY lpDDColorKey);
	public native @Cast("HRESULT") long SetPalette(IDirectDrawPalette lpDDPalette);
	public native @Cast("HRESULT") long Unlock(Pointer lpSurfaceData);
}

@Opaque public static class IDirectDrawSurface3 extends IDirectDrawSurface {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirectDrawSurface3() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDrawSurface3(Pointer p) { super(p); }
}

public static class LPDDENUMMODESCALLBACK extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LPDDENUMMODESCALLBACK(Pointer p) { super(p); }
    protected LPDDENUMMODESCALLBACK() { allocate(); }
    private native void allocate();
    public native @Cast("HRESULT") long call(DDSURFACEDESC arg0, Pointer arg1);
}
public static class IDirectDraw extends IUnknown {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDraw(Pointer p) { super(p); }

	public native @Cast("HRESULT") long CreateClipper(@Cast("DWORD") int dwFlags, @Cast("LPDIRECTDRAWCLIPPER*") PointerPointer lplpDDClipper, IUnknown pUnkOuter);
	public native @Cast("HRESULT") long CreatePalette(
			DDPixelCaps dwFlags,
			@Cast("LPPALETTEENTRY") PALETTEENTRY lpColorTable,
			@Cast("IDirectDrawPalette**") PointerPointer lplpDDPalette,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreatePalette(
			DDPixelCaps dwFlags,
			@Cast("LPPALETTEENTRY") PALETTEENTRY lpColorTable,
			@ByPtrPtr IDirectDrawPalette lplpDDPalette,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreateSurface(
			DDSURFACEDESC lpDDSurfaceDesc,
			@Cast("IDirectDrawSurface**") PointerPointer lplpDDSurface,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long CreateSurface(
			DDSURFACEDESC lpDDSurfaceDesc,
			@ByPtrPtr IDirectDrawSurface lplpDDSurface,
			IUnknown pUnkOuter
		);
	public native @Cast("HRESULT") long EnumDisplayModes(
			@Cast("DWORD") int dwFlags,
			DDSURFACEDESC lpDDSurfaceDesc,
			Pointer lpContext,
			LPDDENUMMODESCALLBACK lpEnumModesCallback
		);
	public native @Cast("HRESULT") long FlipToGDISurface();
	public native @Cast("HRESULT") long GetCaps(@Cast("LPDDCAPS") DDCAPS lpDDDriverCaps, @Cast("LPDDCAPS") DDCAPS lpDDHELCaps);
	public native @Cast("HRESULT") long GetDisplayMode(DDSURFACEDESC lpDDSurfaceDesc);
	public native @Cast("HRESULT") long RestoreDisplayMode();
	public native @Cast("HRESULT") long SetCooperativeLevel(HWND hWnd, DDSCLFlags dwFlags);
	public native @Cast("HRESULT") long SetDisplayMode(@Cast("DWORD") int dwWidth, @Cast("DWORD") int dwHeight, @Cast("DWORD") int dwBPP);
}

@Opaque public static class IDirectDraw2 extends IDirectDraw {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirectDraw2() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirectDraw2(Pointer p) { super(p); }
}

// --- Functions ---

public static native @Cast("HRESULT") long DirectDrawCreate(@Cast("GUID*") Pointer lpGuid, @Cast("IDirectDraw**") PointerPointer lplpDD, IUnknown pUnkOuter);
public static native @Cast("HRESULT") long DirectDrawCreate(@Cast("GUID*") Pointer lpGuid, @ByPtrPtr IDirectDraw lplpDD, IUnknown pUnkOuter);

public static class LPDDENUMCALLBACKA extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LPDDENUMCALLBACKA(Pointer p) { super(p); }
    protected LPDDENUMCALLBACKA() { allocate(); }
    private native void allocate();
    public native @Cast("BOOL") boolean call(GUID arg0, @Cast("LPSTR") String arg1, @Cast("LPSTR") String arg2, Pointer arg3);
}
public static native @Cast("HRESULT") long DirectDrawEnumerate(LPDDENUMCALLBACKA cb, Pointer context);

public static native @Cast("UINT") long GetSystemPaletteEntries(HDC hdc, @Cast("UINT") long iStart, @Cast("UINT") long cEntries, @Cast("LPPALETTEENTRY") PALETTEENTRY pPalEntries);

public static native HPALETTE CreatePalette(LOGPALETTE lpLogPalette);

public static native int SelectPalette(HDC hdc, HPALETTE hpal, @Cast("BOOL") boolean bForceBackground);

public static native int RealizePalette(HDC hdc);


// Parsed from miniwin/windows.h

// #pragma once

// #include <SDL3/SDL_video.h>
// #include <limits.h>
// #include <stdint.h>
// #include <string.h>

// --- Defines and Macros ---
public static native long MAKE_HRESULT(long sev, long fac, long code);

// #define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
// 	const GUID name = {l, w1, w2, {b1, b2, b3, b4, b5, b6, b7, b8}}

// Remove WinAPI stuff
// #define CALLBACK
// #define FAR
// #define WINAPI
// #define HWND_NOTOPMOST ((HWND) (-2))
// #define RGB(r, g, b) (((BYTE) (r) | ((BYTE) (g) << 8) | ((BYTE) (b) << 16)))
// #define S_OK ((HRESULT) 0)
public static final int E_NOINTERFACE = (0x80004002);
// #define VOID void
public static final int TRUE = 1;
public static final int FALSE = 0;

public static final int SWP_NOACTIVATE = 0x0010;
public static final int SWP_NOMOVE = 0x0002;
public static final int SWP_NOSIZE = 0x0004;
public static final int SWP_NOZORDER = 0x0001;

public static final int WM_CLOSE = 0x0010;
public static final int WM_QUIT = 0x0012;
public static final int WM_TIMER = 0x0113;

public static final long WS_CAPTION = 0x00C00000L;
public static final long WS_OVERLAPPED = 0x00000000L;
public static final long WS_POPUP = 0x80000000L;
public static final long WS_THICKFRAME = 0x00040000L;

public static final int GWL_STYLE = (-16);
public static final int GWL_EXSTYLE = -20;

public static final int ANSI_CHARSET = 0;
public static final int BI_RGB = 0;
public static final int CLIP_DEFAULT_PRECIS = 0;
public static final int DEFAULT_QUALITY = 0;
public static final int ETO_OPAQUE = 0x0002;
public static final int RASTERCAPS = 0x00000000;
public static final int RC_PALETTE = 0x0100;
public static final int SIZEPALETTE = 104;
public static final int FW_NORMAL = 400;
public static final int OPAQUE = 2;
public static final int OUT_DEFAULT_PRECIS = 0;
public static final int RDW_FRAME = 0x0400;
public static final int SRCCOPY = 0x00CC0020;
public static final int VARIABLE_PITCH = 2;

// --- Typedefs ---
@Namespace @Name("void") @Opaque public static class LPVOID extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LPVOID() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LPVOID(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class HANDLE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HANDLE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HANDLE(Pointer p) { super(p); }
}
@Opaque public static class HICON__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HICON__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HICON__(Pointer p) { super(p); }
}
@Opaque public static class HFONT__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HFONT__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HFONT__(Pointer p) { super(p); }
}
@Opaque public static class HINSTANCE__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HINSTANCE__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HINSTANCE__(Pointer p) { super(p); }
}
@Opaque public static class HMENU__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HMENU__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HMENU__(Pointer p) { super(p); }
}
@Name("HWND__") @Opaque public static class HWND extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HWND() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HWND(Pointer p) { super(p); }
}
@Name("HDC__") @Opaque public static class HDC extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HDC() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HDC(Pointer p) { super(p); }
}
@Name("HPALETTE__") @Opaque public static class HPALETTE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HPALETTE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HPALETTE(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class HFILE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HFILE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HFILE(Pointer p) { super(p); }
}

// --- Structs ---
public static class tagPOINT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public tagPOINT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tagPOINT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tagPOINT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public tagPOINT position(long position) {
        return (tagPOINT)super.position(position);
    }
    @Override public tagPOINT getPointer(long i) {
        return new tagPOINT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long x(); public native tagPOINT x(long setter);
	public native @Cast("LONG") long y(); public native tagPOINT y(long setter);
}

public static class SIZE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SIZE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SIZE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SIZE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SIZE position(long position) {
        return (SIZE)super.position(position);
    }
    @Override public SIZE getPointer(long i) {
        return new SIZE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long cx(); public native SIZE cx(long setter);
	public native @Cast("LONG") long cy(); public native SIZE cy(long setter);
}

public static class RECT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RECT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RECT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RECT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RECT position(long position) {
        return (RECT)super.position(position);
    }
    @Override public RECT getPointer(long i) {
        return new RECT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") long left(); public native RECT left(long setter);
	public native @Cast("LONG") long top(); public native RECT top(long setter);
	public native @Cast("LONG") long right(); public native RECT right(long setter);
	public native @Cast("LONG") long bottom(); public native RECT bottom(long setter);
}

public static class BITMAPINFOHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFOHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFOHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFOHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFOHEADER position(long position) {
        return (BITMAPINFOHEADER)super.position(position);
    }
    @Override public BITMAPINFOHEADER getPointer(long i) {
        return new BITMAPINFOHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int biSize(); public native BITMAPINFOHEADER biSize(int setter);
	public native @Cast("LONG") long biWidth(); public native BITMAPINFOHEADER biWidth(long setter);
	public native @Cast("LONG") long biHeight(); public native BITMAPINFOHEADER biHeight(long setter);
	public native @Cast("WORD") short biPlanes(); public native BITMAPINFOHEADER biPlanes(short setter);
	public native @Cast("WORD") short biBitCount(); public native BITMAPINFOHEADER biBitCount(short setter);
	public native @Cast("DWORD") int biCompression(); public native BITMAPINFOHEADER biCompression(int setter);
	public native @Cast("DWORD") int biSizeImage(); public native BITMAPINFOHEADER biSizeImage(int setter);
	public native @Cast("LONG") long biXPelsPerMeter(); public native BITMAPINFOHEADER biXPelsPerMeter(long setter);
	public native @Cast("LONG") long biYPelsPerMeter(); public native BITMAPINFOHEADER biYPelsPerMeter(long setter);
	public native @Cast("DWORD") int biClrUsed(); public native BITMAPINFOHEADER biClrUsed(int setter);
	public native @Cast("DWORD") int biClrImportant(); public native BITMAPINFOHEADER biClrImportant(int setter);
}

public static class RGBQUAD extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RGBQUAD() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RGBQUAD(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RGBQUAD(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RGBQUAD position(long position) {
        return (RGBQUAD)super.position(position);
    }
    @Override public RGBQUAD getPointer(long i) {
        return new RGBQUAD((Pointer)this).offsetAddress(i);
    }

	public native @Cast("BYTE") byte rgbBlue(); public native RGBQUAD rgbBlue(byte setter);
	public native @Cast("BYTE") byte rgbGreen(); public native RGBQUAD rgbGreen(byte setter);
	public native @Cast("BYTE") byte rgbRed(); public native RGBQUAD rgbRed(byte setter);
	public native @Cast("BYTE") byte rgbReserved(); public native RGBQUAD rgbReserved(byte setter);
}

// #pragma pack(push, 1)
public static class BITMAPFILEHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPFILEHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPFILEHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPFILEHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPFILEHEADER position(long position) {
        return (BITMAPFILEHEADER)super.position(position);
    }
    @Override public BITMAPFILEHEADER getPointer(long i) {
        return new BITMAPFILEHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("WORD") short bfType(); public native BITMAPFILEHEADER bfType(short setter);
	public native @Cast("DWORD") int bfSize(); public native BITMAPFILEHEADER bfSize(int setter);
	public native @Cast("WORD") short bfReserved1(); public native BITMAPFILEHEADER bfReserved1(short setter);
	public native @Cast("WORD") short bfReserved2(); public native BITMAPFILEHEADER bfReserved2(short setter);
	public native @Cast("DWORD") int bfOffBits(); public native BITMAPFILEHEADER bfOffBits(int setter);
}
// #pragma pack(pop)

public static class BITMAPINFO extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFO() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFO(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFO(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFO position(long position) {
        return (BITMAPINFO)super.position(position);
    }
    @Override public BITMAPINFO getPointer(long i) {
        return new BITMAPINFO((Pointer)this).offsetAddress(i);
    }

	public native @ByRef BITMAPINFOHEADER bmiHeader(); public native BITMAPINFO bmiHeader(BITMAPINFOHEADER setter);
	public native @ByRef RGBQUAD bmiColors(int i); public native BITMAPINFO bmiColors(int i, RGBQUAD setter);
	@MemberGetter public native RGBQUAD bmiColors();
}

public static class GUID extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GUID() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GUID(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GUID(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GUID position(long position) {
        return (GUID)super.position(position);
    }
    @Override public GUID getPointer(long i) {
        return new GUID((Pointer)this).offsetAddress(i);
    }

	public native @Cast("uint32_t") int m_data1(); public native GUID m_data1(int setter);
	public native @Cast("uint16_t") short m_data2(); public native GUID m_data2(short setter);
	public native @Cast("uint16_t") short m_data3(); public native GUID m_data3(short setter);
	public native @Cast("uint8_t") byte m_data4(int i); public native GUID m_data4(int i, byte setter);
	@MemberGetter public native @Cast("uint8_t*") BytePointer m_data4();
}

@NoOffset public static class IUnknown extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IUnknown(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IUnknown(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public IUnknown position(long position) {
        return (IUnknown)super.position(position);
    }
    @Override public IUnknown getPointer(long i) {
        return new IUnknown((Pointer)this).offsetAddress(i);
    }

	public IUnknown() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("ULONG") int AddRef();
	public native @Cast("ULONG") int Release();
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") PointerPointer ppvObject);
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") @ByPtrPtr Pointer ppvObject);
}

public static native @Cast("BOOL") boolean SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, @Cast("UINT") long uFlags);







public static native @Cast("BOOL") boolean RedrawWindow(Pointer hWnd, @Const Pointer lprcUpdate, Pointer hrgnUpdate, @Cast("unsigned int") int flags);



public static native int DrawMenuBar(Pointer hWnd);

public static native int StretchDIBits(
	Pointer hdc,
	int xDest,
	int yDest,
	int DestWidth,
	int DestHeight,
	int xSrc,
	int ySrc,
	int SrcWidth,
	int SrcHeight,
	@Const Pointer lpBits,
	@Const Pointer lpbmi,
	@Cast("unsigned int") int iUsage,
	@Cast("uint32_t") int rop
);

public static native @Cast("LONG") long GetWindowLong(HWND hWnd, int nIndex);

public static native @Cast("LONG") long SetWindowLong(HWND hWnd, int nIndex, @Cast("LONG") long dwNewLong);

public static native int DeleteObject(Pointer arg0);

public static native @Cast("BOOL") boolean AdjustWindowRectEx(RECT lpRect, @Cast("DWORD") int dwStyle, @Cast("BOOL") boolean bMenu, @Cast("DWORD") int dwExStyle);

public static native int SetRect(RECT rc, int left, int top, int right, int bottom);

public static native @Cast("BOOL") boolean ClientToScreen(HWND hWnd, @Cast("LPPOINT") tagPOINT lpPoint);


// Parsed from tglsurface.h

// #ifndef _TglSurface_h
// #define _TglSurface_h

// #include "mxdirectx/mxstopwatch.h"
// #include "tgl/tgl.h"
 // namespace Tgl

/////////////////////////////////////////////////////////////////////////////
// TglSurface

// VTABLE: LEGO1 0x100dc060
// VTABLE: BETA10 0x101c3648
// SIZE 0x70
@NoOffset public static class TglSurface extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TglSurface(Pointer p) { super(p); }

	// SIZE 0x28
	public static class CreateStruct extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public CreateStruct() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public CreateStruct(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public CreateStruct(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public CreateStruct position(long position) {
	        return (CreateStruct)super.position(position);
	    }
	    @Override public CreateStruct getPointer(long i) {
	        return new CreateStruct((Pointer)this).offsetAddress(i);
	    }
	
		public native @Const GUID m_pDriverGUID(); public native CreateStruct m_pDriverGUID(GUID setter);          // 0x00
		public native HWND m_hWnd(); public native CreateStruct m_hWnd(HWND setter);                        // 0x04
		public native IDirectDraw m_pDirectDraw(); public native CreateStruct m_pDirectDraw(IDirectDraw setter);         // 0x08
		public native IDirectDrawSurface m_pFrontBuffer(); public native CreateStruct m_pFrontBuffer(IDirectDrawSurface setter); // 0x0c
		public native IDirectDrawSurface m_pBackBuffer(); public native CreateStruct m_pBackBuffer(IDirectDrawSurface setter);  // 0x10
		public native IDirectDrawPalette m_pPalette(); public native CreateStruct m_pPalette(IDirectDrawPalette setter);     // 0x14
		public native @Cast("BOOL") boolean m_isFullScreen(); public native CreateStruct m_isFullScreen(boolean setter);                // 0x18
		public native @Cast("BOOL") boolean m_isWideViewAngle(); public native CreateStruct m_isWideViewAngle(boolean setter);             // 0x1c
		public native IDirect3D2 m_direct3d(); public native CreateStruct m_direct3d(IDirect3D2 setter);             // 0x20
		public native IDirect3DDevice2 m_d3dDevice(); public native CreateStruct m_d3dDevice(IDirect3DDevice2 setter);      // 0x24
	}

	public native @Cast("BOOL") boolean Create(@Const @ByRef CreateStruct arg0, Renderer arg1, Group pScene); // vtable+0x04
	public native void Destroy();                                                       // vtable+0x08
	public native double Render(); // render time in seconds // vtable+0x0c

	public native Renderer GetRenderer();
	public native Device GetDevice();

	// FUNCTION: BETA10 0x100d5570
	public native View GetView();

	public native Group GetScene();

	// FUNCTION: BETA10 0x1017cbc0
	public native @Cast("unsigned int") int GetWidth();

	// FUNCTION: BETA10 0x1017cbe0
	public native @Cast("unsigned int") int GetHeight();

	public native double GetRenderingRate();
	public native double GetFrameRate();
	public native @Cast("unsigned int") int GetFrameCount();
// #ifdef _DEBUG
	
}

/////////////////////////////////////////////////////////////////////////////

// SYNTHETIC: LEGO1 0x100abcf0
// SYNTHETIC: BETA10 0x1017de00
// TglSurface::`scalar deleting destructor'

// #endif /* _TglSurface_h */


// Parsed from tgl.h


// #ifndef _tgl_h
// #define _tgl_h

// #include "tglvector.h"

// #ifdef MINIWIN
// #else
// #include <d3d.h>
// #include <ddraw.h>
// #endif

// #ifdef MINIWIN
// #else
// #include <windows.h>
// #endif

/** enum Tgl::ColorModel */
public static final int
	// Note: Not used in shipped game, no way to verify contents.
	Ramp = 0,
	RGB = 1;

/** enum Tgl::ShadingModel */
public static final int
	Wireframe = 0,
	UnlitFlat = 1,
	Flat = 2,
	Gouraud = 3,
	Phong = 4;

/** enum Tgl::LightType */
public static final int
	Ambient = 0,
	Point = 1,
	Spot = 2,
	Directional = 3,
	ParallelPoint = 4;

/** enum Tgl::ProjectionType */
public static final int
	Perspective = 0,
	Orthographic = 1;

/** enum Tgl::TextureMappingMode */
public static final int
	Linear = 0,
	PerspectiveCorrect = 1;

// Not in the Tgl leak, inferred from the assembly
/** enum Tgl::MaterialMode */
public static final int
	FromParent = 0,
	FromFrame = 1,
	FromMesh = 2;

@Namespace("Tgl") public static class PaletteEntry extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PaletteEntry() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PaletteEntry(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PaletteEntry(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PaletteEntry position(long position) {
        return (PaletteEntry)super.position(position);
    }
    @Override public PaletteEntry getPointer(long i) {
        return new PaletteEntry((Pointer)this).offsetAddress(i);
    }

	public native @Cast("unsigned char") byte m_red(); public native PaletteEntry m_red(byte setter);
	public native @Cast("unsigned char") byte m_green(); public native PaletteEntry m_green(byte setter);
	public native @Cast("unsigned char") byte m_blue(); public native PaletteEntry m_blue(byte setter);
}

@Namespace("Tgl") public static class DeviceDirect3DCreateData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DeviceDirect3DCreateData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceDirect3DCreateData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceDirect3DCreateData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DeviceDirect3DCreateData position(long position) {
        return (DeviceDirect3DCreateData)super.position(position);
    }
    @Override public DeviceDirect3DCreateData getPointer(long i) {
        return new DeviceDirect3DCreateData((Pointer)this).offsetAddress(i);
    }

	public native IDirect3D2 m_pDirect3D(); public native DeviceDirect3DCreateData m_pDirect3D(IDirect3D2 setter);
	public native IDirect3DDevice2 m_pDirect3DDevice(); public native DeviceDirect3DCreateData m_pDirect3DDevice(IDirect3DDevice2 setter);
}

@Namespace("Tgl") public static class DeviceDirectDrawCreateData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DeviceDirectDrawCreateData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceDirectDrawCreateData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceDirectDrawCreateData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DeviceDirectDrawCreateData position(long position) {
        return (DeviceDirectDrawCreateData)super.position(position);
    }
    @Override public DeviceDirectDrawCreateData getPointer(long i) {
        return new DeviceDirectDrawCreateData((Pointer)this).offsetAddress(i);
    }

	public native @Const GUID m_driverGUID(); public native DeviceDirectDrawCreateData m_driverGUID(GUID setter);
	public native HWND m_hWnd(); public native DeviceDirectDrawCreateData m_hWnd(HWND setter);
	public native IDirectDraw m_pDirectDraw(); public native DeviceDirectDrawCreateData m_pDirectDraw(IDirectDraw setter);
	public native IDirectDrawSurface m_pFrontBuffer(); public native DeviceDirectDrawCreateData m_pFrontBuffer(IDirectDrawSurface setter);
	public native IDirectDrawSurface m_pBackBuffer(); public native DeviceDirectDrawCreateData m_pBackBuffer(IDirectDrawSurface setter);

	// These have possibly been removed in the shipped game
	// (Put them back if we can verify when we find a callsite
	// which constructs this type)
	// IDirectDrawPalette* m_pPalette;
	// int m_isFullScreen;
}

// Result type used for all methods in the Tgl API
@Namespace("Tgl") public enum Result {
	Error(0),
	Success(1);

    public final int value;
    private Result(int v) { this.value = v; }
    private Result(Result e) { this.value = e.value; }
    public Result intern() { for (Result e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// FUNCTION: BETA10 0x10169c60
@Namespace("Tgl") public static native int Succeeded(Result result);

// Forward declarations

// VTABLE: LEGO1 0x100db980
// VTABLE: BETA10 0x101c3148
@Namespace("Tgl") public static class Object extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Object(Pointer p) { super(p); }

	// FUNCTION: LEGO1 0x100a2240
	// FUNCTION: BETA10 0x10169c90

	public native Pointer ImplementationDataPtr();

	// SYNTHETIC: BETA10 0x10169b50
	// Tgl::Object::Object

	// SYNTHETIC: LEGO1 0x100a2250
	// SYNTHETIC: BETA10 0x10169cb0
	// Tgl::Object::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100db948
// VTABLE: BETA10 0x101c3110
@Namespace("Tgl") public static class Renderer extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Renderer(Pointer p) { super(p); }

	// vtable+0x08
	public native Device CreateDevice(@Const @ByRef DeviceDirectDrawCreateData arg0);
	public native Device CreateDevice(@Const @ByRef DeviceDirect3DCreateData arg0);

	// vtable+0x10
	public native View CreateView(
			@Const Device arg0,
			@Const Camera arg1,
			@Cast("unsigned int") int x,
			@Cast("unsigned int") int y,
			@Cast("unsigned int") int width,
			@Cast("unsigned int") int height
		);
	public native Camera CreateCamera();
	public native Light CreateLight(@Cast("Tgl::LightType") int arg0, float r, float g, float b);
	public native Group CreateGroup(@Const Group pParent/*=0*/);
	public native Group CreateGroup();

	// vtable+0x20
	public native MeshBuilder CreateMeshBuilder();
	public native Texture CreateTexture(
			int width,
			int height,
			int bitsPerTexel,
			@Const Pointer pTexels,
			int pTexelsArePersistent,
			int paletteEntryCount,
			@Const PaletteEntry pEntries
		);
	public native Texture CreateTexture();
	public native Result SetTextureDefaultShadeCount(@Cast("unsigned int") int arg0);

	// vtable+0x30
	public native Result SetTextureDefaultColorCount(@Cast("unsigned int") int arg0);

	// SYNTHETIC: BETA10 0x10169ae0
	// Tgl::Renderer::Renderer

	// SYNTHETIC: LEGO1 0x100a1770
	// SYNTHETIC: BETA10 0x10169b80
	// Tgl::Renderer::~Renderer

	// SYNTHETIC: LEGO1 0x100a17c0
	// SYNTHETIC: BETA10 0x10169be0
	// Tgl::Renderer::`scalar deleting destructor'
}

@Namespace("Tgl") public static native Renderer CreateRenderer();

// VTABLE: LEGO1 0x100db9b8
// VTABLE: BETA10 0x101c32b0
@Namespace("Tgl") public static class Device extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Device(Pointer p) { super(p); }

	// vtable+0x08
	public native @Cast("unsigned int") int GetWidth();
	public native @Cast("unsigned int") int GetHeight();

	// vtable+0x10
	public native Result SetColorModel(@Cast("Tgl::ColorModel") int arg0);
	public native Result SetShadingModel(@Cast("Tgl::ShadingModel") int arg0);
	public native Result SetShadeCount(@Cast("unsigned int") int arg0);
	public native Result SetDither(int arg0);

	// vtable+0x20
	public native Result Update();
	public native void HandleActivate(@Cast("WORD") short arg0);
	public native void HandlePaint(Pointer arg0);

	// SYNTHETIC: BETA10 0x1016b740
	// Tgl::Device::Device

	// SYNTHETIC: LEGO1 0x100a2350
	// SYNTHETIC: BETA10 0x1016b7b0
	// Tgl::Device::~Device

	// SYNTHETIC: LEGO1 0x100a28e0
	// SYNTHETIC: BETA10 0x1016bbc0
	// Tgl::Device::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dba28
// VTABLE: BETA10 0x101c32e0
@Namespace("Tgl") public static class View extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public View(Pointer p) { super(p); }

	public native Result Add(@Const Light arg0);
	public native Result Remove(@Const Light arg0);

	// vtable+0x10
	public native Result SetCamera(@Const Camera arg0);
	public native Result SetProjection(@Cast("Tgl::ProjectionType") int arg0);
	public native Result SetFrustrum(float frontClippingDistance, float backClippingDistance, float degrees);
	public native Result SetBackgroundColor(float r, float g, float b);

	// vtable+0x20
	public native Result GetBackgroundColor(FloatPointer r, FloatPointer g, FloatPointer b);
	public native Result GetBackgroundColor(FloatBuffer r, FloatBuffer g, FloatBuffer b);
	public native Result GetBackgroundColor(float[] r, float[] g, float[] b);
	public native Result Clear();
	public native Result Render(@Const Group arg0);
	public native Result ForceUpdate(@Cast("unsigned int") int x, @Cast("unsigned int") int y, @Cast("unsigned int") int width, @Cast("unsigned int") int height);

	// vtable+0x30
	public native Result TransformWorldToScreen(@Const FloatPointer world, FloatPointer screen);
	public native Result TransformWorldToScreen(@Const FloatBuffer world, FloatBuffer screen);
	public native Result TransformWorldToScreen(@Const float[] world, float[] screen);
	public native Result TransformScreenToWorld(@Const FloatPointer screen, FloatPointer world);
	public native Result TransformScreenToWorld(@Const FloatBuffer screen, FloatBuffer world);
	public native Result TransformScreenToWorld(@Const float[] screen, float[] world);

	// Pick():
	//  x, y:
	//      view coordinates
	//
	//  ppGroupsToPickFrom:
	//      array of (Group*) in any order
	//      Groups to pick from
	//
	//  groupsToPickFromCount:
	//      size of ppGroupsToPickFrom
	//
	//  rppPickedGroups:
	//      output parameter
	//      array of (Group*) representing a Group hierarchy
	//      top-down order (element 0 is root/scene)
	//      caller must deallocate array
	//      ref count of each element (Group*) has not been increased
	//      an element will be 0, if a corresponding Group was not found in ppGroupsToPickFrom
	//
	//  rPickedGroupCount:
	//      output parameter
	//      size of rppPickedGroups
	public native Result Pick(
			int x,
			int y,
			@Cast("const Tgl::Group**") PointerPointer ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntPointer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntPointer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntBuffer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef int[] rPickedGroupCount
		);

	// SYNTHETIC: BETA10 0x1016b850
	// Tgl::View::View

	// SYNTHETIC: LEGO1 0x100a2430
	// SYNTHETIC: BETA10 0x1016b8c0
	// Tgl::View::~View

	// SYNTHETIC: LEGO1 0x100a2950
	// SYNTHETIC: BETA10 0x1016bc00
	// Tgl::View::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbae8
// VTABLE: BETA10 0x101c3320
@Namespace("Tgl") public static class Camera extends Object {
    static { Loader.load(); }
    /** Default native constructor. */
    public Camera() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Camera(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Camera(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Camera position(long position) {
        return (Camera)super.position(position);
    }
    @Override public Camera getPointer(long i) {
        return new Camera((Pointer)this).offsetAddress(i);
    }

	

	// SYNTHETIC: BETA10 0x1016b960
	// Tgl::Camera::Camera

	// SYNTHETIC: LEGO1 0x100a25f0
	// SYNTHETIC: BETA10 0x1016b9d0
	// Tgl::Camera::~Camera

	// SYNTHETIC: LEGO1 0x100a2a30
	// SYNTHETIC: BETA10 0x1016bc40
	// Tgl::Camera::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbb08
// VTABLE: BETA10 0x101c3330
@Namespace("Tgl") public static class Light extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Light(Pointer p) { super(p); }

	
	public native Result SetColor(float r, float g, float b);

	// SYNTHETIC: BETA10 0x1016ba70
	// Tgl::Light::Light

	// SYNTHETIC: LEGO1 0x100a26d0
	// SYNTHETIC: BETA10 0x1016bae0
	// Tgl::Light::~Light

	// SYNTHETIC: LEGO1 0x100a2aa0
	// SYNTHETIC: BETA10 0x1016bc80
	// Tgl::Light::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbbb0
// VTABLE: BETA10 0x101c3360
@Namespace("Tgl") public static class Mesh extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Mesh(Pointer p) { super(p); }

	public native Result SetColor(float r, float g, float b, float a);
	public native Result SetTexture(@Const Texture arg0);
	public native Result GetTexture(@ByPtrRef Texture arg0);

	public native Result SetTextureMappingMode(@Cast("Tgl::TextureMappingMode") int arg0);
	public native Result SetShadingModel(@Cast("Tgl::ShadingModel") int arg0);

	// Clone data in underlying group
	public native Mesh DeepClone(MeshBuilder arg0);

	// Just get another Group pointing to the same underlying data
	public native Mesh ShallowClone(MeshBuilder arg0);

	// SYNTHETIC: BETA10 0x1016fad0
	// Tgl::Mesh::Mesh

	// SYNTHETIC: LEGO1 0x100a3e10
	// SYNTHETIC: BETA10 0x1016fb40
	// Tgl::Mesh::~Mesh

	// SYNTHETIC: LEGO1 0x100a3e60
	// SYNTHETIC: BETA10 0x1016fbe0
	// Tgl::Mesh::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbaa0
// VTABLE: BETA10 0x101c3188
@Namespace("Tgl") public static class Group extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Group(Pointer p) { super(p); }

	
	public native Result SetColor(float r, float g, float b, float a);
	public native Result SetTexture(@Const Texture arg0);
	public native Result GetTexture(@ByPtrRef Texture arg0);
	public native Result SetMaterialMode(@Cast("Tgl::MaterialMode") int arg0);
	public native Result Add(@Const Group arg0);
	public native Result Add(@Const MeshBuilder arg0);
	public native Result Remove(@Const Group arg0);
	public native Result Remove(@Const MeshBuilder arg0);
	public native Result RemoveAll();

	// This is TransformLocalToWorld in the leak, however it seems
	// to have been replaced by something else in the shipped code.
	public native Result Bounds(D3DVECTOR arg0, D3DVECTOR arg1);

	// SYNTHETIC: BETA10 0x1016a300
	// Tgl::Group::Group

	// SYNTHETIC: LEGO1 0x100a2510
	// SYNTHETIC: BETA10 0x1016a370
	// Tgl::Group::~Group

	// SYNTHETIC: LEGO1 0x100a29c0
	// SYNTHETIC: BETA10 0x1016a3d0
	// Tgl::Group::`scalar deleting destructor'
}

// Don't know what this is. Seems like another Tgl object which
// was not in the leaked Tgl code. My suspicion is that it's
// some kind of builder class for creating meshes.
// VTABLE: LEGO1 0x100dbb30
// VTABLE: BETA10 0x101c32a0
@Namespace("Tgl") public static class MeshBuilder extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MeshBuilder(Pointer p) { super(p); }

	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") FloatPointer pPositions,
			@Cast("float*") FloatPointer pNormals,
			@Cast("float*") FloatPointer pTextureCoordinates,
			@Cast("unsigned int*") IntPointer pFaceIndices,
			@Cast("unsigned int*") IntPointer pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") FloatBuffer pPositions,
			@Cast("float*") FloatBuffer pNormals,
			@Cast("float*") FloatBuffer pTextureCoordinates,
			@Cast("unsigned int*") IntBuffer pFaceIndices,
			@Cast("unsigned int*") IntBuffer pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") float[] pPositions,
			@Cast("float*") float[] pNormals,
			@Cast("float*") float[] pTextureCoordinates,
			@Cast("unsigned int*") int[] pFaceIndices,
			@Cast("unsigned int*") int[] pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Result GetBoundingBox(FloatPointer min, FloatPointer max);
	public native Result GetBoundingBox(FloatBuffer min, FloatBuffer max);
	public native Result GetBoundingBox(float[] min, float[] max);
	public native MeshBuilder Clone();

	// SYNTHETIC: BETA10 0x1016b630
	// Tgl::MeshBuilder::MeshBuilder

	// SYNTHETIC: LEGO1 0x100a27b0
	// SYNTHETIC: BETA10 0x1016b6a0
	// Tgl::MeshBuilder::~MeshBuilder

	// SYNTHETIC: LEGO1 0x100a2b10
	// SYNTHETIC: BETA10 0x1016bb80
	// Tgl::MeshBuilder::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbb68
// VTABLE: BETA10 0x101c3280
@Namespace("Tgl") public static class Texture extends Object {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Texture(Pointer p) { super(p); }

	// vtable+0x08
	public native Result SetTexels(int width, int height, int bitsPerTexel, Pointer pTexels, int pTexelsArePersistent);
	public native void FillRowsOfTexture(int y, int height, Pointer pBuffer);

	// vtable+0x10
	public native Result Changed(int texelsChanged, int paletteChanged);
	public native Result GetBufferAndPalette(
			IntPointer pWidth,
			IntPointer pHeight,
			IntPointer pDepth,
			@Cast("void**") PointerPointer ppBuffer,
			IntPointer pPaletteSize,
			@Cast("unsigned char*") BytePointer pEntries
		);
	public native Result GetBufferAndPalette(
			IntPointer pWidth,
			IntPointer pHeight,
			IntPointer pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			IntPointer pPaletteSize,
			@Cast("unsigned char*") BytePointer pEntries
		);
	public native Result GetBufferAndPalette(
			IntBuffer pWidth,
			IntBuffer pHeight,
			IntBuffer pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			IntBuffer pPaletteSize,
			@Cast("unsigned char*") ByteBuffer pEntries
		);
	public native Result GetBufferAndPalette(
			int[] pWidth,
			int[] pHeight,
			int[] pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			int[] pPaletteSize,
			@Cast("unsigned char*") byte[] pEntries
		);
	public native Result SetPalette(int entryCount, PaletteEntry pEntries);

	// SYNTHETIC: BETA10 0x1016b520
	// Tgl::Texture::Texture

	// SYNTHETIC: LEGO1 0x100a2890
	// SYNTHETIC: BETA10 0x1016b590
	// Tgl::Texture::~Texture

	// SYNTHETIC: LEGO1 0x100a2b80
	// SYNTHETIC: BETA10 0x1016bb40
	// Tgl::Texture::`scalar deleting destructor'
}

 // namespace Tgl

// #endif /* _tgl_h */


// Parsed from d3drm/impl.h

// #ifndef TGL_D3DRM_IMPL_H
// #define TGL_D3DRM_IMPL_H

// #include "compat.h"
// #include "decomp.h"
// #include "tgl/tgl.h"

// #ifdef MINIWIN
// #else
// #include <d3drm.h>
// #endif

// Forward declare D3D types
@Opaque public static class IDirect3DRMMeshBuilder extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public IDirect3DRMMeshBuilder() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IDirect3DRMMeshBuilder(Pointer p) { super(p); }
}

// Utility function used by implementations
// FUNCTION: BETA10 0x10169cf0
@Namespace("TglImpl") public static native Result ResultVal(@Cast("HRESULT") long result);

// Forward declare implementations

// VTABLE: LEGO1 0x100db910
// VTABLE: BETA10 0x101c30d8
@Namespace("TglImpl") @NoOffset public static class RendererImpl extends Renderer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RendererImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RendererImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RendererImpl position(long position) {
        return (RendererImpl)super.position(position);
    }
    @Override public RendererImpl getPointer(long i) {
        return new RendererImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x10169a20
	public RendererImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10169d20

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native Device CreateDevice(@Const @ByRef DeviceDirectDrawCreateData arg0);
	public native Device CreateDevice(@Const @ByRef DeviceDirect3DCreateData arg0);

	// vtable+0x10
	public native View CreateView(
			@Const Device arg0,
			@Const Camera arg1,
			@Cast("unsigned int") int x,
			@Cast("unsigned int") int y,
			@Cast("unsigned int") int width,
			@Cast("unsigned int") int height
		);
	public native Camera CreateCamera();
	public native Light CreateLight(@Cast("Tgl::LightType") int arg0, float r, float g, float b);
	public native Group CreateGroup(@Const Group pParent);

	// vtable+0x20
	public native MeshBuilder CreateMeshBuilder();
	public native Texture CreateTexture(
			int width,
			int height,
			int bitsPerTexel,
			@Const Pointer pTexels,
			int pTexelsArePersistent,
			int paletteEntryCount,
			@Const PaletteEntry pEntries
		);
	public native Texture CreateTexture();

	public native Result SetTextureDefaultShadeCount(@Cast("unsigned int") int arg0);

	// vtable+0x30
	public native Result SetTextureDefaultColorCount(@Cast("unsigned int") int arg0);

	public native @Cast("HRESULT") long CreateTextureFromSurface(IDirectDrawSurface pSurface, @Cast("LPDIRECT3DRMTEXTURE2*") PointerPointer pTexture2);

	// FUNCTION: BETA10 0x10174c10
	public native @Cast("TglImpl::RendererImpl::RendererDataType*") @ByRef PointerPointer ImplementationData();
	public native Result Create();
	public native void Destroy();
	public native Result CreateLight(@Cast("Tgl::LightType") int type, float r, float g, float b, @ByRef LightImpl rLight);
	public native Result CreateGroup(@Const GroupImpl pParentGroup, @ByRef GroupImpl rpGroup);
	public native Result CreateView(
			@Const @ByRef DeviceImpl rDevice,
			@Const @ByRef CameraImpl rCamera,
			@Cast("unsigned int") int x,
			@Cast("unsigned int") int y,
			@Cast("unsigned int") int width,
			@Cast("unsigned int") int height,
			@ByRef ViewImpl rView
		);
	public native Result CreateMeshBuilder(@ByRef MeshBuilderImpl rMesh);
	public native Result CreateCamera(@ByRef CameraImpl rCamera);
	public native Result CreateTexture(@ByRef TextureImpl rTexture);
	public native Result CreateTexture(
			@ByRef TextureImpl rTexture,
			int width,
			int height,
			int bitsPerTexel,
			@Const Pointer pTexels,
			int texelsArePersistent,
			int paletteEntryCount,
			@Const PaletteEntry pEntries
		);
	public native Result CreateDevice(@Const @ByRef DeviceDirect3DCreateData rCreateData, @ByRef DeviceImpl rDevice);
	public native Result CreateDevice(@Const @ByRef DeviceDirectDrawCreateData rCreateData, @ByRef DeviceImpl rDevice);
}

@Namespace("TglImpl") public static native IDirect3DRM2 g_pD3DRM(); public static native void g_pD3DRM(IDirect3DRM2 setter);

// FUNCTION: BETA10 0x1016dd20
@Namespace("TglImpl") public static native void RendererDestroy(IDirect3DRM2 pRenderer);

// Inlined only
// FUNCTION: BETA10 0x1016dce0


// VTABLE: LEGO1 0x100db988
// VTABLE: BETA10 0x101c31f0
@Namespace("TglImpl") @NoOffset public static class DeviceImpl extends Device {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DeviceImpl position(long position) {
        return (DeviceImpl)super.position(position);
    }
    @Override public DeviceImpl getPointer(long i) {
        return new DeviceImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b2e0
	public DeviceImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016dd80

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native @Cast("unsigned int") int GetWidth();
	public native @Cast("unsigned int") int GetHeight();

	// vtable+0x10
	public native Result SetColorModel(@Cast("Tgl::ColorModel") int arg0);
	public native Result SetShadingModel(@Cast("Tgl::ShadingModel") int arg0);
	public native Result SetShadeCount(@Cast("unsigned int") int arg0);
	public native Result SetDither(int arg0);

	// vtable+0x20
	public native Result Update();
	public native void HandleActivate(@Cast("WORD") short arg0);
	public native void HandlePaint(Pointer arg0);

	// FUNCTION: BETA10 0x101708e0

	// FUNCTION: BETA10 0x100d9540
	public native @Cast("TglImpl::DeviceImpl::DeviceDataType*") @ByRef PointerPointer ImplementationData();

	public native void SetImplementationData(IDirect3DRMDevice2 device);

	public native void Destroy();
}

// FUNCTION: BETA10 0x101708c0
@Namespace("TglImpl") public static native void DeviceDestroy(IDirect3DRMDevice2 pDevice);

// FUNCTION: BETA10 0x10170880


// VTABLE: LEGO1 0x100db9e8
// VTABLE: BETA10 0x101c3220
@Namespace("TglImpl") @NoOffset public static class ViewImpl extends View {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ViewImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ViewImpl position(long position) {
        return (ViewImpl)super.position(position);
    }
    @Override public ViewImpl getPointer(long i) {
        return new ViewImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b360
	public ViewImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016e5d0

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native Result Add(@Const Light arg0);
	public native Result Remove(@Const Light arg0);

	// vtable+0x10
	public native Result SetCamera(@Const Camera arg0);
	public native Result SetProjection(@Cast("Tgl::ProjectionType") int arg0);
	public native Result SetFrustrum(float frontClippingDistance, float backClippingDistance, float degrees);
	public native Result SetBackgroundColor(float r, float g, float b);

	// vtable+0x20
	public native Result GetBackgroundColor(FloatPointer r, FloatPointer g, FloatPointer b);
	public native Result GetBackgroundColor(FloatBuffer r, FloatBuffer g, FloatBuffer b);
	public native Result GetBackgroundColor(float[] r, float[] g, float[] b);
	public native Result Clear();
	public native Result Render(@Const Group arg0);
	public native Result ForceUpdate(@Cast("unsigned int") int x, @Cast("unsigned int") int y, @Cast("unsigned int") int width, @Cast("unsigned int") int height);

	// vtable+0x30
	public native Result TransformWorldToScreen(@Const FloatPointer world, FloatPointer screen);
	public native Result TransformWorldToScreen(@Const FloatBuffer world, FloatBuffer screen);
	public native Result TransformWorldToScreen(@Const float[] world, float[] screen);
	public native Result TransformScreenToWorld(@Const FloatPointer screen, FloatPointer world);
	public native Result TransformScreenToWorld(@Const FloatBuffer screen, FloatBuffer world);
	public native Result TransformScreenToWorld(@Const float[] screen, float[] world);
	public native Result Pick(
			int x,
			int y,
			@Cast("const Tgl::Group**") PointerPointer ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntPointer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntPointer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntBuffer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr Group ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef int[] rPickedGroupCount
		);

	// FUNCTION: BETA10 0x101711c0
	public native @Cast("TglImpl::ViewImpl::ViewDataType*") @ByRef PointerPointer ImplementationData();

	public native void SetImplementationData(IDirect3DRMViewport viewport);

	public static native Result ViewportCreateAppData(IDirect3DRM2 arg0, IDirect3DRMViewport arg1, IDirect3DRMFrame2 arg2);

	public native void Destroy();
	public native Result Add(@Const @ByRef LightImpl rLight);
	public native Result Remove(@Const @ByRef LightImpl rLight);
	public native Result SetCamera(@Const @ByRef CameraImpl rCamera);
	public native Result Render(@Const @ByRef GroupImpl rScene);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr GroupImpl ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntPointer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr GroupImpl ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef IntBuffer rPickedGroupCount
		);
	public native Result Pick(
			int x,
			int y,
			@Const @ByPtrPtr GroupImpl ppGroupsToPickFrom,
			int groupsToPickFromCount,
			@Cast("const Tgl::Group**&") @ByRef PointerPointer rppPickedGroups,
			@ByRef int[] rPickedGroupCount
		);
}

// FUNCTION: BETA10 0x101711a0
@Namespace("TglImpl") public static native void ViewDestroy(IDirect3DRMViewport pView);

// FUNCTION: BETA10 0x10171160


// VTABLE: LEGO1 0x100dbad8
// VTABLE: BETA10 0x101c3260
@Namespace("TglImpl") @NoOffset public static class CameraImpl extends Camera {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CameraImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CameraImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CameraImpl position(long position) {
        return (CameraImpl)super.position(position);
    }
    @Override public CameraImpl getPointer(long i) {
        return new CameraImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b3e0
	public CameraImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016f200

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	

	// FUNCTION: BETA10 0x10170960

	// FUNCTION: BETA10 0x10170980
	public native @Cast("TglImpl::CameraImpl::CameraDataType*") @ByRef PointerPointer ImplementationData();

	public native void Destroy();
}

// FUNCTION: BETA10 0x10170940
@Namespace("TglImpl") public static native void CameraDestroy(IDirect3DRMFrame2 pFrame);

// FUNCTION: BETA10 0x10170900


// VTABLE: LEGO1 0x100dbaf8
// VTABLE: BETA10 0x101c3270
@Namespace("TglImpl") @NoOffset public static class LightImpl extends Light {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LightImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LightImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LightImpl position(long position) {
        return (LightImpl)super.position(position);
    }
    @Override public LightImpl getPointer(long i) {
        return new LightImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b460
	public LightImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016f5c0

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	
	public native Result SetColor(float r, float g, float b);

	// FUNCTION: BETA10 0x10171b90

	// FUNCTION: BETA10 0x10171240
	public native @Cast("TglImpl::LightImpl::LightDataType*") @ByRef PointerPointer ImplementationData();

	public native void Destroy();
}

// FUNCTION: BETA10 0x10171220
@Namespace("TglImpl") public static native void LightDestroy(IDirect3DRMFrame2 pLight);

// FUNCTION: BETA10 0x101711e0


// VTABLE: LEGO1 0x100dbb88
// VTABLE: BETA10 0x101c3340
@Namespace("TglImpl") @NoOffset public static class MeshImpl extends Mesh {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MeshImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MeshImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MeshImpl position(long position) {
        return (MeshImpl)super.position(position);
    }
    @Override public MeshImpl getPointer(long i) {
        return new MeshImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016f970
	public MeshImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10170460

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native Result SetColor(float r, float g, float b, float a);
	public native Result SetTexture(@Const Texture arg0);

	// vtable+0x10
	public native Result GetTexture(@ByPtrRef Texture arg0);
	public native Result SetTextureMappingMode(@Cast("Tgl::TextureMappingMode") int arg0);
	public native Result SetShadingModel(@Cast("Tgl::ShadingModel") int arg0);
	public native Mesh DeepClone(MeshBuilder arg0);

	// vtable+0x20
	public native Mesh ShallowClone(MeshBuilder arg0);

	public static class MeshData extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public MeshData() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public MeshData(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public MeshData(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public MeshData position(long position) {
	        return (MeshData)super.position(position);
	    }
	    @Override public MeshData getPointer(long i) {
	        return new MeshData((Pointer)this).offsetAddress(i);
	    }
	
		public native IDirect3DRMMesh groupMesh(); public native MeshData groupMesh(IDirect3DRMMesh setter);
		public native @Cast("D3DRMGROUPINDEX") int groupIndex(); public native MeshData groupIndex(int setter);
	}

	// FUNCTION: BETA10 0x10171b70
	public native @Cast("TglImpl::MeshImpl::MeshDataType*") @ByRef PointerPointer ImplementationData();

	public native void Destroy();
	public native Mesh DeepClone(@Const @ByRef MeshBuilderImpl rMesh);
	public native Result GetTexture(@Cast("TglImpl::TextureImpl**") PointerPointer ppTexture);
	public native Result GetTexture(@ByPtrPtr TextureImpl ppTexture);
	public native Result SetTexture(@Const TextureImpl pTexture);
	public native Mesh ShallowClone(@Const @ByRef MeshBuilderImpl rMesh);
}

// FUNCTION: BETA10 0x10171b40
@Namespace("TglImpl") public static native void MeshDestroy(@Cast("TglImpl::MeshImpl::MeshDataType") MeshImpl.MeshData pMesh);

// FUNCTION: BETA10 0x10171b00


// VTABLE: LEGO1 0x100dba68
// VTABLE: BETA10 0x101c3150
@Namespace("TglImpl") @NoOffset public static class GroupImpl extends Group {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GroupImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public GroupImpl position(long position) {
        return (GroupImpl)super.position(position);
    }
    @Override public GroupImpl getPointer(long i) {
        return new GroupImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016a240
	public GroupImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016a410

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	
	public native Result SetColor(float r, float g, float b, float a);

	// vtable+0x10
	public native Result SetTexture(@Const Texture arg0);
	public native Result GetTexture(@ByPtrRef Texture arg0);
	public native Result SetMaterialMode(@Cast("Tgl::MaterialMode") int arg0);
	public native Result Add(@Const Group arg0);

	// vtable+0x20
	public native Result Add(@Const MeshBuilder arg0);
	public native Result Remove(@Const Group arg0);
	public native Result Remove(@Const MeshBuilder arg0);
	public native Result RemoveAll();

	// vtable+0x30
	public native Result Bounds(D3DVECTOR p_min, D3DVECTOR p_max);

	// FUNCTION: BETA10 0x1016fc20

	// FUNCTION: BETA10 0x1016fce0
	public native @Cast("TglImpl::GroupImpl::GroupDataType*") @ByRef PointerPointer ImplementationData();

	public native void Destroy();
	public native Result SetTexture(@Const TextureImpl pTexture);
	public native Result GetTexture(@Cast("TglImpl::TextureImpl**") PointerPointer ppTexture);
	public native Result GetTexture(@ByPtrPtr TextureImpl ppTexture);
	public native Result Add(@Const @ByRef GroupImpl rGroup);
	public native Result Add(@Const @ByRef MeshBuilderImpl rMesh);
	public native Result Remove(@Const @ByRef GroupImpl rGroup);
	public native Result Remove(@Const @ByRef MeshBuilderImpl rMesh);
}

// FUNCTION: BETA10 0x1016c2b0
@Namespace("TglImpl") public static native void GroupDestroy(IDirect3DRMFrame2 pGroup);

// FUNCTION: BETA10 0x1016c270


// VTABLE: LEGO1 0x100dbb18
// VTABLE: BETA10 0x101c31e0
@Namespace("TglImpl") @NoOffset public static class MeshBuilderImpl extends MeshBuilder {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MeshBuilderImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MeshBuilderImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MeshBuilderImpl position(long position) {
        return (MeshBuilderImpl)super.position(position);
    }
    @Override public MeshBuilderImpl getPointer(long i) {
        return new MeshBuilderImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b260
	public MeshBuilderImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016c7e0

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") FloatPointer pPositions,
			@Cast("float*") FloatPointer pNormals,
			@Cast("float*") FloatPointer pTextureCoordinates,
			@Cast("unsigned int*") IntPointer pFaceIndices,
			@Cast("unsigned int*") IntPointer pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") FloatBuffer pPositions,
			@Cast("float*") FloatBuffer pNormals,
			@Cast("float*") FloatBuffer pTextureCoordinates,
			@Cast("unsigned int*") IntBuffer pFaceIndices,
			@Cast("unsigned int*") IntBuffer pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Mesh CreateMesh(
			@Cast("unsigned int") int faceCount,
			@Cast("unsigned int") int vertexCount,
			@Cast("float*") float[] pPositions,
			@Cast("float*") float[] pNormals,
			@Cast("float*") float[] pTextureCoordinates,
			@Cast("unsigned int*") int[] pFaceIndices,
			@Cast("unsigned int*") int[] pTextureIndices,
			@Cast("Tgl::ShadingModel") int shadingModel
		);
	public native Result GetBoundingBox(FloatPointer min, FloatPointer max);
	public native Result GetBoundingBox(FloatBuffer min, FloatBuffer max);
	public native Result GetBoundingBox(float[] min, float[] max);

	// vtable+0x10
	public native MeshBuilder Clone();

	// FUNCTION: BETA10 0x10170420

	// FUNCTION: BETA10 0x10170440
	public native @Cast("TglImpl::MeshBuilderImpl::MeshBuilderDataType*") @ByRef PointerPointer ImplementationData();

	public native void Destroy();
}

// FUNCTION: BETA10 0x10170390
@Namespace("TglImpl") public static native void MeshBuilderDestroy(IDirect3DRMMesh pMeshBuilder);

// FUNCTION: BETA10 0x10170350


// No vtable, this is just a simple wrapper around D3DRMIMAGE
@Namespace("TglImpl") @NoOffset public static class TglD3DRMIMAGE extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TglD3DRMIMAGE(Pointer p) { super(p); }

	public TglD3DRMIMAGE(
			int width,
			int height,
			int depth,
			Pointer pBuffer,
			int useBuffer,
			int paletteSize,
			PaletteEntry pEntries
		) { super((Pointer)null); allocate(width, height, depth, pBuffer, useBuffer, paletteSize, pEntries); }
	private native void allocate(
			int width,
			int height,
			int depth,
			Pointer pBuffer,
			int useBuffer,
			int paletteSize,
			PaletteEntry pEntries
		);

	public native Result CreateBuffer(int width, int height, int depth, Pointer pBuffer, int useBuffer);
	public native void Destroy();
	public native Result FillRowsOfTexture(int y, int height, @Cast("char*") BytePointer content);
	public native Result FillRowsOfTexture(int y, int height, @Cast("char*") ByteBuffer content);
	public native Result FillRowsOfTexture(int y, int height, @Cast("char*") byte[] content);
	public native Result InitializePalette(int paletteSize, PaletteEntry pEntries);

	public native @ByRef D3DRMIMAGE m_image(); public native TglD3DRMIMAGE m_image(D3DRMIMAGE setter);
	public native int m_texelsAllocatedByClient(); public native TglD3DRMIMAGE m_texelsAllocatedByClient(int setter);

	// SYNTHETIC: BETA10 0x1016abb0
	// TglImpl::TglD3DRMIMAGE::`scalar deleting destructor'
}

// VTABLE: LEGO1 0x100dbb48
// VTABLE: BETA10 0x101c31c0
@Namespace("TglImpl") @NoOffset public static class TextureImpl extends Texture {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TextureImpl(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TextureImpl(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TextureImpl position(long position) {
        return (TextureImpl)super.position(position);
    }
    @Override public TextureImpl getPointer(long i) {
        return new TextureImpl((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: BETA10 0x1016b1e0
	public TextureImpl() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1016c2d0

	public native Pointer ImplementationDataPtr();

	// vtable+0x08
	public native Result SetTexels(int width, int height, int bitsPerTexel, Pointer pTexels, int pTexelsArePersistent);
	public native void FillRowsOfTexture(int y, int height, Pointer pBuffer);

	// vtable+0x10
	public native Result Changed(int texelsChanged, int paletteChanged);
	public native Result GetBufferAndPalette(
			IntPointer pWidth,
			IntPointer pHeight,
			IntPointer pDepth,
			@Cast("void**") PointerPointer ppBuffer,
			IntPointer ppPaletteSize,
			@Cast("unsigned char*") BytePointer pEntries
		);
	public native Result GetBufferAndPalette(
			IntPointer pWidth,
			IntPointer pHeight,
			IntPointer pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			IntPointer ppPaletteSize,
			@Cast("unsigned char*") BytePointer pEntries
		);
	public native Result GetBufferAndPalette(
			IntBuffer pWidth,
			IntBuffer pHeight,
			IntBuffer pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			IntBuffer ppPaletteSize,
			@Cast("unsigned char*") ByteBuffer pEntries
		);
	public native Result GetBufferAndPalette(
			int[] pWidth,
			int[] pHeight,
			int[] pDepth,
			@Cast("void**") @ByPtrPtr Pointer ppBuffer,
			int[] ppPaletteSize,
			@Cast("unsigned char*") byte[] pEntries
		);
	public native Result SetPalette(int entryCount, PaletteEntry entries);

	// FUNCTION: BETA10 0x1016fd60

	// FUNCTION: BETA10 0x1016fe20
	public native @Cast("TglImpl::TextureImpl::TextureDataType*") @ByRef PointerPointer ImplementationData();

	public native void SetImplementation(IDirect3DRMTexture pData);

	public native void Destroy();

	public static native Result SetImage(IDirect3DRMTexture pSelf, TglD3DRMIMAGE pImage);
}

// FUNCTION: BETA10 0x1016fd40
@Namespace("TglImpl") public static native void TextureDestroy(IDirect3DRMTexture pTexture);

// FUNCTION: BETA10 0x1016fd00


// Used by both Mesh and MeshBuilder
// FUNCTION: BETA10 0x10170270
@Namespace("TglImpl") public static native Result MeshSetTextureMappingMode(MeshImpl.MeshData pMesh, @Cast("Tgl::TextureMappingMode") int mode);

// Translation helpers
// FUNCTION: BETA10 0x1016fc40


// FUNCTION: BETA10 0x101703b0


// Yes this function serves no purpose, originally they intended it to
// convert from doubles to floats but ended up using floats throughout
// the software stack.
// FUNCTION: BETA10 0x1016fa10


// FUNCTION: BETA10 0x1016fba0


// FUNCTION: BETA10 0x1016fd80


// FUNCTION: BETA10 0x101702e0


 /* namespace TglImpl */

// SYNTHETIC: LEGO1 0x100a16d0
// SYNTHETIC: BETA10 0x10169aa0
// TglImpl::RendererImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a22c0
// SYNTHETIC: BETA10 0x1016b700
// TglImpl::DeviceImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a23a0
// SYNTHETIC: BETA10 0x1016b810
// TglImpl::ViewImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a2480
// SYNTHETIC: BETA10 0x1016a2c0
// TglImpl::GroupImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a2560
// SYNTHETIC: BETA10 0x1016b920
// TglImpl::CameraImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a2640
// SYNTHETIC: BETA10 0x1016ba30
// TglImpl::LightImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a2720
// SYNTHETIC: BETA10 0x1016b5f0
// TglImpl::MeshBuilderImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a2800
// SYNTHETIC: BETA10 0x1016b4e0
// TglImpl::TextureImpl::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100a3d80
// SYNTHETIC: BETA10 0x1016fa90
// TglImpl::MeshImpl::`scalar deleting destructor'

// SYNTHETIC: BETA10 0x10169960
// ViewportAppData::`scalar deleting destructor'

// GLOBAL: LEGO1 0x100dd1e0
// IID_IDirect3DRMMeshBuilder

// GLOBAL: LEGO1 0x100dd1f0
// IID_IDirect3DRMMesh

// #endif


}
