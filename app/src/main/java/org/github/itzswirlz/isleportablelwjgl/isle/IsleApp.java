/*
 * This source file was generated by the Gradle 'init' task
 */
package org.github.itzswirlz.isleportablelwjgl.isle;

import com.github.vincentrussell.ini.Ini;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.SharedPtr;
import org.bytedeco.javacpp.annotation.StdString;
import org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1;
import org.lwjgl.PointerBuffer;
import org.lwjgl.sdl.*;
import org.lwjgl.system.SharedLibrary;
import org.lwjgl.system.SharedLibraryUtil;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

import static org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1.Lego;
import static org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1.Streamer;

public class IsleApp {
    private static int TARGET_WIDTH = 640;
    private static int TARGET_HEIGHT = 480;

    private static String m_hdPath = null;
    private static String m_cdPath = null;
    private static String m_deviceId = null;
    private static String m_mediaPath = null;
    private static String m_savePath = null;
    private static boolean m_fullScreen = false;
    private static boolean m_flipSurfaces = false;
    private static boolean m_backBuffersInVram = false;
    private static boolean m_using8bit = false;
    private static boolean m_using16bit = true;
    private static boolean m_hasLightSupport = false;
    private static boolean m_use3dSound = false;
    private static boolean m_useMusic = true;
    private static boolean m_wideViewAngle = true;
    private static int m_islandQuality = 2;
    private static int m_islandTexture = 1;
    private boolean m_gameStarted = false;
    private long m_frameDelta = 10;
    private static LEGO1.MxVideoParam m_videoParam = new LEGO1.MxVideoParam(new LEGO1.MxRect32(0, 0, 639, 479), null, 1, new LEGO1.MxVideoParamFlags());
    private boolean m_windowActive = true;
    private static LEGO1.HWND m_windowHandle = null;
    private boolean m_drawCursor = false;

    private static String m_iniPath = null;
    private static float m_maxLod = 0.0f;
    private static int m_maxAllowedExtras = 0;
    private static LEGO1.MxTransitionManager.TransitionType m_transitionType = LEGO1.MxTransitionManager.TransitionType.e_mosaic;

    // TODO: Touch scheme

    // TODO: cursor, bitmaps, argumenthelp

    // FIXME: Currently really only tested against my defaults on my system. Support missing keys/values/categories and INI creation
    private static boolean LoadConfig() {
        String prefPath = SDLFileSystem.SDL_GetPrefPath("isledecomp", "isle");

        m_iniPath = prefPath + "isle.ini";

        System.out.println("Reading configuration from " + m_iniPath);
        Ini ini = new Ini();
        try {
            // TODO: When INI is empty/DNE
            ini.load(new FileInputStream(m_iniPath));
        } catch(IOException e) {
            e.printStackTrace();
            System.out.println("TODO: Handling when INI is empty or sections/keys DNE");
            return false;
        }

        m_deviceId = ini.getValue("isle", "3d device id").toString();

        m_hdPath = ini.getValue("isle", "diskpath").toString();
        m_cdPath = ini.getValue("isle", "cdpath").toString();
        m_mediaPath = ini.getValue("isle", "mediapath").toString();
        m_savePath = ini.getValue("isle", "savepath").toString();

        m_flipSurfaces = ini.getValue("isle", "flip surfaces").equals("true");
        m_fullScreen = ini.getValue("isle", "full screen").equals("true");
        m_wideViewAngle = ini.getValue("isle", "wide view angle").equals("true");
        m_use3dSound = ini.getValue("isle", "3dsound").equals("true");
        m_useMusic = ini.getValue("isle", "music").equals("true");

        System.out.println("TODO: Joystick");
        System.out.println("TODO: Cursor");

        m_backBuffersInVram = ini.getValue("isle", "back buffers in video ram").equals("true");

        switch(ini.getValue("isle", "display bit depth").toString()) {
            case "8":
                m_using8bit = true;
                break;
            case "16":
                m_using16bit = true;
                break;
        }

        m_islandQuality = Integer.parseInt(ini.getValue("isle", "island quality").toString());
        m_islandTexture = Integer.parseInt(ini.getValue("isle", "island texture").toString());
        m_maxLod = Float.parseFloat(ini.getValue("isle", "max lod").toString());
        m_maxAllowedExtras = Integer.parseInt(ini.getValue("isle", "max allowed extras").toString());

        return true;
    }

    public void Close() {

    }

    public static int SetupLegoOmni() {
        int result = 0;
        int failure = 0;
        if(LEGO1.LegoOmni.GetInstance().isNull()) {
            System.out.println("INSTANCE IS NULL");
        }

        if(m_windowHandle != null) {
            LEGO1.MxOmniCreateParam param = new LEGO1.MxOmniCreateParam(m_mediaPath, m_windowHandle, m_videoParam, new LEGO1.MxOmniCreateFlags());
            System.out.println("Media path: " + param.GetMediaPath().GetData().getString());

            // event loop
            // should probably move this to another function?
            SDL_Event event = SDL_Event.create();
            while(SDLEvents.SDL_PollEvent(event)) {
                System.out.println("type: " + event.type());
            }
        } else {
            System.out.println("window hanle null");
        }
        return 0;
    }

    public static void SetupVideoFlags(
            boolean fullScreen,
            boolean flipSurfaces,
            boolean backBuffers,
            boolean using8bit,
            boolean using16bit,
            boolean hasLightSupport,
            boolean param_7,
            boolean wideViewAngle,
            String deviceId
    ) {
        m_videoParam.Flags().SetFullScreen(fullScreen);
        m_videoParam.Flags().SetFlipSurfaces(flipSurfaces);
        m_videoParam.Flags().SetBackBuffers(!backBuffers);
        m_videoParam.Flags().SetLacksLightSupport(!hasLightSupport);
        m_videoParam.Flags().SetF1bit7(param_7);
        m_videoParam.Flags().SetWideViewAngle(wideViewAngle);
        m_videoParam.Flags().SetEnabled(true);
        m_videoParam.SetDeviceName(deviceId.getBytes()); // FIXME: is this correct?
        if (using8bit) {
            m_videoParam.Flags().Set16Bit(false);
        }
        if (using16bit) {
            m_videoParam.Flags().Set16Bit(true);
        }
    }

    public static long SetupWindow() {
        if(!LoadConfig()) {
            return -1;
        }

        SetupVideoFlags(m_fullScreen,
                m_flipSurfaces,
                m_backBuffersInVram,
                m_using8bit,
                m_using16bit,
                m_hasLightSupport,
                false,
                m_wideViewAngle,
                m_deviceId);

        m_videoParam.Flags().Set16Bit(LEGO1.MxDirectDraw.GetPrimaryBitDepth() == 16);

        int props = SDLProperties.SDL_CreateProperties();
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, TARGET_WIDTH);
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, TARGET_HEIGHT);
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN, m_fullScreen);
        SDLProperties.SDL_SetStringProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_TITLE_STRING, "LEGO");

        // FIXME: PLATFORM DEPENDENT
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN, true);
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN, true);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DOUBLEBUFFER, 1);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DEPTH_SIZE, 24);


        // todo: full screen stuff

        long window = SDLVideo.SDL_CreateWindowWithProperties(props);
        Pointer wP = new Pointer() {
            { address = window;}
        };
        SDLProperties.SDL_SetPointerProperty(SDLVideo.SDL_GetWindowProperties(window), LEGO1.ISLE_PROP_WINDOW_CREATE_VIDEO_PARAM, m_videoParam.address());

        int displayId = SDLVideo.SDL_GetDisplayForWindow(window);
        SDL_DisplayMode mode = SDL_DisplayMode.malloc();
        SDLVideo.SDL_GetClosestFullscreenDisplayMode(displayId, 640, 480, 60, true, mode);
        SDLVideo.SDL_SetWindowFullscreenMode(window, mode);


        m_windowHandle = new LEGO1.HWND(wP);
        System.out.println("HWND: " + m_windowHandle);
        System.out.println("Video param: " + m_videoParam);
        System.out.println("Video param addr: " + m_videoParam.address());

        SDLProperties.SDL_DestroyProperties(props);

        if(m_windowHandle.isNull()) {
            System.err.println("window handle is null");
            return 0;
        }



        // TODO: cursor stuff
        // TODO: LegoOmni::CreateInstance and afterward

        SetupLegoOmni();
        return 0;
    }

    public static void main(String[] args) {
        // TODO: gamepad/haptic
        if(!SDLInit.SDL_Init(SDLInit.SDL_INIT_VIDEO | SDLInit.SDL_INIT_AUDIO | SDLInit.SDL_INIT_EVENTS | SDLInit.SDL_INIT_JOYSTICK)) {
            System.exit(1);
            System.err.println("error");
        }

        LEGO1.LegoOmni.CreateInstance();
        SetupWindow();
    }
}
