/*
 * This source file was generated by the Gradle 'init' task
 */
package org.github.itzswirlz.isleportablelwjgl.isle;

import org.bytedeco.javacpp.BytePointer;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.StdString;
import org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1;
import org.lwjgl.sdl.*;

public class IsleApp {
    private static int TARGET_WIDTH = 600;
    private static int TARGET_HEIGHT = 480;

    private String m_hdPath = null;
    private String m_cdPath = null;
    private static String m_deviceId = "0 0x682656f3 0x0 0x0 0x1000000"; // FIXME: Read from config
    private String m_savePath = null;
    private static boolean m_fullScreen = false;
    private static boolean m_flipSurfaces = false;
    private static boolean m_backBuffersInVram = false;
    private static boolean m_using8bit = false;
    private static boolean m_using16bit = true;
    private static boolean m_hasLightSupport = false;
    private boolean m_use3dSound = false;
    private boolean m_useMusic = true;
    private static boolean m_wideViewAngle = true;
    private int m_islandQuality = 2;
    private int m_islandTexture = 1;
    private boolean m_gameStarted = false;
    private long m_frameDelta = 10;
    private static LEGO1.MxVideoParam m_videoParam = new LEGO1.MxVideoParam(new LEGO1.MxRect32(0, 0, 639, 479), null, 1, new LEGO1.MxVideoParamFlags());
    private boolean m_windowActive = true;
    private static LEGO1.HWND m_windowHandle;
    private boolean m_drawCursor = false;

    // TODO: cursor stuff, everything past line 91 in header
    private static String m_mediaPath = "asldkjskj";

    public void Close() {

    }

    public static int SetupLegoOmni() {
        int result = 0;
        int failure = 0;

        LEGO1.MxOmniCreateParam param = new LEGO1.MxOmniCreateParam(m_mediaPath, m_windowHandle, m_videoParam, new LEGO1.MxOmniCreateFlags());
        System.out.println("Media path: " + param.GetMediaPath().GetData().getString());
        // current status: crashes (but calls Create successfully)
        failure = LEGO1.Lego().Create(param);

        if(failure != 0) {
            System.out.println("No failure!");
        } else {
            System.out.println("Failure!");
        }
        return 0;
    }

    public static void SetupVideoFlags(
            boolean fullScreen,
            boolean flipSurfaces,
            boolean backBuffers,
            boolean using8bit,
            boolean using16bit,
            boolean hasLightSupport,
            boolean param_7,
            boolean wideViewAngle,
            String deviceId
    ) {
        m_videoParam.Flags().SetFullScreen(fullScreen);
        m_videoParam.Flags().SetFlipSurfaces(flipSurfaces);
        m_videoParam.Flags().SetBackBuffers(!backBuffers);
        m_videoParam.Flags().SetLacksLightSupport(!hasLightSupport);
        m_videoParam.Flags().SetF1bit7(param_7);
        m_videoParam.Flags().SetWideViewAngle(wideViewAngle);
        m_videoParam.Flags().SetF2bit1(true);
        m_videoParam.SetDeviceName(deviceId.getBytes()); // FIXME: is this correct?
        if (using8bit) {
            m_videoParam.Flags().Set16Bit(false);
        }
        if (using16bit) {
            m_videoParam.Flags().Set16Bit(true);
        }
    }

    public static long SetupWindow() {
        // TODO: Loading config

        SetupVideoFlags(m_fullScreen,
                m_flipSurfaces,
                m_backBuffersInVram,
                m_using8bit,
                m_using16bit,
                m_hasLightSupport,
                false,
                m_wideViewAngle,
                m_deviceId);

        // FIXME: check via MxDirectDraw
        // reference: m_videoParam.Flags().Set16Bit(MxDirectDraw::GetPrimaryBitDepth() == 16);
//        m_videoParam.Flags().Set16Bit(true);

        int props = SDLProperties.SDL_CreateProperties();
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, TARGET_WIDTH);
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, TARGET_HEIGHT);
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN, m_fullScreen);
        SDLProperties.SDL_SetStringProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_TITLE_STRING, "LEGO");

        // FIXME: PLATFORM DEPENDENT
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN, true);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DOUBLEBUFFER, 1);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DEPTH_SIZE, 24);

        // todo: full screen stuff

        long window = SDLVideo.SDL_CreateWindowWithProperties(props);
//        SDLProperties.SDL_SetPointerProperty(SDLVideo.SDL_GetWindowProperties(window))
//        Pointer pointer = getPointer(SDLProperties.SDL_GetPointerProperty(SDLVideo.SDL_GetWindowProperties(window), SDLVideo.SDL_PROP_WINDOW_WIN32_HWND_POINTER, 0));
//        System.out.println("Pointer: " + pointer);
//        System.out.println("Window handle addr: " + pointer.address());
//        m_windowHandle = new LEGO1.HWND(pointer);
        System.out.println("HWND: " + m_windowHandle);
        System.out.println("HWND addr: " + m_windowHandle.address());



        // TODO: cursor stuff
        // TODO: LegoOmni::CreateInstance and afterward

        SetupLegoOmni();
        return 0;
    }

    public static void main(String[] args) {
        // TODO: gamepad/haptic
        SDLInit.SDL_Init(SDLInit.SDL_INIT_VIDEO | SDLInit.SDL_INIT_AUDIO);
        LEGO1.LegoOmni.CreateInstance();
        SetupWindow();
    }
}
