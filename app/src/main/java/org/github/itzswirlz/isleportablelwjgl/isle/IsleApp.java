/*
 * This source file was generated by the Gradle 'init' task
 */
package org.github.itzswirlz.isleportablelwjgl.isle;

import com.github.vincentrussell.ini.Ini;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.SharedPtr;
import org.bytedeco.javacpp.annotation.StdString;
import org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1;
import org.lwjgl.PointerBuffer;
import org.lwjgl.sdl.*;
import org.lwjgl.system.SharedLibrary;
import org.lwjgl.system.SharedLibraryUtil;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import static org.github.itzswirlz.isleportablelwjgl.lego1.LEGO1.*;

public class IsleApp {
    private static int TARGET_WIDTH = 640;
    private static int TARGET_HEIGHT = 480;
    private static int LAST_FRAME_TIME = 0;
    private static int STARTUP_DELAY = 1;

    private static String[] FILES = {
        "/LEGO/Scripts/CREDITS.SI",
                "/LEGO/Scripts/INTRO.SI",
                "/LEGO/Scripts/NOCD.SI",
                "/LEGO/Scripts/SNDANIM.SI",
                "/LEGO/Scripts/Act2/ACT2MAIN.SI",
                "/LEGO/Scripts/Act3/ACT3.SI",
                "/LEGO/Scripts/Build/COPTER.SI",
                "/LEGO/Scripts/Build/DUNECAR.SI",
                "/LEGO/Scripts/Build/JETSKI.SI",
                "/LEGO/Scripts/Build/RACECAR.SI",
                "/LEGO/Scripts/Garage/GARAGE.SI",
                "/LEGO/Scripts/Hospital/HOSPITAL.SI",
                "/LEGO/Scripts/Infocntr/ELEVBOTT.SI",
                "/LEGO/Scripts/Infocntr/HISTBOOK.SI",
                "/LEGO/Scripts/Infocntr/INFODOOR.SI",
                "/LEGO/Scripts/Infocntr/INFOMAIN.SI",
                "/LEGO/Scripts/Infocntr/INFOSCOR.SI",
                "/LEGO/Scripts/Infocntr/REGBOOK.SI",
                "/LEGO/Scripts/Isle/ISLE.SI",
                "/LEGO/Scripts/Isle/JUKEBOX.SI",
                "/LEGO/Scripts/Isle/JUKEBOXW.SI",
                "/LEGO/Scripts/Police/POLICE.SI",
                "/LEGO/Scripts/Race/CARRACE.SI",
                "/LEGO/Scripts/Race/CARRACER.SI",
                "/LEGO/Scripts/Race/JETRACE.SI",
                "/LEGO/Scripts/Race/JETRACER.SI",
                "/LEGO/data/ACT1INF.DTA",
                "/LEGO/data/ACT2INF.DTA",
                "/LEGO/data/ACT3INF.DTA",
                "/LEGO/data/BLDDINF.DTA",
                "/LEGO/data/BLDHINF.DTA",
                "/LEGO/data/BLDJINF.DTA",
                "/LEGO/data/BLDRINF.DTA",
                "/LEGO/data/GMAININF.DTA",
                "/LEGO/data/HOSPINF.DTA",
                "/LEGO/data/ICUBEINF.DTA",
                "/LEGO/data/IELEVINF.DTA",
                "/LEGO/data/IISLEINF.DTA",
                "/LEGO/data/IMAININF.DTA",
                "/LEGO/data/IREGINF.DTA",
                "/LEGO/data/OBSTINF.DTA",
                "/LEGO/data/PMAININF.DTA",
                "/LEGO/data/RACCINF.DTA",
                "/LEGO/data/RACJINF.DTA",
                "/LEGO/data/WORLD.WDB",
                "/LEGO/data/testinf.dta",
    };

    private static String[] TEXTURES = {
        "bank01.gif",   "beach.gif",    "black.gif",     "bowtie.gif",   "brela_01.gif", "bth1chst.gif", "bth2chst.gif",
                "capch.gif",    "capdb.gif",    "capjs.gif",     "capmd.gif",    "caprc.gif",    "cave_24x.gif", "caverocx.gif",
                "caverokx.gif", "cheker01.gif", "construct.gif", "copchest.gif", "dbfrfn.gif",   "doctor.gif",   "dogface.gif",
                "dummy.gif",    "e.gif",        "flowers.gif",   "fruit.gif",    "gasroad.gif",  "gdface.gif",   "g.gif",
                "grassx.gif",   "infochst.gif", "infoface.gif",  "jailpad.gif",  "jfrnt.gif",    "jsfrnt4.gif",  "jsfrnt.gif",
                "jside.gif",    "jswnsh5.gif",  "jswnsh.gif",    "l6.gif",       "l.gif",        "mamachst.gif", "mamaface.gif",
                "mamamap.gif",  "mech.gif",     "medic01.gif",   "mitesx.gif",   "mustache.gif", "nickchst.gif", "nickface.gif",
                "nickmap.gif",  "nopizza.gif",  "norachst.gif",  "noraface.gif", "noramap.gif",  "nwcurve.gif",  "octan01.gif",
                "octsq01.gif",  "o.gif",        "papachst.gif",  "papaface.gif", "papamap.gif",  "pebblesx.gif", "pepperha.gif",
                "peppizza.gif", "peppmap.gif",  "peprchst.gif",  "peprface.gif", "pianokys.gif", "pizcurve.gif", "pizza01.gif",
                "pizza.gif",    "polbar01.gif", "polbla01.gif",  "polkadot.gif", "polwhi01.gif", "postchst.gif", "post.gif",
                "rac1chst.gif", "rac2chst.gif", "radar.gif",     "raddis01.gif", "rcback.gif",   "rc-butn.gif",  "rcfrnt5.gif",
                "rcfrnt6.gif",  "rcfrnt7.gif",  "rcfrnt.gif",    "rcside1.gif",  "rcside2.gif",  "rcside3.gif",  "rctail.gif",
                "redskul.gif",  "relrel01.gif", "road1way.gif",  "road3wa2.gif", "road3wa3.gif", "road3way.gif", "road4way.gif",
                "roadstr8.gif", "rockx.gif",    "roofpiz.gif",   "sandredx.gif", "se_curve.gif", "shftchst.gif", "shftface2.gif",
                "shftface.gif", "shldwn02.gif", "skull.gif",     "smile.gif",    "smileshd.gif", "supr2_01.gif", "tightcrv.gif",
                "unkchst.gif",  "val_02.gif",   "vest.gif",      "water2x.gif",  "w_curve.gif",  "wnbars.gif",   "woman.gif",
                "womanshd.gif"
    };

    private static String m_hdPath = null;
    private static String m_cdPath = null;
    private static String m_deviceId = null;
    private static String m_mediaPath = null;
    private static String m_savePath = null;
    private static boolean m_fullScreen = false;
    private static boolean m_flipSurfaces = false;
    private static boolean m_backBuffersInVram = false;
    private static boolean m_using8bit = false;
    private static boolean m_using16bit = true;
    private static boolean m_hasLightSupport = false;
    private static boolean m_use3dSound = false;
    private static boolean m_useMusic = true;
    private static boolean m_wideViewAngle = true;
    private static int m_islandQuality = 2;
    private static int m_islandTexture = 1;
    private boolean m_gameStarted = false;
    private static long m_frameDelta = 10;
    private static LEGO1.MxVideoParam m_videoParam = new LEGO1.MxVideoParam(new LEGO1.MxRect32(0, 0, 639, 479), null, 1, new LEGO1.MxVideoParamFlags());
    private static boolean m_windowActive = true;
    private static LEGO1.HWND m_windowHandle = null;
    private boolean m_drawCursor = false;

    private static String m_iniPath = null;
    private static float m_maxLod = 0.0f;
    private static int m_maxAllowedExtras = 0;
    private static LEGO1.MxTransitionManager.TransitionType m_transitionType = LEGO1.MxTransitionManager.TransitionType.e_mosaic;

    // TODO: Touch scheme

    // TODO: cursor, bitmaps, argumenthelp

    // FIXME: Currently really only tested against my defaults on my system. Support missing keys/values/categories and INI creation
    private static boolean LoadConfig() {
        String prefPath = SDLFileSystem.SDL_GetPrefPath("isledecomp", "isle");

        m_iniPath = prefPath + "isle.ini";

        System.out.println("Reading configuration from " + m_iniPath);
        Ini ini = new Ini();
        try {
            // TODO: When INI is empty/DNE
            ini.load(new FileInputStream(m_iniPath));
        } catch(IOException e) {
            e.printStackTrace();
            System.out.println("TODO: Handling when INI is empty or sections/keys DNE");
            return false;
        }

        m_deviceId = ini.getValue("isle", "3d device id").toString();

        m_hdPath = ini.getValue("isle", "diskpath").toString();
        m_cdPath = ini.getValue("isle", "cdpath").toString();
        m_mediaPath = ini.getValue("isle", "mediapath").toString();
        m_savePath = ini.getValue("isle", "savepath").toString();

        m_flipSurfaces = ini.getValue("isle", "flip surfaces").equals("true");
        m_fullScreen = ini.getValue("isle", "full screen").equals("true");
        m_wideViewAngle = ini.getValue("isle", "wide view angle").equals("true");
        m_use3dSound = ini.getValue("isle", "3dsound").equals("true");
        m_useMusic = ini.getValue("isle", "music").equals("true");

        System.out.println("TODO: Joystick");
        System.out.println("TODO: Cursor");

        m_backBuffersInVram = ini.getValue("isle", "back buffers in video ram").equals("true");

        switch(ini.getValue("isle", "display bit depth").toString()) {
            case "8":
                m_using8bit = true;
                break;
            case "16":
                m_using16bit = true;
                break;
        }

        m_islandQuality = Integer.parseInt(ini.getValue("isle", "island quality").toString());
        m_islandTexture = Integer.parseInt(ini.getValue("isle", "island texture").toString());
        m_maxLod = Float.parseFloat(ini.getValue("isle", "max lod").toString());
        m_maxAllowedExtras = Integer.parseInt(ini.getValue("isle", "max allowed extras").toString());

        MxOmni.SetCD(m_cdPath);
        MxOmni.SetHD(m_hdPath);
        return true;
    }

    public void Close() {

    }

    private static boolean Tick() {
        // TODO: Implement
        LAST_FRAME_TIME = 0;
        STARTUP_DELAY = 1;

        // unnecessary? not seem to be set or modified anyehre else
        if(!m_windowActive) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            return true;
        }

        if(Lego() == null) {
            System.out.println("Lego is null");
            return true;
        }

        if(TickleManager() == null) {
            System.out.println("TickleManager is null");
            return true;
        }

        if(Timer() == null) {
            System.out.println("Timer is null");
            return true;
        }

        long currentTime = Timer().GetRealTime();
        if(currentTime < LAST_FRAME_TIME) {
            LAST_FRAME_TIME = Math.toIntExact(-m_frameDelta);
        }

        if (m_frameDelta + LAST_FRAME_TIME >= currentTime) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            return true;
        }

        if(!Lego().IsPaused()) {
            TickleManager().Tickle();
        }

        LAST_FRAME_TIME = Math.toIntExact(currentTime);

        if(STARTUP_DELAY == 0) {
            return true;
        }

        STARTUP_DELAY--;
        if(STARTUP_DELAY != 0) {
            return true;
        }

        return true;
    }

    public static int SetupLegoOmni() {
        int result = 0;
        int failure = 0;
        if(LEGO1.LegoOmni.GetInstance().isNull()) {
            System.out.println("INSTANCE IS NULL");
        }

        if(m_windowHandle != null) {
            LEGO1.MxOmniCreateParam param = new LEGO1.MxOmniCreateParam(m_mediaPath, m_windowHandle, m_videoParam, new LEGO1.MxOmniCreateFlags());
            System.out.println("Media path: " + param.GetMediaPath().GetData().getString());
            failure = Lego().Create(param);

            if(failure == 0) {
                System.out.println("TODO: Variable table");
//                TickleManager().SetClientTickleInterval(VideoManager().getPointer(), 0);
            }
        } else {
            System.out.println("window hanle null");
        }
        return 0;
    }

    public static void SetupVideoFlags(
            boolean fullScreen,
            boolean flipSurfaces,
            boolean backBuffers,
            boolean using8bit,
            boolean using16bit,
            boolean hasLightSupport,
            boolean param_7,
            boolean wideViewAngle,
            String deviceId
    ) {
        m_videoParam.Flags().SetFullScreen(fullScreen);
        m_videoParam.Flags().SetFlipSurfaces(flipSurfaces);
        m_videoParam.Flags().SetBackBuffers(!backBuffers);
        m_videoParam.Flags().SetLacksLightSupport(!hasLightSupport);
        m_videoParam.Flags().SetF1bit7(param_7);
        m_videoParam.Flags().SetWideViewAngle(wideViewAngle);
        m_videoParam.Flags().SetEnabled(true);
        m_videoParam.SetDeviceName(deviceId.getBytes()); // FIXME: is this correct?
        if (using8bit) {
            m_videoParam.Flags().Set16Bit(false);
        }
        if (using16bit) {
            m_videoParam.Flags().Set16Bit(true);
        }
    }

    private static long VerifyFilesystem() {
        for(String file : FILES) {
            String[] searchPaths = {".", m_hdPath, m_cdPath};
            boolean found = false;

            for(String base : searchPaths) {
                MxString path = new MxString(base);
                path.addPut(file);
                path.MapPathToFilesystem();

                if(SDLFileSystem.SDL_GetPathInfo(path.GetData().getString(), null)) {
                    found = true;
                    break;
                }
            }

            if(!found) {
                System.out.println("TODO: error dialog for missing files");
                return -1;
            }
        }

        return 0;
    }

    private static void DetectGameVersion() {
        String file = "/lego/scripts/infocntr/infomain.si";
        SDL_PathInfo pathInfo = SDL_PathInfo.create();
        boolean success = false;

        MxString path = new MxString(m_hdPath).addPut(file);
        path.MapPathToFilesystem();

        if(!(success = SDLFileSystem.SDL_GetPathInfo(path.GetData().getString(), pathInfo))) {
            path = new MxString(m_cdPath).addPut(file);
            path.MapPathToFilesystem();
            success = SDLFileSystem.SDL_GetPathInfo(path.GetData().getString(), pathInfo);
        }

        assert success;

        Lego().SetVersion10(pathInfo.size() == 58130432 || pathInfo.size() == 57737216);

        if(Lego().IsVersion10()) {
            System.out.println("Detected game version 1.0");
            // TODO: Set window tilte
        } else {
            System.out.println("Detected game version 1.1");
        }
    }

    public static long SetupWindow() {
        if(!LoadConfig()) {
            return -1;
        }

        SetupVideoFlags(m_fullScreen,
                m_flipSurfaces,
                m_backBuffersInVram,
                m_using8bit,
                m_using16bit,
                m_hasLightSupport,
                false,
                m_wideViewAngle,
                m_deviceId);

        m_videoParam.Flags().Set16Bit(LEGO1.MxDirectDraw.GetPrimaryBitDepth() == 16);

        int props = SDLProperties.SDL_CreateProperties();
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, TARGET_WIDTH);
        SDLProperties.SDL_SetNumberProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, TARGET_HEIGHT);
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN, m_fullScreen);
        SDLProperties.SDL_SetStringProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_TITLE_STRING, "LEGO");

        // FIXME: PLATFORM DEPENDENT
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN, true);
        SDLProperties.SDL_SetBooleanProperty(props, SDLVideo.SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN, true);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DOUBLEBUFFER, 1);
        SDLVideo.SDL_GL_SetAttribute(SDLVideo.SDL_GL_DEPTH_SIZE, 24);


        // todo: full screen stuff

        long window = SDLVideo.SDL_CreateWindowWithProperties(props);
        Pointer wP = new Pointer() {
            { address = window;}
        };
        SDLProperties.SDL_SetPointerProperty(SDLVideo.SDL_GetWindowProperties(window), LEGO1.ISLE_PROP_WINDOW_CREATE_VIDEO_PARAM, m_videoParam.address());

        int displayId = SDLVideo.SDL_GetDisplayForWindow(window);
        SDL_DisplayMode mode = SDL_DisplayMode.malloc();
        SDLVideo.SDL_GetClosestFullscreenDisplayMode(displayId, 640, 480, 60, true, mode);
        SDLVideo.SDL_SetWindowFullscreenMode(window, mode);


        m_windowHandle = new LEGO1.HWND(wP);
        System.out.println("HWND: " + m_windowHandle);
        System.out.println("Video param: " + m_videoParam);
        System.out.println("Video param addr: " + m_videoParam.address());

        SDLProperties.SDL_DestroyProperties(props);

        if(m_windowHandle.isNull()) {
            System.err.println("window handle is null");
            return -1;
        }

        if(SetupLegoOmni() != 0) {
            System.err.println("SetupLegoOmni() failed");
            return -1;
        }

        GameState().SetSavePath(m_savePath.getBytes());
        if(VerifyFilesystem() != 0) {
            return -1;
        }

        DetectGameVersion();

        // TODO: cursor stuff and afterwards

        return 0;
    }

    private static IDirect3DRMMiniwinDevice GetD3DRMMiniwinDevice() {
        LegoOmni omni = LegoOmni.GetInstance();
        if(omni == null) {
            System.out.println("Omni is null");
            return null;
        }

        // FIXME: Original grabs from LegoOmni::GetInstance, but the VM returned is a MxVideoManager?
        LegoVideoManager videoManager = VideoManager();
        if(videoManager == null) {
            System.out.println("VideoManager is null");
            return null;
        }

        Lego3DManager lego3DManager = videoManager.Get3DManager();
        if(lego3DManager == null) {
            System.out.println("Lego3DManager is null");
            return null;
        }

        Lego3DView lego3DView = lego3DManager.GetLego3DView();
        if(lego3DView == null) {
            System.out.println("Lego3DView is null");
            return null;
        }

        DeviceImpl tgl_device = (DeviceImpl) lego3DView.GetDevice();
        if(tgl_device == null) {
            System.out.println("TGL device is null");
            return null;
        }

        IDirect3DRMDevice2 d3drmdev = new IDirect3DRMDevice2(tgl_device.ImplementationData());
        if(d3drmdev == null) {
            System.out.println("d3drmdev is null");
            return null;
        }

        IDirect3DRMMiniwinDevice d3drmMiniwinDev = new IDirect3DRMMiniwinDevice(new Pointer() {});
        GUID guid = new GUID();
        // probably wrong
        guid = guid.m_data1(0x6eb09673).m_data2((short)0x8d30).m_data3((short)0x4d8a)
                .m_data4(0, (byte) 0x8d)
                .m_data4(1, (byte) 0x81)
                .m_data4(2, (byte) 0x34)
                .m_data4(3, (byte) 0xea)
                .m_data4(4, (byte) 0x69)
                .m_data4(5, (byte) 0x30)
                .m_data4(6, (byte) 0x12)
                .m_data4(7, (byte) 0x01);
        if(d3drmdev.QueryInterface(guid, d3drmMiniwinDev) != 0) {
            System.out.println("d3drmdev.QueryInterface failed");
            return null;
        }

        System.out.println("somehow succeeded");
        return d3drmMiniwinDev;
    }

    public static void main(String[] args) {
        SDLHints.SDL_SetHint(SDLHints.SDL_HINT_MOUSE_TOUCH_EVENTS, "0");
        SDLHints.SDL_SetHint(SDLHints.SDL_HINT_TOUCH_MOUSE_EVENTS, "0");

        // TODO: gamepad/haptic
        if(!SDLInit.SDL_Init(SDLInit.SDL_INIT_VIDEO | SDLInit.SDL_INIT_AUDIO | SDLInit.SDL_INIT_JOYSTICK | SDLInit.SDL_INIT_HAPTIC)) {
            System.exit(1);
            System.err.println("error");
        }

        LEGO1.LegoOmni.CreateInstance();

        if(SetupWindow() != 0) {
            System.exit(1);
            System.err.println("Error setting up window");
            // TODO: message box
            SDLMessageBox.SDL_ShowSimpleMessageBox(SDLMessageBox.SDL_MESSAGEBOX_ERROR, "LEGO® Island Error", "\"LEGO® Island\" failed to start.\nPlease quit all other applications and try again.", m_windowHandle.address());
        }

        /*
         * "Currently, SDL doesn't send SDL_EVENT_MOUSE_ADDED at startup (unlike for gamepads)
         * This will probably be fixed in the future: https://github.com/libsdl-org/SDL/issues/12815"
         *
         * https://github.com/isledecomp/isle-portable/blob/89f2f5cefee1a107330bbf93048f7da73f5754f7/ISLE/isleapp.cpp#L356
         */
        IntBuffer mice = SDLMouse.SDL_GetMice();
        if(mice != null) {
            System.out.println("mice is not null");
            for(int i = 0; i < mice.capacity(); i++) {
                if(InputManager() != null) {
                    System.out.println("adding mice");
                    InputManager().AddMouse(mice.get(i));
                }
            }
        }

        SDL_Event event = SDL_Event.create();
        LegoOmni.GetInstance().CreateBackgroundAudio();
        MxDSAction ds = new MxDSAction();
        MxStreamController stream = Streamer().Open("\\lego\\scripts\\isle\\isle", MxStreamer.OpenMode.e_diskStream.ordinal());
        if(stream == null) {
            System.out.println("Stream failed");
//            return true;
        }

        ds.SetAtomId(stream.GetAtom());
        ds.SetUnknown24((short)-1);
        ds.SetObjectId(0);
        Start(ds);
        loop: while(true) {
            Tick();
            SDLEvents.SDL_PollEvent(event);
            switch(event.type()) {
                case SDLEvents.SDL_EVENT_QUIT:
                    System.out.println("Quit (TODO: Handle properly)");
                    break loop;
                case SDLEvents.SDL_EVENT_KEYBOARD_ADDED:
                    System.out.println("ADDING KEYBOARD");
                    if(InputManager() != null) {
                        InputManager().AddKeyboard(event.kdevice().which());
                    }
                    break;
                case SDLEvents.SDL_EVENT_KEYBOARD_REMOVED:
                    System.out.println("REMOVING KEYBOARD");
                    if(InputManager() != null) {
                        InputManager().RemoveKeyboard(event.kdevice().which());
                    }
                    break;
                case SDLEvents.SDL_EVENT_MOUSE_ADDED:
                    System.out.println("ADDING MOUSE");
                    if(InputManager() != null) {
                        InputManager().AddMouse(event.mdevice().which());
                    }
                    break;
                case SDLEvents.SDL_EVENT_MOUSE_REMOVED:
                    System.out.println("REMOVING MOUSE");
                    if(InputManager() != null) {
                        InputManager().AddMouse(event.mdevice().which());
                    }
                    break;
                case SDLEvents.SDL_EVENT_KEY_DOWN:
                    if(event.key().repeat()) {
                        break;
                    }

                    int keycode = event.key().key();
                    // FIXME: may be wrong
                    if(((event.key().mod() & SDLKeycode.SDL_KMOD_ALT) != 0) && (keycode == SDLKeycode.SDLK_RETURN)) {
                        System.out.println("TODO: Set full screen");
                    } else {
                        if(InputManager() != null) {
                            InputManager().QueueEvent(NotificationId.c_notificationKeyPress, (short)keycode, 0, 0, keycode);
                        }
                    }
                    break;
                case SDLEvents.SDL_EVENT_MOUSE_MOTION:
                case SDLEvents.SDL_EVENT_MOUSE_BUTTON_DOWN:
                case SDLEvents.SDL_EVENT_MOUSE_BUTTON_UP:
                    System.out.println("TODO: handle mice event");
                    IDirect3DRMMiniwinDevice device = GetD3DRMMiniwinDevice();
                    if(device != null) {
                        Pointer p = new Pointer() {
                            { address = event.address();}
                        };
                        if(!device.ConvertEventToRenderCoordinates(p)) {
                            System.out.println("Failed to convert event to render coordinates: " + SDLError.SDL_GetError());
                        }
                    }
                    break;
                default:
//                    System.out.println("Unknown event type: " + event.type());
                    break;
            }
        }
    }
}
