// This file was generated, but it is edited to cut out things that we shouldn't need (hopefully) for just
// recreating ISLE
// legoinputmanager, legoroi, mxvariabletable, mxgeometry need implementation

// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.github.itzswirlz.isleportablelwjgl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LEGO1 extends org.github.itzswirlz.isleportablelwjgl.LegoOneConfig {
    static { Loader.load(); }

// Parsed from legoanimationmanager.h

// #ifndef LEGOANIMATIONMANAGER_H
// #define LEGOANIMATIONMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "legolocations.h"
// #include "legomain.h"
// #include "legostate.h"
// #include "legotraninfolist.h"
// #include "mxcore.h"
// #include "mxgeometry/mxquaternion.h"

@Opaque public static class LegoAnimPresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoAnimPresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoAnimPresenter(Pointer p) { super(p); }
}
@Opaque public static class LegoEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoEntity(Pointer p) { super(p); }
}
@Opaque public static class LegoExtraActor extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoExtraActor() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoExtraActor(Pointer p) { super(p); }
}
@Opaque public static class LegoFile extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoFile() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFile(Pointer p) { super(p); }
}
@Opaque public static class LegoPathActor extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathActor() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathActor(Pointer p) { super(p); }
}
@Opaque public static class LegoPathBoundary extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPathBoundary() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPathBoundary(Pointer p) { super(p); }
}
@Opaque public static class LegoROIList extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoROIList() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoROIList(Pointer p) { super(p); }
}
@Opaque public static class LegoOrientedEdge extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoOrientedEdge() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoOrientedEdge(Pointer p) { super(p); }
}
@Opaque public static class LegoWorld extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorld() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorld(Pointer p) { super(p); }
}

// SIZE 0x30
public static class ModelInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ModelInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ModelInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ModelInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ModelInfo position(long position) {
        return (ModelInfo)super.position(position);
    }
    @Override public ModelInfo getPointer(long i) {
        return new ModelInfo((Pointer)this).offsetAddress(i);
    }

	public native @Cast("char*") BytePointer m_name(); public native ModelInfo m_name(BytePointer setter);         // 0x00
	public native @Cast("MxU8") short m_unk0x04(); public native ModelInfo m_unk0x04(short setter);       // 0x04
	public native float m_location(int i); public native ModelInfo m_location(int i, float setter);
	@MemberGetter public native FloatPointer m_location();  // 0x08
	public native float m_direction(int i); public native ModelInfo m_direction(int i, float setter);
	@MemberGetter public native FloatPointer m_direction(); // 0x14
	public native float m_up(int i); public native ModelInfo m_up(int i, float setter);
	@MemberGetter public native FloatPointer m_up();        // 0x20
	public native @Cast("MxU8") short m_unk0x2c(); public native ModelInfo m_unk0x2c(short setter);       // 0x2c
}

// SIZE 0x30
public static class AnimInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public AnimInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AnimInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AnimInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public AnimInfo position(long position) {
        return (AnimInfo)super.position(position);
    }
    @Override public AnimInfo getPointer(long i) {
        return new AnimInfo((Pointer)this).offsetAddress(i);
    }

	public native @Cast("char*") BytePointer m_name(); public native AnimInfo m_name(BytePointer setter);          // 0x00
	public native @Cast("MxU32") long m_objectId(); public native AnimInfo m_objectId(long setter);      // 0x04
	public native @Cast("MxS16") short m_location(); public native AnimInfo m_location(short setter);      // 0x08
	public native @Cast("MxBool") boolean m_unk0x0a(); public native AnimInfo m_unk0x0a(boolean setter);      // 0x0a
	public native @Cast("MxU8") short m_unk0x0b(); public native AnimInfo m_unk0x0b(short setter);        // 0x0b
	public native @Cast("MxU8") short m_unk0x0c(); public native AnimInfo m_unk0x0c(short setter);        // 0x0c
	public native @Cast("MxU8") short m_unk0x0d(); public native AnimInfo m_unk0x0d(short setter);        // 0x0d
	public native float m_unk0x10(int i); public native AnimInfo m_unk0x10(int i, float setter);
	@MemberGetter public native FloatPointer m_unk0x10();    // 0x10
	public native @Cast("MxU8") short m_modelCount(); public native AnimInfo m_modelCount(short setter);     // 0x20
	public native @Cast("MxU16") int m_unk0x22(); public native AnimInfo m_unk0x22(int setter);       // 0x22
	public native ModelInfo m_models(); public native AnimInfo m_models(ModelInfo setter);   // 0x24
	public native @Cast("MxS8") char m_characterIndex(); public native AnimInfo m_characterIndex(char setter); // 0x28
	public native @Cast("MxBool") boolean m_unk0x29(); public native AnimInfo m_unk0x29(boolean setter);      // 0x29
	public native @Cast("MxS8") char m_unk0x2a(int i); public native AnimInfo m_unk0x2a(int i, char setter);
	@MemberGetter public native @Cast("MxS8*") char m_unk0x2a();     // 0x2a
}

// VTABLE: LEGO1 0x100d8d80
// VTABLE: BETA10 0x101bae58
// SIZE 0x1c
@NoOffset public static class AnimState extends LegoState {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AnimState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AnimState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AnimState position(long position) {
        return (AnimState)super.position(position);
    }
    @Override public AnimState getPointer(long i) {
        return new AnimState((Pointer)this).offsetAddress(i);
    }

	public AnimState() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	// FUNCTION: LEGO1 0x10065070
	// FUNCTION: BETA10 0x1004afe0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x10065080
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxBool") boolean Reset();                             // vtable+0x18
	public native @Cast("MxResult") int Serialize(LegoStorage p_storage); // vtable+0x1c

	public native void CopyToAnims(@Cast("MxU32") long arg0, AnimInfo p_anims, @Cast("MxU32*") long p_outExtraCharacterId);
	public native void InitFromAnims(@Cast("MxU32") long p_animsLength, AnimInfo p_anims, @Cast("MxU32") long p_extraCharacterId);
}

// VTABLE: LEGO1 0x100d8c18
// VTABLE: BETA10 0x101bab60
// SIZE 0x500
@NoOffset public static class LegoAnimationManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoAnimationManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoAnimationManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoAnimationManager position(long position) {
        return (LegoAnimationManager)super.position(position);
    }
    @Override public LegoAnimationManager getPointer(long i) {
        return new LegoAnimationManager((Pointer)this).offsetAddress(i);
    }

	// SIZE 0x18
	public static class Character extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public Character() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Character(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Character(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public Character position(long position) {
	        return (Character)super.position(position);
	    }
	    @Override public Character getPointer(long i) {
	        return new Character((Pointer)this).offsetAddress(i);
	    }
	
		public native @Cast("const char*") BytePointer m_name(); public native Character m_name(BytePointer setter);  // 0x00
		public native @Cast("MxBool") boolean m_inExtras(); public native Character m_inExtras(boolean setter);   // 0x04
		public native @Cast("MxS8") char m_vehicleId(); public native Character m_vehicleId(char setter);    // 0x05
		public native @Cast("undefined") short m_unk0x06(); public native Character m_unk0x06(short setter); // 0x06 (unused?)
		public native @Cast("MxBool") boolean m_unk0x07(); public native Character m_unk0x07(boolean setter);    // 0x07
		public native @Cast("MxBool") boolean m_unk0x08(); public native Character m_unk0x08(boolean setter);    // 0x08
		public native @Cast("MxBool") boolean m_unk0x09(); public native Character m_unk0x09(boolean setter);    // 0x09
		public native @Cast("MxS32") int m_unk0x0c(); public native Character m_unk0x0c(int setter);     // 0x0c
		public native @Cast("MxS32") int m_unk0x10(); public native Character m_unk0x10(int setter);     // 0x10
		public native @Cast("MxBool") boolean m_active(); public native Character m_active(boolean setter);     // 0x14
		public native @Cast("MxU8") short m_unk0x15(); public native Character m_unk0x15(short setter);      // 0x15
		public native @Cast("MxS8") char m_unk0x16(); public native Character m_unk0x16(char setter);      // 0x16
	}

	// SIZE 0x08
	public static class Vehicle extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public Vehicle() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Vehicle(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Vehicle(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public Vehicle position(long position) {
	        return (Vehicle)super.position(position);
	    }
	    @Override public Vehicle getPointer(long i) {
	        return new Vehicle((Pointer)this).offsetAddress(i);
	    }
	
		public native @Cast("const char*") BytePointer m_name(); public native Vehicle m_name(BytePointer setter); // 0x00
		public native @Cast("MxBool") boolean m_unk0x04(); public native Vehicle m_unk0x04(boolean setter);   // 0x04
		public native @Cast("MxBool") boolean m_unk0x05(); public native Vehicle m_unk0x05(boolean setter);   // 0x05
	}

	// SIZE 0x18
	public static class Extra extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public Extra() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Extra(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Extra(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public Extra position(long position) {
	        return (Extra)super.position(position);
	    }
	    @Override public Extra getPointer(long i) {
	        return new Extra((Pointer)this).offsetAddress(i);
	    }
	
		public native LegoROI m_roi(); public native Extra m_roi(LegoROI setter);      // 0x00
		public native @Cast("MxS32") int m_characterId(); public native Extra m_characterId(int setter); // 0x04
		public native @Cast("MxLong") long m_unk0x08(); public native Extra m_unk0x08(long setter);    // 0x08
		public native @Cast("MxBool") boolean m_unk0x0c(); public native Extra m_unk0x0c(boolean setter);    // 0x0c
		public native @Cast("MxBool") boolean m_unk0x0d(); public native Extra m_unk0x0d(boolean setter);    // 0x0d
		public native float m_speed(); public native Extra m_speed(float setter);       // 0x10
		public native @Cast("MxBool") boolean m_unk0x14(); public native Extra m_unk0x14(boolean setter);    // 0x14
	}

	/** enum LegoAnimationManager::PlayMode */
	public static final int
		e_unk0 = 0,
		e_unk1 = 1,
		e_unk2 = 2;

	public LegoAnimationManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04
	public native @Cast("MxResult") int Tickle();               // vtable+0x08

	// FUNCTION: LEGO1 0x1005ec80
	// FUNCTION: BETA10 0x100483d0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1005ec90
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void Reset(@Cast("MxBool") boolean p_und);
	public native void Suspend();
	public native void Resume();
	public native void FUN_1005f6d0(@Cast("MxBool") boolean p_unk0x400);
	public native void EnableCamAnims(@Cast("MxBool") boolean p_enableCamAnims);
//	public native @Cast("MxResult") int LoadWorldInfo(@ByVal World p_worldId);
	public native @Cast("MxBool") boolean FindVehicle(@Cast("const char*") BytePointer p_name, @Cast("MxU32*") long p_index);
	public native @Cast("MxBool") boolean FindVehicle(String p_name, @Cast("MxU32*") long p_index);
	public native @Cast("MxResult") int ReadAnimInfo(LegoStorage p_storage, AnimInfo p_info);
	public native @Cast("MxResult") int ReadModelInfo(LegoStorage p_storage, ModelInfo p_info);
	public native void FUN_10060480(@Cast("const LegoChar**") char p_characterNames, @Cast("MxU32") long p_numCharacterNames);
	public native void FUN_100604d0(@Cast("MxBool") boolean p_unk0x08);
	public native void FUN_100604f0(@Cast("MxS32*") int p_objectIds, @Cast("MxU32") long p_numObjectIds);
	public native void FUN_10060540(@Cast("MxBool") boolean p_unk0x29);
	public native void FUN_10060570(@Cast("MxBool") boolean p_unk0x1a);
	public native @Cast("MxResult") int StartEntityAction(@ByRef MxDSAction p_dsAction, LegoEntity p_entity);
//	public native @Cast("MxResult") int FUN_10060dc0(
//			@Cast("MxU32") long p_objectId,
//			MxMatrix p_matrix,
//			@Cast("MxBool") boolean p_param3,
//			@Cast("MxU8") short p_param4,
//			LegoROI p_roi,
//			@Cast("MxBool") boolean p_param6,
//			@Cast("MxBool") boolean p_param7,
//			@Cast("MxBool") boolean p_param8,
//			@Cast("MxBool") boolean p_param9
//		);
	public native void CameraTriggerFire(LegoPathActor p_actor, @Cast("MxBool") boolean arg1, @Cast("MxU32") long p_location, @Cast("MxBool") boolean p_bool);
	public native void FUN_10061010(@Cast("MxBool") boolean p_und);
//	public native LegoTranInfo GetTranInfo(@Cast("MxU32") long p_index);
	public native void FUN_10062770();
	public native void PurgeExtra(@Cast("MxBool") boolean p_und);
	public native void AddExtra(@Cast("MxS32") int p_location, @Cast("MxBool") boolean p_und);
	public native void FUN_10063270(LegoROIList p_list, LegoAnimPresenter p_presenter);
	public native void FUN_10063780(LegoROIList p_list);
	public native @Cast("MxResult") int FUN_10064670(Vector3 p_position);
	public native @Cast("MxResult") int FUN_10064740(Vector3 p_position);
	public native @Cast("MxResult") int FUN_10064880(@Cast("const char*") BytePointer p_name, @Cast("MxS32") int p_unk0x0c, @Cast("MxS32") int p_unk0x10);
	public native @Cast("MxResult") int FUN_10064880(String p_name, @Cast("MxS32") int p_unk0x0c, @Cast("MxS32") int p_unk0x10);
	public native @Cast("MxBool") boolean FUN_10064ee0(@Cast("MxU32") long p_objectId);

	public static native void configureLegoAnimationManager(@Cast("MxS32") int p_legoAnimationManagerConfig);
}

// TEMPLATE: LEGO1 0x10061750
// MxListCursor<LegoTranInfo *>::MxListCursor<LegoTranInfo *>

// #endif // LEGOANIMATIONMANAGER_H


// Parsed from legobuildingmanager.h

// #ifndef LEGOBUILDINGMANAGER_H
// #define LEGOBUILDINGMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "misc/legotypes.h"
// #include "mxcore.h"
@Opaque public static class LegoROI extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoROI() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoROI(Pointer p) { super(p); }
}
@Opaque public static class LegoStorage extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoStorage() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoStorage(Pointer p) { super(p); }
}
@Opaque public static class LegoCacheSound extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoCacheSound() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoCacheSound(Pointer p) { super(p); }
}

// SIZE 0x2c
public static class LegoBuildingInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LegoBuildingInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoBuildingInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBuildingInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LegoBuildingInfo position(long position) {
        return (LegoBuildingInfo)super.position(position);
    }
    @Override public LegoBuildingInfo getPointer(long i) {
        return new LegoBuildingInfo((Pointer)this).offsetAddress(i);
    }

	/** enum LegoBuildingInfo:: */
	public static final int
		c_hasVariants = 0x01,
		c_hasSounds = 0x02,
		c_hasMoves = 0x04,
		c_hasMoods = 0x08;

	public native LegoEntity m_entity(); public native LegoBuildingInfo m_entity(LegoEntity setter);         // 0x00
	public native @Cast("const char*") BytePointer m_variant(); public native LegoBuildingInfo m_variant(BytePointer setter);        // 0x04
	public native @Cast("MxU32") long m_sound(); public native LegoBuildingInfo m_sound(long setter);                // 0x08
	public native @Cast("MxU32") long m_move(); public native LegoBuildingInfo m_move(long setter);                 // 0x0c
	public native @Cast("MxU8") short m_mood(); public native LegoBuildingInfo m_mood(short setter);                  // 0x10
	public native @Cast("MxS8") char m_counter(); public native LegoBuildingInfo m_counter(char setter);               // 0x11
	public native @Cast("MxS8") char m_initialCounter(); public native LegoBuildingInfo m_initialCounter(char setter);        // 0x12 - initial value loaded to m_counter
	public native @Cast("MxU8") short m_flags(); public native LegoBuildingInfo m_flags(short setter);                 // 0x13
	public native float m_adjustedY(); public native LegoBuildingInfo m_adjustedY(float setter);            // 0x14
	public native @Cast("const char*") BytePointer m_boundaryName(); public native LegoBuildingInfo m_boundaryName(BytePointer setter);   // 0x18
	public native float m_x(); public native LegoBuildingInfo m_x(float setter);                    // 0x1c
	public native float m_y(); public native LegoBuildingInfo m_y(float setter);                    // 0x20
	public native float m_z(); public native LegoBuildingInfo m_z(float setter);                    // 0x24
	public native LegoPathBoundary m_boundary(); public native LegoBuildingInfo m_boundary(LegoPathBoundary setter); // 0x28
}

// VTABLE: LEGO1 0x100d6f50
// SIZE 0x30
@NoOffset public static class LegoBuildingManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBuildingManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoBuildingManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoBuildingManager position(long position) {
        return (LegoBuildingManager)super.position(position);
    }
    @Override public LegoBuildingManager getPointer(long i) {
        return new LegoBuildingManager((Pointer)this).offsetAddress(i);
    }

	// SIZE 0x14
	public static class AnimEntry extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public AnimEntry() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public AnimEntry(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public AnimEntry(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public AnimEntry position(long position) {
	        return (AnimEntry)super.position(position);
	    }
	    @Override public AnimEntry getPointer(long i) {
	        return new AnimEntry((Pointer)this).offsetAddress(i);
	    }
	
		public native LegoEntity m_entity(); public native AnimEntry m_entity(LegoEntity setter); // 0x00
		public native LegoROI m_roi(); public native AnimEntry m_roi(LegoROI setter);       // 0x04
		public native @Cast("MxLong") long m_time(); public native AnimEntry m_time(long setter);        // 0x08
		public native float m_y(); public native AnimEntry m_y(float setter);            // 0x0c
		public native @Cast("MxBool") boolean m_muted(); public native AnimEntry m_muted(boolean setter);       // 0x10
	}

	public LegoBuildingManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1002f930
	public native @Cast("const char*") BytePointer ClassName();

	public static native void configureLegoBuildingManager(@Cast("MxS32") int arg0);
	public static native void SetCustomizeAnimFile(@Cast("const char*") BytePointer p_value);
	public static native void SetCustomizeAnimFile(String p_value);

	public native void Init();
	public native void LoadWorldInfo();
	public native void CreateBuilding(@Cast("MxS32") int p_index, LegoWorld p_world);
	public native void Reset();
	public native @Cast("MxResult") int Write(LegoStorage p_storage);
	public native @Cast("MxResult") int Read(LegoStorage p_storage);
	public native LegoBuildingInfo GetInfo(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchVariant(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchSound(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchMove(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchMood(LegoEntity p_entity);
	public native @Cast("MxU32") long GetAnimationId(LegoEntity p_entity);
	public native @Cast("MxU32") long GetSoundId(LegoEntity p_entity, @Cast("MxBool") boolean p_basedOnMood);
	public native @Cast("MxBool") boolean DecrementCounter(LegoEntity p_entity);
	public native @Cast("MxBool") boolean DecrementCounter(@Cast("MxS32") int p_index);
	public native @Cast("MxBool") boolean DecrementCounter(LegoBuildingInfo p_data);
	public native void ScheduleAnimation(LegoEntity p_entity, @Cast("MxLong") long p_length, @Cast("MxBool") boolean p_haveSound, @Cast("MxBool") boolean p_hideAfterAnimation);
	public native void ClearCounters();
	public native void AdjustHeight(@Cast("MxS32") int p_index);
	public native @Cast("MxResult") int DetermineBoundaries();
	public native LegoBuildingInfo GetInfoArray(@Cast("MxS32*") int p_length);
	public native void AdjustCounter(LegoEntity p_entity, @Cast("MxS32") int p_adjust);
	public native void SetInitialCounters();

	public static native @Cast("const char*") BytePointer GetCustomizeAnimFile();
}

// #endif // LEGOBUILDINGMANAGER_H


// Parsed from legogamestate.h

// #ifndef LEGOGAMESTATE_H
// #define LEGOGAMESTATE_H

// #include "actionsfwd.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxtypes.h"
// #include "mxvariable.h"

// #include <string.h>
@Opaque public static class LegoState extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoState() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoState(Pointer p) { super(p); }
}
@Opaque public static class MxVariableTable extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVariableTable() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariableTable(Pointer p) { super(p); }
}

public static native @Cast("const char*") BytePointer g_actorNames(int i); public static native void g_actorNames(int i, BytePointer setter);
@MemberGetter public static native @Cast("const char**") PointerPointer g_actorNames();

// SIZE 0x08
public static class ColorStringStruct extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ColorStringStruct() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ColorStringStruct(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ColorStringStruct(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ColorStringStruct position(long position) {
        return (ColorStringStruct)super.position(position);
    }
    @Override public ColorStringStruct getPointer(long i) {
        return new ColorStringStruct((Pointer)this).offsetAddress(i);
    }

	public native @Cast("const char*") BytePointer m_targetName(); public native ColorStringStruct m_targetName(BytePointer setter); // 0x00
	public native @Cast("const char*") BytePointer m_colorName(); public native ColorStringStruct m_colorName(BytePointer setter);  // 0x04
}

public static class InternationalCharacter extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public InternationalCharacter() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InternationalCharacter(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InternationalCharacter(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public InternationalCharacter position(long position) {
        return (InternationalCharacter)super.position(position);
    }
    @Override public InternationalCharacter getPointer(long i) {
        return new InternationalCharacter((Pointer)this).offsetAddress(i);
    }

	public native @Cast("unsigned char") byte m_character(); public native InternationalCharacter m_character(byte setter);
	public native @Cast("const char*") BytePointer m_bitmap(); public native InternationalCharacter m_bitmap(BytePointer setter);
	public native @Cast("MxU32") long m_buttonId(); public native InternationalCharacter m_buttonId(long setter);
}

// VTABLE: LEGO1 0x100d74a8
// SIZE 0x30
@NoOffset public static class LegoBackgroundColor extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoBackgroundColor(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoBackgroundColor(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoBackgroundColor position(long position) {
        return (LegoBackgroundColor)super.position(position);
    }
    @Override public LegoBackgroundColor getPointer(long i) {
        return new LegoBackgroundColor((Pointer)this).offsetAddress(i);
    }

	public LegoBackgroundColor() { super((Pointer)null); allocate(); }
	private native void allocate();
	public LegoBackgroundColor(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoBackgroundColor(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_colorString);
	public native void SetValue(String p_colorString); // vtable+0x04

	public native void SetLightColor(float p_r, float p_g, float p_b);
	public native void SetLightColor();
	public native void ToggleDayNight(@Cast("MxBool") boolean p_sun);
	public native void ToggleSkyColor();
}

// VTABLE: LEGO1 0x100d74b8
// SIZE 0x24
public static class LegoFullScreenMovie extends MxVariable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoFullScreenMovie(Pointer p) { super(p); }

	public LegoFullScreenMovie(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public LegoFullScreenMovie(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	public native void SetValue(@Cast("const char*") BytePointer p_option);
	public native void SetValue(String p_option); // vtable+0x04
}

// SIZE 0x430
@NoOffset public static class LegoGameState extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoGameState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoGameState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoGameState position(long position) {
        return (LegoGameState)super.position(position);
    }
    @Override public LegoGameState getPointer(long i) {
        return new LegoGameState((Pointer)this).offsetAddress(i);
    }

	/** enum LegoGameState::Act */
	public static final int
		e_actNotFound = -1,
		e_act1 = 0,
		e_act2 = 1,
		e_act3 = 2;

	/** enum LegoGameState::Area */
	public static final int
		e_undefined = 0,
		e_previousArea = 0,
		e_isle = 1,
		e_infomain = 2,
		e_infodoor = 3,
		e_infocenterExited = 4,
		e_elevbott = 5,
		e_elevride = 6,
		e_elevride2 = 7,
		e_elevopen = 8,
		e_seaview = 9,
		e_observe = 10,
		e_elevdown = 11,
		e_regbook = 12,
		e_infoscor = 13,
		e_jetrace = 14,
		e_jetrace2 = 15,
		e_jetraceExterior = 16,
		e_jetskibuildExited = 17,
		e_carrace = 18,
		e_carraceExterior = 19,
		e_racecarbuildExited = 20,
		e_unk21 = 21,
		e_pizzeriaExterior = 22,
		e_unk23 = 23,
		e_unk24 = 24,
		e_garageExterior = 25,
		e_garage = 26,
		e_garadoor = 27,
		e_garageExited = 28,
		e_hospitalExterior = 29,
		e_hospital = 30,
		e_hospitalExited = 31,
		e_policeExterior = 32,
		e_policeExited = 33,
		e_police = 34,
		e_polidoor = 35,
		e_copterbuild = 36,
		e_dunecarbuild = 37,
		e_jetskibuild = 38,
		e_racecarbuild = 39,
		e_unk40 = 40,
		e_unk41 = 41,
		e_unk42 = 42,
		e_unk43 = 43,
		e_unk44 = 44,
		e_unk45 = 45,
		e_act2main = 46,
		e_act3script = 47,
		e_unk48 = 48,
		e_unk49 = 49,
		e_unk50 = 50,
		e_unk51 = 51,
		e_unk52 = 52,
		e_jukeboxw = 53,
		e_jukeboxExterior = 54,
		e_unk55 = 55,
		e_histbook = 56,
		e_bike = 57,
		e_dunecar = 58,
		e_motocycle = 59,
		e_copter = 60,
		e_skateboard = 61,
		e_ambulance = 62,
		e_towtrack = 63,
		e_jetski = 64,

		e_vehicleExited = 66;

	// SIZE 0x0e
	@NoOffset public static class Username extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public Username(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public Username(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public Username position(long position) {
	        return (Username)super.position(position);
	    }
	    @Override public Username getPointer(long i) {
	        return new Username((Pointer)this).offsetAddress(i);
	    }
	
		public Username() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void Set(@ByRef Username p_other);

		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		public native @ByRef @Name("operator =") Username put(@Const @ByRef Username p_other);

		public native @Cast("MxS16") short m_letters(int i); public native Username m_letters(int i, short setter);
		@MemberGetter public native @Cast("MxS16*") short m_letters(); // 0x00
	}

	// SIZE 0x2c
	public static class ScoreItem extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public ScoreItem() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public ScoreItem(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public ScoreItem(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public ScoreItem position(long position) {
	        return (ScoreItem)super.position(position);
	    }
	    @Override public ScoreItem getPointer(long i) {
	        return new ScoreItem((Pointer)this).offsetAddress(i);
	    }
	
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);

		public native @Cast("MxS16") short m_totalScore(); public native ScoreItem m_totalScore(short setter);  // 0x00
		public native @Cast("MxU8") short m_scores(int i, int j); public native ScoreItem m_scores(int i, int j, short setter);
		@MemberGetter public native @Cast("MxU8(* /*[5]*/ )[5]") short m_scores(); // 0x02
		public native @ByRef Username m_name(); public native ScoreItem m_name(Username setter);     // 0x1c
		public native @Cast("MxS16") short m_playerId(); public native ScoreItem m_playerId(short setter);    // 0x2a

		public native @ByRef @Name("operator =") ScoreItem put(@Const @ByRef ScoreItem p_other);
	}

	// SIZE 0x372
	@NoOffset public static class History extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public History(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public History(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public History position(long position) {
	        return (History)super.position(position);
	    }
	    @Override public History getPointer(long i) {
	        return new History((Pointer)this).offsetAddress(i);
	    }
	
		public History() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native void WriteScoreHistory();
		public native @Cast("MxResult") int Serialize(LegoStorage p_storage);
		public native ScoreItem FindPlayerInScoreHistory(Username p_player, @Cast("MxS16") short p_unk0x24, @Cast("MxS32*") int p_unk0x2c);

		// FUNCTION: BETA10 0x1002c2b0
		public native @Cast("MxS16") short GetCount();

		// TODO: Not yet correct
		// FUNCTION: BETA10 0x1002c540
		public native ScoreItem GetScore(@Cast("MxS32") int p_index);

		public native @Cast("MxS16") short m_count(); public native History m_count(short setter); // 0x00
// #ifdef BETA10
		public native @Cast("MxS16") short m_indices(int i); public native History m_indices(int i, short setter);
		@MemberGetter public native @Cast("MxS16*") short m_indices(); // 0x02
// #endif
		public native @ByRef ScoreItem m_scores(int i); public native History m_scores(int i, ScoreItem setter);
		@MemberGetter public native ScoreItem m_scores(); // 0x02 (0x22 for BETA10)
		public native @Cast("MxS16") short m_nextPlayerId(); public native History m_nextPlayerId(short setter);   // 0x372 (0x392 for BETA10)
	}

	public LegoGameState() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void SetActor(@Cast("MxU8") short p_actorId);
	public native void RemoveActor();
	public native void ResetROI();

	public native @Cast("MxResult") int Save(@Cast("MxULong") long arg0);
	public native @Cast("MxResult") int DeleteState();
	public native @Cast("MxResult") int Load(@Cast("MxULong") long arg0);

	public native void SerializePlayersInfo(@Cast("MxS16") short p_flags);
	public native @Cast("MxResult") int AddPlayer(@ByRef Username p_player);
	public native void SwitchPlayer(@Cast("MxS16") short p_playerId);
	public native @Cast("MxS16") short FindPlayer(@ByRef Username p_player);

	public native void SerializeScoreHistory(@Cast("MxS16") short p_flags);
	public native void SetSavePath(@Cast("char*") BytePointer arg0);
	public native void SetSavePath(@Cast("char*") ByteBuffer arg0);
	public native void SetSavePath(@Cast("char*") byte[] arg0);

	public native LegoState GetState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState GetState(String p_stateName);
	public native LegoState CreateState(@Cast("const char*") BytePointer p_stateName);
	public native LegoState CreateState(String p_stateName);

	public native void GetFileSavePath(MxString p_outPath, @Cast("MxS16") short p_slotn);
	public native void StopArea(@Cast("LegoGameState::Area") int p_area);
	public native void SwitchArea(@Cast("LegoGameState::Area") int p_area);
	public native void Init();

	// FUNCTION: BETA10 0x10083ff5
	public native @Cast("MxU8") short GetActorId();

	// FUNCTION: BETA10 0x1004a2d0
	public native @Cast("const char*") BytePointer GetActorName();

	// FUNCTION: BETA10 0x1002b4c0
	public native @Cast("LegoGameState::Act") int GetCurrentAct();

	public native @Cast("LegoGameState::Act") int GetLoadedAct();

	public native void SetActorId(@Cast("MxU8") short p_actorId);
	public native LegoBackgroundColor GetBackgroundColor();

	public native void SetCurrentAct(@Cast("LegoGameState::Act") int p_currentAct);
	public native void FindLoadedAct();
	public native void RegisterState(LegoState p_state);

	public native @Cast("const char*") BytePointer GetSavePath();
	public native @Cast("MxS16") short m_currentPlayerId(); public native LegoGameState m_currentPlayerId(short setter);              // 0x24
	public native @Cast("MxS16") short m_playerCount(); public native LegoGameState m_playerCount(short setter);                  // 0x26
	public native @ByRef Username m_players(int i); public native LegoGameState m_players(int i, Username setter);
	@MemberGetter public native Username m_players();                // 0x28
	public native @ByRef History m_history(); public native LegoGameState m_history(History setter);                    // 0xa6
//	public native @ByRef Script m_jukeboxMusic(); public native LegoGameState m_jukeboxMusic(Script setter); // 0x41c
	public native @Cast("MxBool") boolean m_isDirty(); public native LegoGameState m_isDirty(boolean setter);                     // 0x420
	public native @Cast("LegoGameState::Area") int m_currentArea(); public native LegoGameState m_currentArea(int setter);                   // 0x424
	public native @Cast("LegoGameState::Area") int m_previousArea(); public native LegoGameState m_previousArea(int setter);                  // 0x428
	public native @Cast("LegoGameState::Area") int m_unk0x42c(); public native LegoGameState m_unk0x42c(int setter);                      // 0x42c

	@MemberGetter public static native @Const @ByRef InternationalCharacter g_intCharacters(int i);
	@MemberGetter public static native @Const InternationalCharacter g_intCharacters();
}

public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") BytePointer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(@Cast("const char*") BytePointer p_input, @Cast("char*") ByteBuffer p_output, @Cast("MxU32") long p_copyLen);
public static native @Cast("MxBool") boolean ROIColorOverride(String p_input, @Cast("char*") byte[] p_output, @Cast("MxU32") long p_copyLen);

// SYNTHETIC: LEGO1 0x1003c860
// LegoGameState::ScoreItem::ScoreItem

// #endif // LEGOGAMESTATE_H


// Parsed from legomain.h

// #ifndef LEGOMAIN_H
// #define LEGOMAIN_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "legoutils.h"
// #include "mxdsaction.h"
// #include "mxomni.h"

// #include <SDL3/SDL_events.h>
// #include <SDL3/SDL_timer.h>

@Opaque public static class Isle extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Isle() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Isle(Pointer p) { super(p); }
}
@Opaque public static class LegoCharacterManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoCharacterManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoCharacterManager(Pointer p) { super(p); }
}
@Opaque public static class LegoInputManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoInputManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoInputManager(Pointer p) { super(p); }
}
@Opaque public static class LegoNavController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoNavController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoNavController(Pointer p) { super(p); }
}
@Opaque public static class LegoSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoSoundManager(Pointer p) { super(p); }
}
@Opaque public static class LegoTextureContainer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoTextureContainer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoTextureContainer(Pointer p) { super(p); }
}
@Opaque public static class LegoWorldList extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoWorldList() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorldList(Pointer p) { super(p); }
}
@Opaque public static class ViewLODListManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewLODListManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewLODListManager(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d8638
// VTABLE: BETA10 0x101bc8b8
// SIZE 0x140
@NoOffset public static class LegoOmni extends MxOmni {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoOmni position(long position) {
        return (LegoOmni)super.position(position);
    }
    @Override public LegoOmni getPointer(long i) {
        return new LegoOmni((Pointer)this).offsetAddress(i);
    }

	/** enum LegoOmni:: */
	public static final int
		c_disableInput = 0x01,
		c_disable3d = 0x02,
		c_clearScreen = 0x04;

	/** enum LegoOmni::World */
	public static final int
		e_undefined = -1,
		e_act1 = 0,
		e_imain = 1,
		e_icube = 2,
		e_ireg = 3,
		e_ielev = 4,
		e_iisle = 5,
		e_hosp = 6,
		e_police = 7,
		e_gmain = 8,
		e_bldh = 9,
		e_bldd = 10,
		e_bldj = 11,
		e_bldr = 12,
		e_racc = 13,
		e_racj = 14,
		e_act2 = 15,
		e_act3 = 16,
		e_test = 17,
		e_numWorlds = e_test + 2; // count e_undefined

	// SIZE 0x1c
	@NoOffset public static class WorldContainer extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public WorldContainer(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public WorldContainer(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public WorldContainer position(long position) {
	        return (WorldContainer)super.position(position);
	    }
	    @Override public WorldContainer getPointer(long i) {
	        return new WorldContainer((Pointer)this).offsetAddress(i);
	    }
	
		// FUNCTION: LEGO1 0x1005ac40
		public WorldContainer() { super((Pointer)null); allocate(); }
		private native void allocate();

		public WorldContainer(@Cast("LegoOmni::World") int p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(@Cast("LegoOmni::World") int p_id, @Cast("const char*") BytePointer p_key, MxAtomId p_atomId);
		public WorldContainer(@Cast("LegoOmni::World") int p_id, String p_key, MxAtomId p_atomId) { super((Pointer)null); allocate(p_id, p_key, p_atomId); }
		private native void allocate(@Cast("LegoOmni::World") int p_id, String p_key, MxAtomId p_atomId);

		// FUNCTION: LEGO1 0x1005ac50
		public native @ByRef @Name("operator =") WorldContainer put(@Const @ByRef WorldContainer p_container);

		public native @Cast("LegoOmni::World") int m_id(); public native WorldContainer m_id(int setter);         // 0x00
		public native @Cast("char") byte m_key(int i); public native WorldContainer m_key(int i, byte setter);
		@MemberGetter public native @Cast("char*") BytePointer m_key();     // 0x04
		public native MxAtomId m_atomId(); public native WorldContainer m_atomId(MxAtomId setter); // 0x18
	}

	public LegoOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: LEGO1 0x10058aa0
	// FUNCTION: BETA10 0x1008f830
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x10058ab0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void Init();                                                                        // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                        // vtable+0x18
	public native void Destroy();                                                                     // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                             // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                          // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                     // vtable+0x28
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter);
	public native MxEntity AddToWorld(String p_id, @Cast("MxS32") int p_entityId, MxPresenter p_presenter); // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                       // vtable+0x34
	public native void Pause();                                                                       // vtable+0x38
	public native void Resume();                                                                      // vtable+0x3c

	public native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
	public native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
	public native LegoROI FindROI(String p_name);
	public native void AddWorld(LegoWorld p_world);
	public native void DeleteWorld(LegoWorld p_world);
	public native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
	public native void CreateBackgroundAudio();
	public native void RemoveWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxLong") long p_objectId);
	public native @Cast("MxResult") int RegisterWorlds();
	public native @Cast("const char*") BytePointer GetWorldName(@Cast("LegoOmni::World") int p_id);
	public native MxAtomId GetWorldAtom(@Cast("LegoOmni::World") int p_id);
	public native @Cast("LegoOmni::World") int GetWorldId(@Cast("const char*") BytePointer p_key);
	public native @Cast("LegoOmni::World") int GetWorldId(String p_key);
	public native void DeleteAction();

	public static native @Cast("MxS32") int GetCurrPathInfo(@Cast("LegoPathBoundary**") PointerPointer arg0, @Cast("MxS32*") int arg1);
	public static native @Cast("MxS32") int GetCurrPathInfo(@ByPtrPtr LegoPathBoundary arg0, @Cast("MxS32*") int arg1);
	public static native void CreateInstance();
	public static native LegoOmni GetInstance();

	public native LegoVideoManager GetVideoManager();
	public native MxSoundManager GetSoundManager();

	// FUNCTION: BETA10 0x1009e7a0
	public native LegoInputManager GetInputManager();

	public native LegoTextureContainer GetTextureContainer();
	public native ViewLODListManager GetViewLODListManager();
	public native LegoWorld GetCurrentWorld();
	public native LegoNavController GetNavController();
	public native LegoPathActor GetUserActor();

	// FUNCTION: BETA10 0x100e53a0
	public native LegoPlantManager GetPlantManager();

	public native LegoAnimationManager GetAnimationManager();

	// FUNCTION: BETA10 0x100e53d0
	public native LegoBuildingManager GetBuildingManager();

	// FUNCTION: BETA10 0x100e52b0
	public native LegoGameState GetGameState();

	// FUNCTION: BETA10 0x100e5280
	public native MxBackgroundAudioManager GetBackgroundAudioManager();

	public native MxTransitionManager GetTransitionManager();
	public native @ByRef MxDSAction GetCurrentAction();
	public native LegoCharacterManager GetCharacterManager();
	public native LegoWorldList GetWorldList();

	public native void SetNavController(LegoNavController p_navController);
	public native void SetUserActor(LegoPathActor p_userActor);
	public native void SetCurrentWorld(LegoWorld p_currentWorld);

	// FUNCTION: BETA10 0x100d55c0
	public native void SetExit(@Cast("MxBool") boolean p_exit);

	public native @Cast("MxResult") int StartActionIfUnknown0x13c(@ByRef MxDSAction p_dsAction);
	public native void SetUnknown13c(@Cast("MxBool") boolean p_unk0x13c);

	public native void CloseMainWindow();

	public native void SetVersion10(@Cast("MxBool") boolean p_version10);
	public native @Cast("MxBool") boolean IsVersion10();
	public native @Cast("MxBool") boolean m_unk0x13c(); public native LegoOmni m_unk0x13c(boolean setter); // 0x13c
}

// #endif // LEGOMAIN_H


// Parsed from legomodelpresenter.h

// #ifndef LEGOMODELPRESENTER_H
// #define LEGOMODELPRESENTER_H

// #include "lego1_export.h"
// #include "mxvideopresenter.h"
@Opaque public static class MxDSChunk extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSChunk() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSChunk(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d4e50
// VTABLE: BETA10 0x101bcd88
// SIZE 0x6c
@NoOffset public static class LegoModelPresenter extends MxVideoPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoModelPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoModelPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoModelPresenter position(long position) {
        return (LegoModelPresenter)super.position(position);
    }
    @Override public LegoModelPresenter getPointer(long i) {
        return new LegoModelPresenter((Pointer)this).offsetAddress(i);
    }

	public LegoModelPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x10067a10

	// FUNCTION: LEGO1 0x1000cca0
	public native void Destroy(); // vtable+0x38

	public static native void configureLegoModelPresenter(@Cast("MxS32") int p_modelPresenterConfig);

	// FUNCTION: BETA10 0x100a7180
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000ccb0
	// FUNCTION: BETA10 0x100a7150
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000ccc0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void ReadyTickle(); // vtable+0x18
	public native void ParseExtra();  // vtable+0x30

	public native @Cast("MxResult") int CreateROI(@ByRef MxDSChunk p_chunk, LegoEntity p_entity, @Cast("MxBool") boolean p_roiVisible, LegoWorld p_world);

	public native void Reset();
}

// #endif // LEGOMODELPRESENTER_H


// Parsed from legopartpresenter.h

// #ifndef LEGOPARTPRESENTER_H
// #define LEGOPARTPRESENTER_H

// #include "lego1_export.h"
// #include "legonamedpartlist.h"
// #include "mxmediapresenter.h"

// VTABLE: LEGO1 0x100d4df0
// SIZE 0x54
@NoOffset public static class LegoPartPresenter extends MxMediaPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPartPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoPartPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoPartPresenter position(long position) {
        return (LegoPartPresenter)super.position(position);
    }
    @Override public LegoPartPresenter getPointer(long i) {
        return new LegoPartPresenter((Pointer)this).offsetAddress(i);
    }

	public LegoPartPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x10067300

	// FUNCTION: LEGO1 0x1000cf60
	public native void Destroy(); // vtable+0x38

	// FUNCTION: BETA10 0x100a75d0
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000cf70
	// FUNCTION: BETA10 0x100a75a0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000cf80
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void ReadyTickle();      // vtable+0x18
	public native @Cast("MxResult") int AddToManager(); // vtable+0x34

	public static native void configureLegoPartPresenter(@Cast("MxS32") int arg0, @Cast("MxS32") int arg1);

	// SYNTHETIC: LEGO1 0x1000d060
	// LegoPartPresenter::`scalar deleting destructor'

	public native void Reset();

	public native @Cast("MxResult") int Read(@ByRef MxDSChunk p_chunk);
	public native void Store();
}

// #endif // LEGOPARTPRESENTER_H


// Parsed from legoplantmanager.h

// #ifndef LEGOPLANTMANAGER_H
// #define LEGOPLANTMANAGER_H

// #include "decomp.h"
// #include "legomain.h"
// #include "mxcore.h"
@Opaque public static class LegoPlantInfo extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoPlantInfo() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPlantInfo(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d6758
// SIZE 0x2c
@NoOffset public static class LegoPlantManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoPlantManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoPlantManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoPlantManager position(long position) {
        return (LegoPlantManager)super.position(position);
    }
    @Override public LegoPlantManager getPointer(long i) {
        return new LegoPlantManager((Pointer)this).offsetAddress(i);
    }

	// SIZE 0x0c
	public static class AnimEntry extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public AnimEntry() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public AnimEntry(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public AnimEntry(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public AnimEntry position(long position) {
	        return (AnimEntry)super.position(position);
	    }
	    @Override public AnimEntry getPointer(long i) {
	        return new AnimEntry((Pointer)this).offsetAddress(i);
	    }
	
		public native LegoEntity m_entity(); public native AnimEntry m_entity(LegoEntity setter); // 0x00
		public native LegoROI m_roi(); public native AnimEntry m_roi(LegoROI setter);       // 0x04
		public native @Cast("MxLong") long m_time(); public native AnimEntry m_time(long setter);        // 0x08
	}

	public LegoPlantManager() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x10026290
	public native @Cast("const char*") BytePointer ClassName();

	public native void Init();
	public native void LoadWorldInfo(@Cast("LegoOmni::World") int p_worldId);
	public native void Reset(@Cast("LegoOmni::World") int p_worldId);
	public native @Cast("MxResult") int Write(LegoStorage p_storage);
	public native @Cast("MxResult") int Read(LegoStorage p_storage);
	public native @Cast("MxS32") int GetNumPlants();
	public native @Cast("MxBool") boolean SwitchColor(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchVariant(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchSound(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchMove(LegoEntity p_entity);
	public native @Cast("MxBool") boolean SwitchMood(LegoEntity p_entity);
	public native @Cast("MxU32") long GetAnimationId(LegoEntity p_entity);
	public native @Cast("MxU32") long GetSoundId(LegoEntity p_entity, @Cast("MxBool") boolean p_basedOnMood);
	public native LegoPlantInfo GetInfoArray(@Cast("MxS32*") int p_length);
	public native LegoEntity CreatePlant(@Cast("MxS32") int p_index, LegoWorld p_world, @Cast("LegoOmni::World") int p_worldId);
	public native @Cast("MxBool") boolean DecrementCounter(LegoEntity p_entity);
	public native void ScheduleAnimation(LegoEntity p_entity, @Cast("MxLong") long p_length);
	public native @Cast("MxResult") int DetermineBoundaries();
	public native void ClearCounters();
	public native void SetInitialCounters();

	public static native void SetCustomizeAnimFile(@Cast("const char*") BytePointer p_value);
	public static native void SetCustomizeAnimFile(String p_value);

	// FUNCTION: BETA10 0x1007ffa0
	public static native @Cast("const char*") BytePointer GetCustomizeAnimFile();
}

// #endif // LEGOPLANTMANAGER_H


// Parsed from legotypes.h

/*
	This unpublished source code contains trade secrets and
	copyrighted materials which are the property of Mindscape, Inc.
	Unauthorized use, copying or distribution is a violation of U.S.
	and international laws and is strictly prohibited.
*/

// #ifndef __LEGOTYPES_H
// #define __LEGOTYPES_H

// #ifndef TRUE
public static final int TRUE = 1;
// #endif

// #ifndef FALSE
public static final int FALSE = 0;
// #endif

// #ifndef NULL
public static final int NULL = 0;
// #endif

// #ifndef SUCCESS
public static final int SUCCESS = 0;
// #endif

// #ifndef FAILURE
public static final int FAILURE = -1;
// #endif

// #endif // __LEGOTYPES_H


// Parsed from legovideomanager.h

// #ifndef LEGOVIDEOMANAGER_H
// #define LEGOVIDEOMANAGER_H

// #include "cursor.h"
// #include "decomp.h"
// #include "lego1_export.h"
// #include "legophonemelist.h"
// #include "mxvideomanager.h"

// #ifdef MINIWIN
// #include "miniwin/d3drm.h"
// #include "miniwin/ddraw.h"
// #else
// #include <d3drm.h>
// #include <ddraw.h>
// #endif

@Opaque public static class Lego3DManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Lego3DManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Lego3DManager(Pointer p) { super(p); }
}
@Opaque public static class MxDirect3D extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDirect3D() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirect3D(Pointer p) { super(p); }
}
@Opaque public static class MxStopWatch extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStopWatch() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStopWatch(Pointer p) { super(p); }
}
@Opaque public static class ViewportAppData extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ViewportAppData() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewportAppData(Pointer p) { super(p); }
}
@Namespace("Tgl") @Opaque public static class Renderer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Renderer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Renderer(Pointer p) { super(p); }
}


// VTABLE: LEGO1 0x100d9c88
// SIZE 0x590
@NoOffset public static class LegoVideoManager extends MxVideoManager {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoVideoManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoVideoManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoVideoManager position(long position) {
        return (LegoVideoManager)super.position(position);
    }
    @Override public LegoVideoManager getPointer(long i) {
        return new LegoVideoManager((Pointer)this).offsetAddress(i);
    }

	public LegoVideoManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native int EnableRMDevice();
	public native int DisableRMDevice();
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable);
	public native void EnableFullScreenMovie(@Cast("MxBool") boolean p_enable, @Cast("MxBool") boolean p_scale);
	public native void MoveCursor(@Cast("MxS32") int p_cursorX, @Cast("MxS32") int p_cursorY);
	public native void SetCursorBitmap(@Const Pointer p_cursorBitmap);
	public native void ToggleFPS(@Cast("MxBool") boolean p_visible);

	public native @Cast("MxResult") int Tickle();                                                                       // vtable+0x08
	public native void Destroy();                                                                          // vtable+0x18
	public native @Cast("MxResult") int Create(@ByRef MxVideoParam p_videoParam, @Cast("MxU32") long p_frequencyMS, @Cast("MxBool") boolean p_createThread); // vtable+0x2c
	public native @Cast("MxResult") int RealizePalette(MxPalette arg0);                                                     // vtable+0x30
	public native void UpdateView(@Cast("MxU32") long p_x, @Cast("MxU32") long p_y, @Cast("MxU32") long p_width, @Cast("MxU32") long p_height);                    // vtable+0x34
	public native MxPresenter GetPresenterAt(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y);                                        // vtable+0x38

	// FUNCTION: LEGO1 0x1007ab10
//	public native LegoPhonemeList GetPhonemeList(); // vtable+0x3c

	public native void SetSkyColor(float p_red, float p_green, float p_blue);
	public native void OverrideSkyColor(@Cast("MxBool") boolean p_shouldOverride);
	public native @Cast("MxResult") int ResetPalette(@Cast("MxBool") boolean p_ignoreSkyColor);
	public native MxPresenter GetPresenterByActionObjectName(@Cast("const char*") BytePointer p_char);
	public native MxPresenter GetPresenterByActionObjectName(String p_char);

	public native void FUN_1007c520();

	public native Renderer GetRenderer();

	// FUNCTION: BETA10 0x100117e0
	public native Lego3DManager Get3DManager();

	// FUNCTION: BETA10 0x1003a380
	public native LegoROI GetViewROI();

	public native MxDirect3D GetDirect3D();
	public native @Cast("MxBool") boolean GetRender3D();
	public native double GetElapsedSeconds();

	// FUNCTION: BETA10 0x1002e290
	public native void SetRender3D(@Cast("MxBool") boolean p_render3d);

	public native void SetUnk0x554(@Cast("MxBool") boolean p_unk0x554);
}

// SYNTHETIC: LEGO1 0x1007ab20
// LegoVideoManager::`scalar deleting destructor'

// #endif // LEGOVIDEOMANAGER_H


// Parsed from legoworldpresenter.h

// #ifndef LEGOWORLDPRESENTER_H
// #define LEGOWORLDPRESENTER_H

// #include "lego1_export.h"
// #include "legoentitypresenter.h"

// #include <SDL3/SDL_iostream.h>
@Opaque public static class ModelDbPart extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ModelDbPart() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ModelDbPart(Pointer p) { super(p); }
}
@Opaque public static class ModelDbModel extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ModelDbModel() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ModelDbModel(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d8ee0
// SIZE 0x54
@NoOffset public static class LegoWorldPresenter extends LegoEntityPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoWorldPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoWorldPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoWorldPresenter position(long position) {
        return (LegoWorldPresenter)super.position(position);
    }
    @Override public LegoWorldPresenter getPointer(long i) {
        return new LegoWorldPresenter((Pointer)this).offsetAddress(i);
    }

	public LegoWorldPresenter() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public static native void configureLegoWorldPresenter(@Cast("MxS32") int p_legoWorldPresenterQuality);

	// FUNCTION: BETA10 0x100e41c0
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x10066630
	// FUNCTION: BETA10 0x100e4190
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x10066640
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void ReadyTickle();                                                           // vtable+0x18
	public native void StartingTickle();                                                        // vtable+0x1c
	public native void ParseExtra();                                                            // vtable+0x30
	public native @Cast("MxResult") int StartAction(MxStreamController p_controller, MxDSAction p_action); // vtable+0x3c
	public native void VTable0x60(MxPresenter p_presenter);                                    // vtable+0x60

	public native @Cast("MxResult") int LoadWorld(@Cast("char*") BytePointer p_worldName, LegoWorld p_world);
	public native @Cast("MxResult") int LoadWorld(@Cast("char*") ByteBuffer p_worldName, LegoWorld p_world);
	public native @Cast("MxResult") int LoadWorld(@Cast("char*") byte[] p_worldName, LegoWorld p_world);
}

// #endif // LEGOWORLDPRESENTER_H


// Parsed from misc.h

// #ifndef MISC_H
// #define MISC_H

// #include "compat.h"
// #include "decomp.h"
// Long include path due to dependency of misc library on LegoOmni
// #include "lego/legoomni/include/actions/actionsfwd.h"
// #include "lego1_export.h"
// #include "mxtypes.h"
@Opaque public static class LegoControlManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LegoControlManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoControlManager(Pointer p) { super(p); }
}

public static native @Cast("MxBool") boolean g_isWorldActive(); public static native void g_isWorldActive(boolean setter);

public static native LegoOmni Lego();
public static native LegoSoundManager SoundManager();
public static native LegoVideoManager VideoManager();
public static native MxBackgroundAudioManager BackgroundAudioManager();
public static native LegoInputManager InputManager();
public static native LegoControlManager ControlManager();
public static native LegoGameState GameState();
public static native LegoAnimationManager AnimationManager();
public static native LegoNavController NavController();
public static native LegoPathActor UserActor();
public static native LegoWorld CurrentWorld();
public static native LegoCharacterManager CharacterManager();
public static native ViewManager GetViewManager();
public static native LegoPlantManager PlantManager();
public static native LegoBuildingManager BuildingManager();
public static native LegoTextureContainer TextureContainer();
public static native ViewLODListManager GetViewLODListManager();
public static native void Disable(@Cast("MxBool") boolean p_disable, @Cast("MxU16") int p_flags);
public static native LegoROI FindROI(@Cast("const char*") BytePointer p_name);
public static native LegoROI FindROI(String p_name);
public static native void SetROIVisible(@Cast("const char*") BytePointer p_name, @Cast("MxBool") boolean p_visible);
public static native void SetROIVisible(String p_name, @Cast("MxBool") boolean p_visible);
public static native void SetUserActor(LegoPathActor p_userActor);
public static native @Cast("MxResult") int StartActionIfUnknown0x13c(@ByRef MxDSAction p_dsAction);
public static native void DeleteAction();
public static native LegoWorld FindWorld(@Const @ByRef MxAtomId p_atom, @Cast("MxS32") int p_entityid);
public static native @ByRef MxDSAction GetCurrentAction();
public static native void SetCurrentWorld(LegoWorld p_world);
public static native MxTransitionManager TransitionManager();
//public static native void PlayMusic(@ByVal Script p_objectId);
public static native void SetIsWorldActive(@Cast("MxBool") boolean p_isWorldActive);
public static native void DeleteObjects(MxAtomId p_id, @Cast("MxS32") int p_first, @Cast("MxS32") int p_last);

// #endif // MISC_H


// Parsed from mxatom.h

// #ifndef MXATOM_H
// #define MXATOM_H

// #include "lego1_export.h"
// #include "mxstl/stlcompat.h"
// #include "mxstring.h"
// #include "mxtypes.h"

// Counts the number of existing MxAtomId objects based
// on the matching char* string. A <map> seems fit for purpose here:
// We have an MxString as a key and MxU16 as the value.
// And yet a <set> is the best match. The malloc in MxOmni::Create
// for the _Nil node asks for more bytes than a regular node if a <map>
// is used, but all nodes are 20 bytes wide with a <set>.
// Also: the increment/decrement methods suggest a custom type was used
// for the combined key_value_pair, which doesn't seem possible with <map>.

// SIZE 0x14
@NoOffset public static class MxAtom extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtom(Pointer p) { super(p); }

	// always inlined
	// FUNCTION: BETA10 0x10123720
	public MxAtom(@Cast("const char*") BytePointer p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Cast("const char*") BytePointer p_str);
	public MxAtom(String p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(String p_str);

	public native void Inc();
	public native void Dec();

	// FUNCTION: BETA10 0x101236d0
	public native @ByRef MxString GetKey();
}

public static class MxAtomCompare extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MxAtomCompare() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxAtomCompare(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomCompare(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MxAtomCompare position(long position) {
        return (MxAtomCompare)super.position(position);
    }
    @Override public MxAtomCompare getPointer(long i) {
        return new MxAtomCompare((Pointer)this).offsetAddress(i);
    }

	// FUNCTION: LEGO1 0x100ad120
	// FUNCTION: BETA10 0x10123980
	public native @Name("operator ()") int apply(@ByPtrRef MxAtom p_val0, @ByPtrRef MxAtom p_val1);
}

//@Opaque public static class MxAtomSet extends set<MxAtom*,MxAtomCompare> {
//    /** Empty constructor. Calls {@code super((Pointer)null)}. */
//    public MxAtomSet() { super((Pointer)null); }
//    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
//    public MxAtomSet(Pointer p) { super(p); }
//}

/** enum LookupMode */
public static final int
	e_exact = 0,
	e_lowerCase = 1,
	e_upperCase = 2,
	e_lowerCase2 = 3;

// SIZE 0x04
@NoOffset public static class MxAtomId extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAtomId(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxAtomId(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxAtomId position(long position) {
        return (MxAtomId)super.position(position);
    }
    @Override public MxAtomId getPointer(long i) {
        return new MxAtomId((Pointer)this).offsetAddress(i);
    }

	public MxAtomId(@Cast("const char*") BytePointer arg0, @Cast("LookupMode") int arg1) { super((Pointer)null); allocate(arg0, arg1); }
	private native void allocate(@Cast("const char*") BytePointer arg0, @Cast("LookupMode") int arg1);
	public MxAtomId(String arg0, @Cast("LookupMode") int arg1) { super((Pointer)null); allocate(arg0, arg1); }
	private native void allocate(String arg0, @Cast("LookupMode") int arg1);

	public native @ByRef @Name("operator =") MxAtomId put(@Const @ByRef MxAtomId p_atomId);

	// FUNCTION: BETA10 0x100178d0
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Const @ByRef MxAtomId p_atomId);

// #ifdef COMPAT_MODE
	// Required for modern compilers.
	// MSVC 4.20 uses a synthetic function from INCLUDE/UTILITY that inverts operator==
	public native @Cast("MxBool") @Name("operator !=") boolean notEquals(@Const @ByRef MxAtomId p_atomId);
// #endif

	// TODO:
	// BETA10 0x1007dc20 operator==
	// BETA10 0x10096970 operator!=

	// FUNCTION: BETA10 0x10146dd0
	public native @Cast("MxBool") @Name("operator ==") boolean equals(@Cast("const char*") BytePointer p_internal);
	public native @Cast("MxBool") @Name("operator ==") boolean equals(String p_internal);

	// FUNCTION: BETA10 0x10025d40
	public MxAtomId() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void Clear();

	// FUNCTION: BETA10 0x100735e0
	public native @Cast("const char*") BytePointer GetInternal();
}

// SYNTHETIC: BETA10 0x1002b520
// ??9@YAHABVMxAtomId@@0@Z
// aka MxAtomId::operator!=

// SYNTHETIC: LEGO1 0x100ad170
// MxAtom::~MxAtom

// clang-format off
// TEMPLATE: LEGO1 0x100ad480
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::iterator::_Dec
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100ad780
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Lbound
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100ad4d0
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Insert
// clang-format on

// clang-format off
// TEMPLATE: BETA10 0x101237a0
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::const_iterator::operator*
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100af6d0
// TEMPLATE: BETA10 0x10131170
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::~_Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100af7a0
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::iterator::_Inc
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100af7e0
// ?erase@?$_Tree@PAVMxAtom@@PAV1@U_Kfn@?$set@PAVMxAtom@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@QAE?AViterator@1@V21@@Z

// TEMPLATE: BETA10 0x10131210
// ?erase@?$_Tree@PAVMxAtom@@PAV1@U_Kfn@?$set@PAVMxAtom@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@QAE?AViterator@1@V21@0@Z
// clang-format on

// clang-format off
// TEMPLATE: BETA10 0x10131460
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::size
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100afc40
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Erase
// clang-format on

// clang-format off
// TEMPLATE: LEGO1 0x100afc80
// TEMPLATE: BETA10 0x10132080
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::~set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >
// clang-format on

// TEMPLATE: LEGO1 0x100afe40
// TEMPLATE: BETA10 0x101320e0
// Set<MxAtom *,MxAtomCompare>::~Set<MxAtom *,MxAtomCompare>

// TEMPLATE: BETA10 0x10132140
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::begin

// clang-format off
// GLOBAL: LEGO1 0x101013f0
// GLOBAL: BETA10 0x10201264
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Nil
// clang-format on

// clang-format off
// TEMPLATE: BETA10 0x10132170
// ?begin@?$_Tree@PAVMxAtom@@PAV1@U_Kfn@?$set@PAVMxAtom@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@QAE?AViterator@1@XZ
// Note: could also be
// ?begin@?$_Tree@PAVMxAtom@@PAV1@U_Kfn@?$set@PAVMxAtom@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@UMxAtomCompare@@V?$allocator@PAVMxAtom@@@@@@QBE?AVconst_iterator@1@XZ
// clang-format on

// TEMPLATE: BETA10 0x101321d0
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::size

// TEMPLATE: BETA10 0x101321f0
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::erase

// TEMPLATE: BETA10 0x101237f0
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::end

// TEMPLATE: BETA10 0x101238b0
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::find

// clang-format off
// TEMPLATE: BETA10 0x101238e0
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::find
// clang-format on

// SYNTHETIC: BETA10 0x10123bf0
// MxAtom::~MxAtom

// TEMPLATE: BETA10 0x10123c50
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::insert

// SYNTHETIC: BETA10 0x10130fc0
// MxAtomSet::MxAtomSet

// TEMPLATE: BETA10 0x10131030
// Set<MxAtom *,MxAtomCompare>::Set<MxAtom *,MxAtomCompare>

// clang-format off
// TEMPLATE: BETA10 0x101310a0
// set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >

// TEMPLATE: BETA10 0x10131120
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >

// TEMPLATE: BETA10 0x10131f30
// _Tree<MxAtom *,MxAtom *,set<MxAtom *,MxAtomCompare,allocator<MxAtom *> >::_Kfn,MxAtomCompare,allocator<MxAtom *> >::_Init
// clang-format on

// SYNTHETIC: BETA10 0x101322a0
// MxAtomSet::`scalar deleting destructor'

// SYNTHETIC: BETA10 0x101322e0
// MxAtomSet::~MxAtomSet

// #endif // MXATOM_H


// Parsed from mxbackgroundaudiomanager.h

// #ifndef MXBACKGROUNDAUDIOMANAGER_H
// #define MXBACKGROUNDAUDIOMANAGER_H

// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxdsaction.h"
// #include "mxpresenter.h"
// #include "mxtypes.h"

@Opaque public static class MxAudioPresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxAudioPresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxAudioPresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d9fe8
// VTABLE: BETA10 0x101bf508
// SIZE 0x150
@NoOffset public static class MxBackgroundAudioManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxBackgroundAudioManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxBackgroundAudioManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxBackgroundAudioManager position(long position) {
        return (MxBackgroundAudioManager)super.position(position);
    }
    @Override public MxBackgroundAudioManager getPointer(long i) {
        return new MxBackgroundAudioManager((Pointer)this).offsetAddress(i);
    }

	public MxBackgroundAudioManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04
	public native @Cast("MxResult") int Tickle();               // vtable+0x08

	// FUNCTION: LEGO1 0x1007eb70
	// FUNCTION: BETA10 0x100e9af0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1007eb80
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxBool") boolean GetEnabled();

	public native void StartAction(@ByRef MxParam p_param);
	public native void StopAction(@ByRef MxParam p_param);
//	public native @Cast("MxResult") int PlayMusic(@ByRef MxDSAction p_action, @Cast("MxS32") int p_speed, @ByVal TickleState p_tickleState);

	public native void MakePendingPresenterActive();
	public native void FadeInPendingPresenter();
	public native void FadeToTargetVolume();

	public native void Enable(@Cast("MxBool") boolean p_enable);
//	public native @Cast("MxResult") int Create(@ByRef MxAtomId p_script, @Cast("MxU32") long p_frequencyMS);

	public native void Init();
	public native void Stop();
	public native void LowerVolume();
	public native void RaiseVolume();
//	public native @Cast("MxResult") int SetPendingPresenter(MxPresenter p_presenter, @Cast("MxS32") int p_speed, @ByVal TickleState p_tickleState);
}

// #endif // MXBACKGROUNDAUDIOMANAGER_H


// Parsed from mxcore.h

// #ifndef MXCORE_H
// #define MXCORE_H

// #include "compat.h"
// #include "mxtypes.h"

// #include <string.h>

@Opaque public static class MxParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxParam(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc0f8
// VTABLE: BETA10 0x101c1bc8
// SIZE 0x08
@NoOffset public static class MxCore extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCore(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxCore(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxCore position(long position) {
        return (MxCore)super.position(position);
    }
    @Override public MxCore getPointer(long i) {
        return new MxCore((Pointer)this).offsetAddress(i);
    }

	public MxCore() { super((Pointer)null); allocate(); }
	private native void allocate();                       // vtable+00
	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+04

	// FUNCTION: LEGO1 0x10001f70
	// FUNCTION: BETA10 0x1000f380
	public native @Cast("MxResult") int Tickle(); // vtable+08

	// FUNCTION: LEGO1 0x100144c0
	// FUNCTION: BETA10 0x100126d0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100140d0
	// FUNCTION: BETA10 0x10012680
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxU32") long GetId();
}

// SYNTHETIC: BETA10 0x10096940
// MxCore::operator=

// #endif // MXCORE_H


// Parsed from mxdirectdraw.h

// #ifndef MXDIRECTDRAW_H
// #define MXDIRECTDRAW_H

// #include "lego1_export.h"
// #include "mxdirectxinfo.h"

// #ifdef MINIWIN
// #include "miniwin/ddraw.h"
// #include "miniwin/windows.h"
// #else
// #include <ddraw.h>
// #include <windows.h>
// #endif

// VTABLE: LEGO1 0x100db818
// VTABLE: BETA10 0x101c1b10
// SIZE 0x880
@NoOffset public static class MxDirectDraw extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDirectDraw(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDirectDraw(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDirectDraw position(long position) {
        return (MxDirectDraw)super.position(position);
    }
    @Override public MxDirectDraw getPointer(long i) {
        return new MxDirectDraw((Pointer)this).offsetAddress(i);
    }

	public static class ErrorHandler extends FunctionPointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public    ErrorHandler(Pointer p) { super(p); }
	    protected ErrorHandler() { allocate(); }
	    private native void allocate();
	    public native void call(@Cast("const char*") BytePointer arg0, @ByVal int arg1, Pointer arg2);
	}

	public static native int GetPrimaryBitDepth();

	public MxDirectDraw() { super((Pointer)null); allocate(); }
	private native void allocate();

//	public native @Cast("BOOL") boolean Create(
//			HWND__ hWnd,
//			@Cast("BOOL") boolean fullscreen_1,
//			@Cast("BOOL") boolean surface_fullscreen,
//			@Cast("BOOL") boolean onlySystemMemory,
//			int width,
//			int height,
//			int bpp,
//			@Const PALETTEENTRY pPaletteEntries,
//			int paletteEntryCount
//		);                                      // vtable+0x04
	public native void Destroy();                 // vtable+0x08
	public native void DestroyButNotDirectDraw(); // vtable+0x0c

	public native Pointer DirectDraw();

	// FUNCTION: BETA10 0x100d8ab0
	public native Pointer FrontBuffer();

	// FUNCTION: BETA10 0x100d8ae0
	public native Pointer BackBuffer();

	// FUNCTION: BETA10 0x100d8b10
	public native Pointer Clipper();

	// FUNCTION: BETA10 0x1011c190
	public native Pointer CurrentMode();

	// FUNCTION: BETA10 0x1011c170
	public native @Cast("BOOL") boolean IsFullScreen();

	public native int Pause(@Cast("BOOL") boolean arg0);
	public native @Cast("BOOL") boolean RestoreSurfaces();

	public native @Cast("const char*") BytePointer ErrorToString(@ByVal int p_error); // vtable+0x10
	public native int FlipToGDISurface();
}

// #endif // MXDIRECTDRAW_H


// Parsed from mxdsaction.h

// #ifndef MXDSACTION_H
// #define MXDSACTION_H

// #include "lego1_export.h"
// #include "mxdsobject.h"
// #include "mxgeometry/mxgeometry3d.h"
// #include "mxtypes.h"

// VTABLE: LEGO1 0x100dc098
// VTABLE: BETA10 0x101c1b68
// SIZE 0x94
@NoOffset public static class MxDSAction extends MxDSObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSAction(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSAction(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSAction position(long position) {
        return (MxDSAction)super.position(position);
    }
    @Override public MxDSAction getPointer(long i) {
        return new MxDSAction((Pointer)this).offsetAddress(i);
    }

	/** enum MxDSAction:: */
	public static final int
		c_looping = 0x01,
		c_bit3 = 0x04,
		c_bit4 = 0x08,
		c_bit5 = 0x10,
		c_enabled = 0x20,
		c_bit7 = 0x40,
		c_world = 0x80,
		c_bit9 = 0x100,
		c_bit10 = 0x200,
		c_bit11 = 0x400;

	public MxDSAction() { super((Pointer)null); allocate(); }
	private native void allocate();

	public MxDSAction(@ByRef MxDSAction p_dsAction) { super((Pointer)null); allocate(p_dsAction); }
	private native void allocate(@ByRef MxDSAction p_dsAction);
	public native void CopyFrom(@ByRef MxDSAction p_dsAction);
	public native @ByRef @Name("operator =") MxDSAction put(@ByRef MxDSAction p_dsAction);

	// FUNCTION: LEGO1 0x100ad980
	// FUNCTION: BETA10 0x1012bcf0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100ad990
	// FUNCTION: BETA10 0x1012bd10
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("undefined4") long VTable0x14();                            // vtable+0x14
	public native @Cast("MxU32") long GetSizeOnDisk();                              // vtable+0x18
	public native void Deserialize(@Cast("MxU8*&") short p_source, @Cast("MxS16") short p_unk0x24); // vtable+0x1c
	public native @Cast("MxLong") long GetDuration();                                // vtable+0x24
	public native void SetDuration(@Cast("MxLong") long p_duration);                 // vtable+0x28
	public native MxDSAction Clone();                                 // vtable+0x2c
	public native void MergeFrom(@ByRef MxDSAction p_dsAction);              // vtable+0x30
	public native @Cast("MxBool") boolean HasId(@Cast("MxU32") long p_objectId);                      // vtable+0x34
	public native void SetTimeStarted(@Cast("MxLong") long p_timeStarted);           // vtable+0x38
	public native @Cast("MxLong") long GetTimeStarted();                             // vtable+0x3c
	public native @Cast("MxLong") long GetElapsedTime();                             // vtable+0x40

	public native void AppendExtra(@Cast("MxU16") int p_extraLength, @Cast("const char*") BytePointer p_extraData);
	public native void AppendExtra(@Cast("MxU16") int p_extraLength, String p_extraData);

	// FUNCTION: BETA10 0x1003a560
	public native void GetExtra(@Cast("MxU16*") int p_extraLength, @Cast("char*&") @ByPtrRef BytePointer p_extraData);
	public native void GetExtra(@Cast("MxU16*") int p_extraLength, @Cast("char*&") @ByPtrRef ByteBuffer p_extraData);
	public native void GetExtra(@Cast("MxU16*") int p_extraLength, @Cast("char*&") @ByPtrRef byte[] p_extraData);

	// FUNCTION: BETA10 0x1003cf70
	public native @Cast("MxU32") long GetFlags();

	// FUNCTION: BETA10 0x1004daa0
	public native void SetFlags(@Cast("MxU32") long p_flags);

	public native @Cast("char*") BytePointer GetExtraData();
	public native @Cast("MxU16") int GetExtraLength();

	// FUNCTION: BETA10 0x1005a560
	public native @Cast("MxLong") long GetStartTime();

	// FUNCTION: BETA10 0x1012be80
	public native @Cast("MxS32") int GetLoopCount();

	// FUNCTION: BETA10 0x100f27f0
	public native void SetLoopCount(@Cast("MxS32") int p_loopCount);

	// FUNCTION: BETA10 0x1003db50
	public native @Const @ByRef Vector3 GetLocation();

	// FUNCTION: BETA10 0x1003db80
	public native @Const @ByRef Vector3 GetDirection();

	// FUNCTION: BETA10 0x1003dbb0
	public native @Const @ByRef Vector3 GetUp();

	// FUNCTION: BETA10 0x100153b0
	public native void SetLocation(@Const @ByRef Vector3 p_location);

	// FUNCTION: BETA10 0x100153f0
	public native void SetDirection(@Const @ByRef Vector3 p_direction);

	// FUNCTION: BETA10 0x10015430
	public native void SetUp(@Const @ByRef Vector3 p_up);

	public native MxCore GetNotificationObject();
	public native void SetNotificationObject(MxCore p_notificationObject);
	public native MxCore GetOrigin();
	public native void SetOrigin(MxCore p_origin);

	public native @Cast("MxBool") boolean IsLooping();
	public native @Cast("MxBool") boolean IsBit3();
}

// #endif // MXDSACTION_H


// Parsed from mxdsfile.h

// #ifndef MXDSFILE_H
// #define MXDSFILE_H

// #include "lego1_export.h"
// #include "mxdssource.h"
// #include "mxio.h"
// #include "mxstring.h"
// #include "mxtypes.h"

// VTABLE: LEGO1 0x100dc890
// VTABLE: BETA10 0x101c2418
// SIZE 0x7c
@NoOffset public static class MxDSFile extends MxDSSource {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSFile(Pointer p) { super(p); }

	public MxDSFile(@Cast("const char*") BytePointer p_filename, @Cast("MxULong") long p_skipReadingChunks) { super((Pointer)null); allocate(p_filename, p_skipReadingChunks); }
	private native void allocate(@Cast("const char*") BytePointer p_filename, @Cast("MxULong") long p_skipReadingChunks);
	public MxDSFile(String p_filename, @Cast("MxULong") long p_skipReadingChunks) { super((Pointer)null); allocate(p_filename, p_skipReadingChunks); }
	private native void allocate(String p_filename, @Cast("MxULong") long p_skipReadingChunks);

	/** enum MxDSFile:: */
	public static final int
		e_openRead = 0;

// #ifdef ISLE_APP
// #else
	// We have to explicitly use dllexport, otherwise this function cannot be exported,
	// since it is inlined everywhere in LEGO1.DLL
	// FUNCTION: LEGO1 0x100bfed0
	// FUNCTION: BETA10 0x10148ac0
// #endif

	// FUNCTION: LEGO1 0x100c0120
	// FUNCTION: BETA10 0x10148dc0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100c0130
	// FUNCTION: BETA10 0x10148de0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") long Open(@Cast("MxULong") long arg0);                 // vtable+0x14
	public native @Cast("MxResult") long Close();                       // vtable+0x18
	public native @Cast("MxResult") int Read(@Cast("unsigned char*") BytePointer arg0, @Cast("MxULong") long arg1);
	public native @Cast("MxResult") int Read(@Cast("unsigned char*") ByteBuffer arg0, @Cast("MxULong") long arg1);
	public native @Cast("MxResult") int Read(@Cast("unsigned char*") byte[] arg0, @Cast("MxULong") long arg1); // vtable+0x20
//	public native @Cast("MxResult") int Seek(@Cast("MxLong") long arg0, @ByVal SDL_IOWhence arg1);    // vtable+0x24
	public native @Cast("MxULong") long GetBufferSize();                // vtable+0x28
	public native @Cast("MxULong") long GetStreamBuffersNum();          // vtable+0x2c

	// FUNCTION: BETA10 0x1015e110
	public native void SetFileName(@Cast("const char*") BytePointer p_filename);
	public native void SetFileName(String p_filename);

	public native @Cast("MxS32") int CalcFileSize();

	// SYNTHETIC: LEGO1 0x100c01e0
	// SYNTHETIC: BETA10 0x10148e40
	// MxDSFile::`scalar deleting destructor'

	// SIZE 0x0c
	@NoOffset public static class ChunkHeader extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public ChunkHeader(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public ChunkHeader(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public ChunkHeader position(long position) {
	        return (ChunkHeader)super.position(position);
	    }
	    @Override public ChunkHeader getPointer(long i) {
	        return new ChunkHeader((Pointer)this).offsetAddress(i);
	    }
	
		// FUNCTION: BETA10 0x1015e040
		public ChunkHeader() { super((Pointer)null); allocate(); }
		private native void allocate();

		public native @Cast("MxS16") short m_majorVersion(); public native ChunkHeader m_majorVersion(short setter);     // 0x00
		public native @Cast("MxS16") short m_minorVersion(); public native ChunkHeader m_minorVersion(short setter);     // 0x02
		public native @Cast("MxU32") long m_bufferSize(); public native ChunkHeader m_bufferSize(long setter);       // 0x04
		public native @Cast("MxS16") short m_streamBuffersNum(); public native ChunkHeader m_streamBuffersNum(short setter); // 0x08
		public native @Cast("MxS16") short m_reserved(); public native ChunkHeader m_reserved(short setter);         // 0x0a
	}
}

// #endif // MXDSFILE_H


// Parsed from mxmisc.h

// #ifndef MXMISC_H
// #define MXMISC_H

// #include "lego1_export.h"
// #include "mxtypes.h"
@Opaque public static class MxEventManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEventManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEventManager(Pointer p) { super(p); }
}
@Opaque public static class MxNotificationManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxNotificationManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationManager(Pointer p) { super(p); }
}
@Opaque public static class MxObjectFactory extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxObjectFactory() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxObjectFactory(Pointer p) { super(p); }
}
@Opaque public static class MxSoundManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxSoundManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxSoundManager(Pointer p) { super(p); }
}
@Opaque public static class MxTickleManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxTickleManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTickleManager(Pointer p) { super(p); }
}
@Opaque public static class MxVideoManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoManager(Pointer p) { super(p); }
}

public static native MxTickleManager TickleManager();
public static native MxTimer Timer();
public static native MxStreamer Streamer();
public static native MxSoundManager MSoundManager();
public static native MxVariableTable VariableTable();
public static native MxEventManager EventManager();
public static native @Cast("MxResult") int Start(MxDSAction arg0);
public static native MxNotificationManager NotificationManager();
public static native MxVideoManager MVideoManager();
//public static native MxAtomSet AtomSet();
public static native MxObjectFactory ObjectFactory();
public static native void DeleteObject(@ByRef MxDSAction p_dsAction);

// #endif // MXMISC_H


// Parsed from mxomnicreateflags.h

// #ifndef MXOMNICREATEFLAGS_H
// #define MXOMNICREATEFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// SIZE 0x02
@NoOffset public static class MxOmniCreateFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmniCreateFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmniCreateFlags position(long position) {
        return (MxOmniCreateFlags)super.position(position);
    }
    @Override public MxOmniCreateFlags getPointer(long i) {
        return new MxOmniCreateFlags((Pointer)this).offsetAddress(i);
    }

	public MxOmniCreateFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x10092b50
	public native void CreateObjectFactory(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092b90
	public native void CreateTickleManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092bd0
	public native void CreateVideoManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10092c10
	public native void CreateSoundManager(@Cast("MxBool") boolean p_enable);

	// FUNCTION: BETA10 0x10130cd0
	public native @Cast("const MxBool") boolean CreateObjectFactory();

	// FUNCTION: BETA10 0x10130cf0
	public native @Cast("const MxBool") boolean CreateVariableTable();

	// FUNCTION: BETA10 0x10130d10
	public native @Cast("const MxBool") boolean CreateTickleManager();

	// FUNCTION: BETA10 0x10130d30
	public native @Cast("const MxBool") boolean CreateNotificationManager();

	// FUNCTION: BETA10 0x10130d50
	public native @Cast("const MxBool") boolean CreateVideoManager();

	// FUNCTION: BETA10 0x10130d70
	public native @Cast("const MxBool") boolean CreateSoundManager();

	// FUNCTION: BETA10 0x10130d90
	public native @Cast("const MxBool") boolean CreateMusicManager();

	// FUNCTION: BETA10 0x10130db0
	public native @Cast("const MxBool") boolean CreateEventManager();

	// FUNCTION: BETA10 0x10130dd0
	public native @Cast("const MxBool") boolean CreateTimer();

	// FUNCTION: BETA10 0x10130e00
	public native @Cast("const MxBool") boolean CreateStreamer();
}

// #endif // MXOMNICREATEFLAGS_H


// Parsed from mxomnicreateparam.h

// #ifndef MXOMNICREATEPARAM_H
// #define MXOMNICREATEPARAM_H

// #include "lego1_export.h"
// #include "mxomnicreateflags.h"
// #include "mxparam.h"
// #include "mxstring.h"
// #include "mxvideoparam.h"

// #include <SDL3/SDL_video.h>

// VTABLE: LEGO1 0x100dc218
// VTABLE: BETA10 0x101c1ca8
@NoOffset public static class MxOmniCreateParam extends MxParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmniCreateParam(Pointer p) { super(p); }

	public MxOmniCreateParam(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND__ p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			@Cast("const char*") BytePointer p_mediaPath,
			HWND__ p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);
	public MxOmniCreateParam(
			String p_mediaPath,
			HWND__ p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		) { super((Pointer)null); allocate(p_mediaPath, p_windowHandle, p_vparam, p_flags); }
	private native void allocate(
			String p_mediaPath,
			HWND__ p_windowHandle,
			@ByRef MxVideoParam p_vparam,
			@ByVal MxOmniCreateFlags p_flags
		);

	// FUNCTION: BETA10 0x10092cb0
	public native @ByRef MxOmniCreateFlags CreateFlags();

	public native @Const @ByRef MxString GetMediaPath();
	public native HWND__ GetWindowHandle();
	public native @ByRef MxVideoParam GetVideoParam();
}

// SYNTHETIC: ISLE 0x4014b0
// SYNTHETIC: BETA10 0x10132780
// MxOmniCreateParam::~MxOmniCreateParam

// #endif // MXOMNICREATEPARAM_H


// Parsed from mxomni.h

// #ifndef MXOMNI_H
// #define MXOMNI_H

// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxstl/stlcompat.h"
// #include "mxstring.h"

// #include <SDL3/SDL_video.h>
// #ifdef MINIWIN
// #include "miniwin/windows.h"
// #else
// #include <windows.h>
// #endif
@Opaque public static class MxEntity extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEntity() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEntity(Pointer p) { super(p); }
}
@Opaque public static class MxNotificationParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxNotificationParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxNotificationParam(Pointer p) { super(p); }
}
@Opaque public static class MxStreamController extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamController() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamController(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc168
// SIZE 0x68
@NoOffset public static class MxOmni extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxOmni(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxOmni(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxOmni position(long position) {
        return (MxOmni)super.position(position);
    }
    @Override public MxOmni getPointer(long i) {
        return new MxOmni((Pointer)this).offsetAddress(i);
    }

	public static native void DestroyInstance();
	public static native @Cast("const char*") BytePointer GetCD();
	public static native @Cast("const char*") BytePointer GetHD();
	public static native MxOmni GetInstance();
	public static native @Cast("MxBool") boolean IsSound3D();
	public static native void SetCD(@Cast("const char*") BytePointer p_cd);
	public static native void SetCD(String p_cd);
	public static native void SetHD(@Cast("const char*") BytePointer p_hd);
	public static native void SetHD(String p_hd);
	public static native void SetSound3D(@Cast("MxBool") boolean p_use3dSound);
	// FIXME
//	public static native @ByRef vector<MxString> GetHDFiles();
//	public static native @ByRef vector<MxString> GetCDFiles();

	public MxOmni() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param);                                                 // vtable+0x04
	public native void Init();                                                                      // vtable+0x14
	public native @Cast("MxResult") int Create(@ByRef MxOmniCreateParam p_param);                                      // vtable+0x18
	public native void Destroy();                                                                   // vtable+0x1c
	public native @Cast("MxResult") int Start(MxDSAction p_dsAction);                                           // vtable+0x20
	public native void DeleteObject(@ByRef MxDSAction p_dsAction);                                        // vtable+0x24
	public native @Cast("MxBool") boolean DoesEntityExist(@ByRef MxDSAction p_dsAction);                                   // vtable+0x28
	public native @Cast("MxResult") int CreatePresenter(MxStreamController p_controller, @ByRef MxDSAction p_action); // vtable+0x2c
	public native MxEntity AddToWorld(@Cast("const char*") BytePointer arg0, @Cast("MxS32") int arg1, MxPresenter arg2);
	public native MxEntity AddToWorld(String arg0, @Cast("MxS32") int arg1, MxPresenter arg2);                           // vtable+0x30
	public native void NotifyCurrentEntity(@Const @ByRef MxNotificationParam p_param);                     // vtable+0x34
	public native void Pause();                                                                     // vtable+0x38
	public native void Resume();                                                                    // vtable+0x3c

	// FUNCTION: LEGO1 0x10058a90
	public native @Cast("MxBool") boolean IsPaused(); // vtable+0x40

	public static native void SetInstance(MxOmni p_instance);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, @Cast("const char*") BytePointer p_name);
	public static native @Cast("MxBool") boolean ActionSourceEquals(MxDSAction p_action, String p_name);

	public native HWND__ GetWindowHandle();

	// FUNCTION: BETA10 0x10125100
	public native MxObjectFactory GetObjectFactory();

	// FUNCTION: BETA10 0x10125120
	public native MxNotificationManager GetNotificationManager();

	// FUNCTION: BETA10 0x10125140
	public native MxTickleManager GetTickleManager();

	// FUNCTION: BETA10 0x10125160
	public native MxTimer GetTimer();

	// FUNCTION: BETA10 0x101251a0
	public native MxStreamer GetStreamer();

	// FUNCTION: BETA10 0x100e5250
	public native MxSoundManager GetSoundManager();

	// FUNCTION: BETA10 0x1009e860
	public native MxVideoManager GetVideoManager();

	// FUNCTION: BETA10 0x101251c0
	public native MxVariableTable GetVariableTable();

	// FUNCTION: BETA10 0x10125200
	public native MxEventManager GetEventManager();

	// FUNCTION: BETA10 0x10125180
//	public native MxAtomSet GetAtomSet();

	public native @Cast("MxLong") long HandleEndAction(@ByRef MxParam p_param);
}

// #endif // MXOMNI_H


// Parsed from mxstring.h

// #ifndef MXSTRING_H
// #define MXSTRING_H

// #include "lego1_export.h"
// #include "mxcore.h"

// VTABLE: LEGO1 0x100dc110
// VTABLE: BETA10 0x101c1be0
// SIZE 0x10
@NoOffset public static class MxString extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxString position(long position) {
        return (MxString)super.position(position);
    }
    @Override public MxString getPointer(long i) {
        return new MxString((Pointer)this).offsetAddress(i);
    }

	public MxString() { super((Pointer)null); allocate(); }
	private native void allocate();
	public MxString(@Const @ByRef MxString p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Const @ByRef MxString p_str);
	public MxString(@Cast("const char*") BytePointer p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(@Cast("const char*") BytePointer p_str);
	public MxString(String p_str) { super((Pointer)null); allocate(p_str); }
	private native void allocate(String p_str);
	public MxString(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(@Cast("const char*") BytePointer p_str, @Cast("MxU16") int p_maxlen);
	public MxString(String p_str, @Cast("MxU16") int p_maxlen) { super((Pointer)null); allocate(p_str, p_maxlen); }
	private native void allocate(String p_str, @Cast("MxU16") int p_maxlen);

	public native void Reverse();
	public native void ToUpperCase();
	public native void ToLowerCase();
	public native void MapPathToFilesystem();

	public native @ByRef @Name("operator =") MxString put(@Const @ByRef MxString p_str);
	public native @Const @ByRef @Name("operator =") MxString put(@Cast("const char*") BytePointer p_str);
	public native @Const @ByRef @Name("operator =") MxString put(String p_str);
	public native @ByVal @Name("operator +") MxString add(@Const @ByRef MxString p_str);
	public native @ByVal @Name("operator +") MxString add(@Cast("const char*") BytePointer p_str);
	public native @ByVal @Name("operator +") MxString add(String p_str);
	public native @ByRef @Name("operator +=") MxString addPut(@Cast("const char*") BytePointer p_str);
	public native @ByRef @Name("operator +=") MxString addPut(String p_str);

	public static native void CharSwap(@Cast("char*") BytePointer p_a, @Cast("char*") BytePointer p_b);
	public static native void CharSwap(@Cast("char*") ByteBuffer p_a, @Cast("char*") ByteBuffer p_b);
	public static native void CharSwap(@Cast("char*") byte[] p_a, @Cast("char*") byte[] p_b);
	public static native void MapPathToFilesystem(@Cast("char*") BytePointer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") ByteBuffer p_path);
	public static native void MapPathToFilesystem(@Cast("char*") byte[] p_path);

	// FUNCTION: BETA10 0x10017c50
	public native @Cast("char*") BytePointer GetData();

	// FUNCTION: BETA10 0x10067630
	public native @Cast("const MxU16") int GetLength();

	// FUNCTION: BETA10 0x100d8a30
	public native @Cast("MxBool") boolean Equal(@Const @ByRef MxString p_str);

	// FUNCTION: BETA10 0x1012a810
	public native @Cast("MxS8") char Compare(@Const @ByRef MxString p_str);
}

// #endif // MXSTRING_H


// Parsed from mxstreamer.h

// #ifndef MXSTREAMER_H
// #define MXSTREAMER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxcore.h"
// #include "mxmemorypool.h"
// #include "mxnotificationparam.h"
// #include "mxstl/stlcompat.h"
// #include "mxstreamcontroller.h"
// #include "mxtypes.h"

// #include <assert.h>

@Opaque public static class MxDSObject extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSObject() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSObject(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc760
// VTABLE: BETA10 0x101c23c8
// SIZE 0x10
@NoOffset public static class MxStreamerNotification extends MxNotificationParam {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamerNotification(Pointer p) { super(p); }

	// FUNCTION: BETA10 0x10146e40
//	public MxStreamerNotification(@ByVal NotificationId p_type, MxCore p_sender, MxStreamController p_ctrlr) { super((Pointer)null); allocate(p_type, p_sender, p_ctrlr); }
//	private native void allocate(@ByVal NotificationId p_type, MxCore p_sender, MxStreamController p_ctrlr);

	public native MxNotificationParam Clone();

	// FUNCTION: BETA10 0x10147190
	public native MxStreamController GetController();
}

// VTABLE: LEGO1 0x100dc710
// VTABLE: BETA10 0x101c2378
// SIZE 0x2c
@NoOffset public static class MxStreamer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxStreamer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxStreamer position(long position) {
        return (MxStreamer)super.position(position);
    }
    @Override public MxStreamer getPointer(long i) {
        return new MxStreamer((Pointer)this).offsetAddress(i);
    }

	/** enum MxStreamer::OpenMode */
	public static final int
		e_diskStream = 0,
		e_RAMStream = 1;

	public MxStreamer() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native MxStreamController Open(@Cast("const char*") BytePointer p_name, @Cast("MxU16") int p_openMode);
	public native MxStreamController Open(String p_name, @Cast("MxU16") int p_openMode);
	public native @Cast("MxLong") long Close(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxLong") long Close(String p_name);

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: LEGO1 0x100b9000
	// FUNCTION: BETA10 0x10145ee0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100b9010
	// FUNCTION: BETA10 0x10145f00
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int Create(); // vtable+0x14

	public native @Cast("MxBool") boolean FUN_100b9b30(@ByRef MxDSObject p_dsObject);
	public native MxStreamController GetOpenStream(@Cast("const char*") BytePointer p_name);
	public native MxStreamController GetOpenStream(String p_name);
	public native void FUN_100b98f0(MxDSAction p_action);
	public native @Cast("MxResult") int AddStreamControllerToOpenList(MxStreamController p_stream);
	public native @Cast("MxResult") int FUN_100b99b0(MxDSAction p_action);
	public native @Cast("MxResult") int DeleteObject(MxDSAction p_dsAction);

	// FUNCTION: BETA10 0x10158db0
	public native @Cast("MxU8*") short GetMemoryBlock(@Cast("MxU32") long p_blockSize);

	// FUNCTION: BETA10 0x10158570
	public native void ReleaseMemoryBlock(@Cast("MxU8*") short p_block, @Cast("MxU32") long p_blockSize);
}

// clang-format off
// TEMPLATE: LEGO1 0x100b9090
// TEMPLATE: BETA10 0x10146020
// list<MxStreamController *,allocator<MxStreamController *> >::~list<MxStreamController *,allocator<MxStreamController *> >
// clang-format on

// TEMPLATE: BETA10 0x10146090
// list<MxStreamController *,allocator<MxStreamController *> >::begin

// TEMPLATE: BETA10 0x10146120
// list<MxStreamController *,allocator<MxStreamController *> >::end

// TEMPLATE: BETA10 0x101461b0
// ??Eiterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@QAE?AV01@H@Z

// SYNTHETIC: LEGO1 0x100b9120
// SYNTHETIC: BETA10 0x101466e0
// MxStreamer::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b9140
// TEMPLATE: BETA10 0x10146720
// List<MxStreamController *>::~List<MxStreamController *>

// TEMPLATE: BETA10 0x10146ab0
// list<MxStreamController *,allocator<MxStreamController *> >::iterator::operator*

// SYNTHETIC: LEGO1 0x100b97b0
// SYNTHETIC: BETA10 0x10146f80
// MxStreamerNotification::`scalar deleting destructor'

// SYNTHETIC: LEGO1 0x100b9820
// SYNTHETIC: BETA10 0x10146fc0
// MxStreamerNotification::~MxStreamerNotification

// TEMPLATE: BETA10 0x10147020
// list<MxStreamController *,allocator<MxStreamController *> >::iterator::operator==

// TEMPLATE: BETA10 0x10147060
// list<MxStreamController *,allocator<MxStreamController *> >::push_back

// TEMPLATE: BETA10 0x10147200
// ??9@YAHABViterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@0@Z

// clang-format off
// TEMPLATE: BETA10 0x10147230
// ?find@@YA?AViterator@?$list@PAVMxStreamController@@V?$allocator@PAVMxStreamController@@@@@@V12@0ABQAVMxStreamController@@@Z
// clang-format on

// #endif // MXSTREAMER_H


// Parsed from mxtimer.h

// #ifndef MXTIMER_H
// #define MXTIMER_H

// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>

// VTABLE: LEGO1 0x100dc0e0
// VTABLE: BETA10 0x101c1bb0
// SIZE 0x10
@NoOffset public static class MxTimer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTimer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTimer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTimer position(long position) {
        return (MxTimer)super.position(position);
    }
    @Override public MxTimer getPointer(long i) {
        return new MxTimer((Pointer)this).offsetAddress(i);
    }

	public MxTimer() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void Start();
	public native void Stop();

	public native @Cast("MxLong") long GetRealTime();

	// FUNCTION: BETA10 0x1012bf50
	public native void InitLastTimeCalculated();

	// FUNCTION: BETA10 0x10017810
	public native @Cast("MxLong") long GetTime();
}

// SYNTHETIC: BETA10 0x1012bfc0
// MxTimer::~MxTimer

// #endif // MXTIMER_H


// Parsed from mxtransitionmanager.h

// #ifndef MXTRANSITIONMANAGER_H
// #define MXTRANSITIONMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "mxcore.h"

// #include <SDL3/SDL_stdinc.h>
// #ifdef MINIWIN
// #include "miniwin/ddraw.h"
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxVideoPresenter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxVideoPresenter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoPresenter(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d7ea0
// VTABLE: BETA10 0x101bf670
// SIZE 0x900
@NoOffset public static class MxTransitionManager extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxTransitionManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxTransitionManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxTransitionManager position(long position) {
        return (MxTransitionManager)super.position(position);
    }
    @Override public MxTransitionManager getPointer(long i) {
        return new MxTransitionManager((Pointer)this).offsetAddress(i);
    }

	public MxTransitionManager() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native void SetWaitIndicator(MxVideoPresenter p_waitIndicator);

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1004b950
	// FUNCTION: BETA10 0x100ed8e0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1004b960
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int GetDDrawSurfaceFromVideoManager(); // vtable+0x14

	/** enum MxTransitionManager::TransitionType */
	public static final int
		e_idle = 0, // name verified by BETA10 0x100ec4e6
		e_noAnimation = 1,
		e_dissolve = 2,
		e_mosaic = 3,
		e_wipeDown = 4,
		e_windows = 5,
		e_broken = 6; // Unknown what this is supposed to be, it locks the game up

	public native @Cast("MxResult") int StartTransition(@Cast("MxTransitionManager::TransitionType") int p_animationType, @Cast("MxS32") int p_speed, @Cast("MxBool") boolean p_doCopy, @Cast("MxBool") boolean p_playMusicInAnim);

	public native @Cast("MxTransitionManager::TransitionType") int GetTransitionType();

	public static native void configureMxTransitionManager(@Cast("MxTransitionManager::TransitionType") int p_transitionManagerConfig);
}

// #endif // MXTRANSITIONMANAGER_H


// Parsed from mxutilities.h

// #ifndef MXUTILITIES_H
// #define MXUTILITIES_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// #include <SDL3/SDL_stdinc.h>
// #include <string.h>

public static class LegoSdlEvents extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LegoSdlEvents() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoSdlEvents(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoSdlEvents(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LegoSdlEvents position(long position) {
        return (LegoSdlEvents)super.position(position);
    }
    @Override public LegoSdlEvents getPointer(long i) {
        return new LegoSdlEvents((Pointer)this).offsetAddress(i);
    }

	public native @Cast("Uint32") long m_windowsMessage(); public native LegoSdlEvents m_windowsMessage(long setter);
	public native @Cast("Uint32") long m_presenterProgress(); public native LegoSdlEvents m_presenterProgress(long setter);
	public native @Cast("Uint32") long m_hitActor(); public native LegoSdlEvents m_hitActor(long setter);
}

public static native @ByRef LegoSdlEvents g_legoSdlEvents(); public static native void g_legoSdlEvents(LegoSdlEvents setter);
@Opaque public static class MxCompositePresenterList extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxCompositePresenterList() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCompositePresenterList(Pointer p) { super(p); }
}

public static native @Cast("MxBool") boolean GetRectIntersection(
	@Cast("MxS32") int p_rect1Width,
	@Cast("MxS32") int p_rect1Height,
	@Cast("MxS32") int p_rect2Width,
	@Cast("MxS32") int p_rect2Height,
	@Cast("MxS32*") int p_rect1Left,
	@Cast("MxS32*") int p_rect1Top,
	@Cast("MxS32*") int p_rect2Left,
	@Cast("MxS32*") int p_rect2Top,
	@Cast("MxS32*") int p_width,
	@Cast("MxS32*") int p_height
);

public static native void MakeSourceName(@Cast("char*") BytePointer arg0, @Cast("const char*") BytePointer arg1);
public static native void MakeSourceName(@Cast("char*") ByteBuffer arg0, String arg1);
public static native void MakeSourceName(@Cast("char*") byte[] arg0, @Cast("const char*") BytePointer arg1);
public static native void MakeSourceName(@Cast("char*") BytePointer arg0, String arg1);
public static native void MakeSourceName(@Cast("char*") ByteBuffer arg0, @Cast("const char*") BytePointer arg1);
public static native void MakeSourceName(@Cast("char*") byte[] arg0, String arg1);
public static native void OmniError(@Cast("const char*") BytePointer p_message, @Cast("MxS32") int p_status);
public static native void OmniError(String p_message, @Cast("MxS32") int p_status);
public static class P_omniUserMessage_BytePointer_int extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    P_omniUserMessage_BytePointer_int(Pointer p) { super(p); }
    protected P_omniUserMessage_BytePointer_int() { allocate(); }
    private native void allocate();
    public native void call(@Cast("const char*") BytePointer arg0, @Cast("MxS32") int arg1);
}
public static native void SetOmniUserMessage(P_omniUserMessage_BytePointer_int p_omniUserMessage);
public static class P_omniUserMessage_String_int extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    P_omniUserMessage_String_int(Pointer p) { super(p); }
    protected P_omniUserMessage_String_int() { allocate(); }
    private native void allocate();
    public native void call(String arg0, @Cast("MxS32") int arg1);
}
public static native void SetOmniUserMessage(P_omniUserMessage_String_int p_omniUserMessage);
public static native @Cast("MxBool") boolean ContainsPresenter(@ByRef MxCompositePresenterList p_presenterList, MxPresenter p_presenter);
public static native void ApplyMask(MxDSAction p_action, @Cast("MxU32") long p_mask, @Cast("MxBool") boolean p_setFlags);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") BytePointer arg0, @Cast("const char*") BytePointer arg1, @Cast("const char*") BytePointer arg2);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") ByteBuffer arg0, String arg1, String arg2);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") byte[] arg0, @Cast("const char*") BytePointer arg1, @Cast("const char*") BytePointer arg2);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") BytePointer arg0, String arg1, String arg2);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") ByteBuffer arg0, @Cast("const char*") BytePointer arg1, @Cast("const char*") BytePointer arg2);
public static native @Cast("MxBool") boolean KeyValueStringParse(@Cast("char*") byte[] arg0, String arg1, String arg2);

// TEMPLATE: BETA10 0x1012dfd0
// ?Max@@YAHHH@Z

// TEMPLATE: BETA10 0x1012dff0
// ?Min@@YAHHH@Z

// #endif // MXUTILITIES_H


// Parsed from mxvideoparam.h

// #ifndef MXVIDEOPARAM_H
// #define MXVIDEOPARAM_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "mxgeometry.h"
// #include "mxtypes.h"
// #include "mxvideoparamflags.h"

// #ifdef MINIWIN
// #include "miniwin/ddraw.h"
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxPalette extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxPalette() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPalette(Pointer p) { super(p); }
}

// SIZE 0x24
@NoOffset public static class MxVideoParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParam position(long position) {
        return (MxVideoParam)super.position(position);
    }
    @Override public MxVideoParam getPointer(long i) {
        return new MxVideoParam((Pointer)this).offsetAddress(i);
    }

	public MxVideoParam() { super((Pointer)null); allocate(); }
	private native void allocate();
//	public MxVideoParam(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		) { super((Pointer)null); allocate(p_rect, p_palette, p_backBuffers, p_flags); }
//	private native void allocate(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		);
	public MxVideoParam(@ByRef MxVideoParam p_videoParam) { super((Pointer)null); allocate(p_videoParam); }
	private native void allocate(@ByRef MxVideoParam p_videoParam);
	public native void SetDeviceName(@Cast("char*") BytePointer p_deviceId);
	public native void SetDeviceName(@Cast("char*") ByteBuffer p_deviceId);
	public native void SetDeviceName(@Cast("char*") byte[] p_deviceId);
	public native @ByRef @Name("operator =") MxVideoParam put(@Const @ByRef MxVideoParam p_videoParam);

	// FUNCTION: BETA10 0x100886e0
	public native @ByRef MxVideoParamFlags Flags();

	// FUNCTION: BETA10 0x100d81f0
//	public native @ByRef MxRect32 GetRect();

	// FUNCTION: BETA10 0x100d8210
	public native MxPalette GetPalette();

	// FUNCTION: BETA10 0x100d8240
	public native void SetPalette(MxPalette p_palette);

	// FUNCTION: BETA10 0x100d8270
	public native @Cast("char*") BytePointer GetDeviceName();

	// FUNCTION: BETA10 0x10141f60
	public native @Cast("MxU32") long GetBackBuffers();

	// FUNCTION: BETA10 0x10141fe0
	public native void SetBackBuffers(@Cast("MxU32") long p_backBuffers);
}

// #endif // MXVIDEOPARAM_H


// Parsed from mxvideoparamflags.h

// #ifndef MXVIDEOPARAMFLAGS_H
// #define MXVIDEOPARAMFLAGS_H

// #include "lego1_export.h"
// #include "mxtypes.h"

// #ifdef MINIWIN
// #include "miniwin/windows.h"
// #else
// #include <windows.h>
// #endif

@NoOffset public static class MxVideoParamFlags extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParamFlags(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParamFlags(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParamFlags position(long position) {
        return (MxVideoParamFlags)super.position(position);
    }
    @Override public MxVideoParamFlags getPointer(long i) {
        return new MxVideoParamFlags((Pointer)this).offsetAddress(i);
    }

	public MxVideoParamFlags() { super((Pointer)null); allocate(); }
	private native void allocate();

	// inlined in ISLE
	public native void SetFullScreen(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141f80
	public native void SetFlipSurfaces(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x10141fb0
	public native void SetBackBuffers(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d9250
	public native void SetF1bit3(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void Set16Bit(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetWideViewAngle(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF1bit7(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x100d81b0
	public native void SetLacksLightSupport(@Cast("MxBool") boolean p_e);

	// inlined in ISLE
	public native void SetF2bit1(@Cast("MxBool") boolean p_e);

	// FUNCTION: BETA10 0x1009e770
	public native @Cast("MxBool") boolean GetFullScreen();

	// FUNCTION: BETA10 0x100d80f0
	public native @Cast("MxBool") boolean GetFlipSurfaces();

	// FUNCTION: BETA10 0x100d8120
	public native @Cast("MxBool") boolean GetBackBuffers();

	// FUNCTION: BETA10 0x10142010
	public native @Cast("MxBool") boolean GetF1bit3();

	// FUNCTION: BETA10 0x100d8150
	public native @Cast("MxBool") boolean Get16Bit();

	// FUNCTION: BETA10 0x100d8180
	public native @Cast("MxBool") boolean GetWideViewAngle();

	// FUNCTION: BETA10 0x100886b0
	public native @Cast("MxBool") boolean GetLacksLightSupport();

	// FUNCTION: BETA10 0x10142050
	public native @Cast("MxBool") boolean GetF2bit1();
}

// #endif // MXVIDEOPARAMFLAGS_H


// Parsed from realtimeview.h

// #ifndef REALTIMEVIEW_H
// #define REALTIMEVIEW_H

// #include "lego1_export.h"

public static native float g_userMaxLodPower(); public static native void g_userMaxLodPower(float setter);

public static class RealtimeView extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RealtimeView(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RealtimeView(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RealtimeView position(long position) {
        return (RealtimeView)super.position(position);
    }
    @Override public RealtimeView getPointer(long i) {
        return new RealtimeView((Pointer)this).offsetAddress(i);
    }

	public RealtimeView() { super((Pointer)null); allocate(); }
	private native void allocate();

	public static native float GetPartsThreshold();
	public static native float GetUserMaxLOD();
	public static native void SetPartsThreshold(float arg0);
	public static native void UpdateMaxLOD();
	public static native void SetUserMaxLOD(float arg0);

	public static native float GetUserMaxLodPower();
}

// #endif // REALTIMEVIEW_H


// Parsed from viewmanager.h

// #ifndef VIEWMANAGER_H
// #define VIEWMANAGER_H

// #include "decomp.h"
// #include "lego1_export.h"
// #include "realtime/realtimeview.h"
// #include "viewroi.h"

// #ifdef MINIWIN
// #include "miniwin/d3drm.h"
// #else
// #include <d3drm.h>
// #endif

// VTABLE: LEGO1 0x100dbd88
// SIZE 0x1bc
@NoOffset public static class ViewManager extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewManager(Pointer p) { super(p); }

	/** enum ViewManager::Flags */
	public static final int
		c_bit1 = 0x01,
		c_bit2 = 0x02,
		c_bit3 = 0x04,
		c_bit4 = 0x08;

//	public ViewManager(Renderer pRenderer, Group scene, @Const OrientableROI point_of_view) { super((Pointer)null); allocate(pRenderer, scene, point_of_view); }
//	private native void allocate(Renderer pRenderer, Group scene, @Const OrientableROI point_of_view);

	public native void Remove(ViewROI p_roi);
	public native void RemoveAll(ViewROI p_roi);
//	public native @Cast("unsigned int") int IsBoundingBoxInFrustum(@Const @ByRef BoundingBox p_bounding_box);
	public native void UpdateROIDetailBasedOnLOD(ViewROI p_roi, int p_lodLevel);
	public native void RemoveROIDetailFromScene(ViewROI p_roi);
//	public native void SetPOVSource(@Const OrientableROI point_of_view);
//	public native float ProjectedSize(@Const @ByRef BoundingSphere p_bounding_sphere);
//	public native ViewROI Pick(View p_view, int x, int y);
	public native void SetResolution(int width, int height);
	public native void SetFrustrum(float fov, float front, float back);
	public native void ManageVisibilityAndDetailRecursively(ViewROI p_from, int p_lodLevel);
	public native void Update(float p_previousRenderTime, float arg1);
	public native int CalculateFrustumTransformations();
	public native void UpdateViewTransformations();

	public static native int CalculateLODLevel(float p_maximumScale, float p_initalScale, ViewROI from);
	public static native int GetFirstLODIndex(ViewROI p_roi);

	// FUNCTION: BETA10 0x100576b0
//	public native @Const @ByRef CompoundObject GetROIs();

	// FUNCTION: BETA10 0x100e1260
	public native void Add(ViewROI p_roi);
}

// TEMPLATE: LEGO1 0x10022030
// list<ROI *,allocator<ROI *> >::insert

// TEMPLATE: LEGO1 0x100a6020
// List<ROI *>::~List<ROI *>

// TEMPLATE: LEGO1 0x100a6070
// Vector<ROI const *>::~Vector<ROI const *>

// TEMPLATE: LEGO1 0x100a6f80
// vector<ROI const *,allocator<ROI const *> >::~vector<ROI const *,allocator<ROI const *> >

// #endif // VIEWMANAGER_H


// Parsed from mxvariable.h

// #ifndef MXVARIABLE_H
// #define MXVARIABLE_H

// #include "mxcore.h"
// #include "mxstring.h"

// VTABLE: LEGO1 0x100d7498
// VTABLE: BETA10 0x101bc038
// SIZE 0x24
@NoOffset public static class MxVariable extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVariable(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVariable(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVariable position(long position) {
        return (MxVariable)super.position(position);
    }
    @Override public MxVariable getPointer(long i) {
        return new MxVariable((Pointer)this).offsetAddress(i);
    }

	public MxVariable() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: BETA10 0x1012a840
	public MxVariable(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(@Cast("const char*") BytePointer p_key, @Cast("const char*") BytePointer p_value);
	public MxVariable(String p_key, String p_value) { super((Pointer)null); allocate(p_key, p_value); }
	private native void allocate(String p_key, String p_value);

	// FUNCTION: BETA10 0x1012aa30
	public MxVariable(@Cast("const char*") BytePointer p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(@Cast("const char*") BytePointer p_key);
	public MxVariable(String p_key) { super((Pointer)null); allocate(p_key); }
	private native void allocate(String p_key);

	// FUNCTION: LEGO1 0x1003bea0
	// FUNCTION: BETA10 0x1007b810
	public native MxString GetValue(); // vtable+0x00

	// FUNCTION: LEGO1 0x1003beb0
	// FUNCTION: BETA10 0x1007b840
	public native void SetValue(@Cast("const char*") BytePointer p_value);
	public native void SetValue(String p_value); // vtable+0x04

	// FUNCTION: LEGO1 0x1003bec0
	// FUNCTION: BETA10 0x1007b870
	public native void Destroy(); // vtable+0x08

	// FUNCTION: BETA10 0x1012a7f0
	public native @Const MxString GetKey();
}

// SYNTHETIC: LEGO1 0x1003bf40
// MxVariable::~MxVariable

// #endif // MXVARIABLE_H


// Parsed from mxdssource.h

// #ifndef MXDSSOURCE_H
// #define MXDSSOURCE_H

// #include "mxcore.h"
// #include "mxdsbuffer.h"

// #include <SDL3/SDL_iostream.h>

// VTABLE: LEGO1 0x100dc8c8
// VTABLE: BETA10 0x101c2450
// SIZE 0x14
@NoOffset public static class MxDSSource extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSSource(Pointer p) { super(p); }


	// FUNCTION: LEGO1 0x100bff60

	// FUNCTION: LEGO1 0x100c0010
	// FUNCTION: BETA10 0x10148cc0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100c0020
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxLong") long Open(@Cast("MxULong") long arg0); // vtable+0x14
	public native @Cast("MxLong") long Close();       // vtable+0x18

	// FUNCTION: LEGO1 0x100bffd0
	public native @Cast("MxResult") int ReadToBuffer(MxDSBuffer p_buffer); // vtable+0x1c

	public native @Cast("MxResult") int Read(@Cast("unsigned char*") BytePointer arg0, @Cast("MxULong") long arg1);
	public native @Cast("MxResult") int Read(@Cast("unsigned char*") ByteBuffer arg0, @Cast("MxULong") long arg1);
	public native @Cast("MxResult") int Read(@Cast("unsigned char*") byte[] arg0, @Cast("MxULong") long arg1); // vtable+0x20
//	public native @Cast("MxLong") long Seek(@Cast("MxLong") long arg0, @ByVal SDL_IOWhence arg1);      // vtable+0x24
	public native @Cast("MxULong") long GetBufferSize();                // vtable+0x28
	public native @Cast("MxULong") long GetStreamBuffersNum();          // vtable+0x2c

	// FUNCTION: LEGO1 0x100bfff0
	public native @Cast("MxLong") long GetLengthInDWords(); // vtable+0x30

	// FUNCTION: LEGO1 0x100c0000
	public native @Cast("MxU32*") long GetBuffer(); // vtable+0x34

	public native @Cast("MxLong") long GetPosition();
}

// SYNTHETIC: LEGO1 0x100c00a0
// MxDSSource::`scalar deleting destructor'

// #endif // MXDSSOURCE_H


// Parsed from mxdsbuffer.h

// #ifndef MXDSBUFFER_H
// #define MXDSBUFFER_H

// #include "decomp.h"
// #include "mxcore.h"
@Opaque public static class MxDSStreamingAction extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSStreamingAction() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSStreamingAction(Pointer p) { super(p); }
}
@Opaque public static class MxStreamChunk extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxStreamChunk() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxStreamChunk(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dcca0
// VTABLE: BETA10 0x101c2898
// SIZE 0x34
@NoOffset public static class MxDSBuffer extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSBuffer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxDSBuffer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxDSBuffer position(long position) {
        return (MxDSBuffer)super.position(position);
    }
    @Override public MxDSBuffer getPointer(long i) {
        return new MxDSBuffer((Pointer)this).offsetAddress(i);
    }

	/** enum MxDSBuffer::Type */
	public static final int
		e_chunk = 0,
		e_allocate = 1,
		e_preallocated = 2,
		e_unknown = 3;

	public MxDSBuffer() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x100c6500
	// FUNCTION: BETA10 0x10158510
	public native @Cast("const char*") BytePointer ClassName();

	public native @Cast("MxResult") int AllocateBuffer(@Cast("MxU32") long p_bufferSize, @Cast("MxDSBuffer::Type") int p_mode);
	public native @Cast("MxResult") int SetBufferPointer(@Cast("MxU8*") short p_buffer, @Cast("MxU32") long p_size);
	public native @Cast("MxResult") int FUN_100c67b0(
			MxStreamController p_controller,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction
		);
	public native @Cast("MxResult") int FUN_100c67b0(
			MxStreamController p_controller,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction
		);
	public native @Cast("MxResult") int CreateObject(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction
		);
	public native @Cast("MxResult") int CreateObject(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction
		);
	public native @Cast("MxResult") int StartPresenterFromAction(MxStreamController p_controller, MxDSAction p_action1, MxDSAction p_action2);
	public native @Cast("MxResult") int ParseChunk(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@Cast("MxDSStreamingAction**") PointerPointer p_streamingAction,
			MxStreamChunk p_header
		);
	public native @Cast("MxResult") int ParseChunk(
			MxStreamController p_controller,
			@Cast("MxU32*") long p_data,
			MxDSAction p_action,
			@ByPtrPtr MxDSStreamingAction p_streamingAction,
			MxStreamChunk p_header
		);
	public native @Cast("MxU8*") short SkipToData();
	public native @Cast("MxU8") short ReleaseRef(MxDSChunk arg0);
	public native void AddRef(MxDSChunk p_chunk);
	public native @Cast("MxResult") int CalcBytesRemaining(@Cast("MxU8*") short p_data);
	public native void FUN_100c6f80(@Cast("MxU32") long p_writeOffset);
	public native @Cast("MxU8*") short FUN_100c6fa0(@Cast("MxU8*") short p_data);
	public native @Cast("MxResult") int FUN_100c7090(MxDSBuffer p_buf);

	public static native MxCore ReadChunk(MxDSBuffer p_buffer, @Cast("MxU32*") long p_chunkData, @Cast("MxU16") int p_flags);
	public static native @Cast("MxResult") int Append(@Cast("MxU8*") short p_buffer1, @Cast("MxU8*") short p_buffer2);

	// FUNCTION: BETA10 0x10148c60
	public native @Cast("MxU8*") short GetBuffer();

	// FUNCTION: BETA10 0x10164240
	public native @Cast("undefined4") long GetUnknown14();

	// FUNCTION: BETA10 0x10156420
	public native @Cast("MxBool") boolean HasRef();

	public native @Cast("MxU16") int GetRefCount();
	public native @Cast("MxDSBuffer::Type") int GetMode();

	// FUNCTION: BETA10 0x10148c40
	public native @Cast("MxU32") long GetWriteOffset();

	// FUNCTION: BETA10 0x101590d0
	public native @Cast("MxU32") long GetBytesRemaining();

	public native void SetUnknown14(@Cast("undefined4") long p_unk0x14);
	public native void SetUnknown1c(@Cast("undefined4") long p_unk0x1c);

	// FUNCTION: BETA10 0x10164260
	public native void SetMode(@Cast("MxDSBuffer::Type") int p_mode);

	public native void SetUnk30(MxDSStreamingAction p_unk0x30);
}

// #endif // MXDSBUFFER_H


// Parsed from mxmediapresenter.h

// #ifndef MXMEDIAPRESENTER_H
// #define MXMEDIAPRESENTER_H

// #include "decomp.h"
// #include "mxpresenter.h"
// #include "mxstreamchunklist.h"

@Opaque public static class MxDSSubscriber extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxDSSubscriber() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxDSSubscriber(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d4cd8
// SIZE 0x50
@NoOffset public static class MxMediaPresenter extends MxPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxMediaPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxMediaPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxMediaPresenter position(long position) {
        return (MxMediaPresenter)super.position(position);
    }
    @Override public MxMediaPresenter getPointer(long i) {
        return new MxMediaPresenter((Pointer)this).offsetAddress(i);
    }

	public MxMediaPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	// FUNCTION: LEGO1 0x1000c550

	// FUNCTION: LEGO1 0x1000c5b0
	public native void Destroy(); // vtable+0x38

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: BETA10 0x10054f50
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000c5c0
	// FUNCTION: BETA10 0x10054f20
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000c5d0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void StreamingTickle(); // vtable+0x20
	public native void RepeatingTickle(); // vtable+0x24
	public native void DoneTickle();      // vtable+0x2c

	public native @Cast("MxResult") int StartAction(MxStreamController arg0, MxDSAction arg1); // vtable+0x3c
	public native void EndAction();                                       // vtable+0x40
	public native void Enable(@Cast("MxBool") boolean p_enable);                           // vtable+0x54
	public native void LoopChunk(MxStreamChunk p_chunk);                  // vtable+0x58

	public native MxStreamChunk CurrentChunk();
	public native MxStreamChunk NextChunk();
}

// SYNTHETIC: LEGO1 0x100b46e0
// MxStreamChunkListCursor::`scalar deleting destructor'

// TEMPLATE: LEGO1 0x100b4750
// MxListCursor<MxStreamChunk *>::~MxListCursor<MxStreamChunk *>

// SYNTHETIC: LEGO1 0x100b47a0
// MxListCursor<MxStreamChunk *>::`scalar deleting destructor'

// FUNCTION: LEGO1 0x100b4810
// MxStreamChunkListCursor::~MxStreamChunkListCursor

// #endif // MXMEDIAPRESENTER_H


// Parsed from mxpresenter.h

// #ifndef MXPRESENTER_H
// #define MXPRESENTER_H

// #include "decomp.h"
// #include "mxcore.h"
// #include "mxcriticalsection.h"
// #include "mxgeometry.h"
// #include "mxutilities.h"

// #include <SDL3/SDL_events.h>

// VTABLE: LEGO1 0x100d4d38
// SIZE 0x40
@NoOffset public static class MxPresenter extends MxCore {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxPresenter position(long position) {
        return (MxPresenter)super.position(position);
    }
    @Override public MxPresenter getPointer(long i) {
        return new MxPresenter((Pointer)this).offsetAddress(i);
    }

	/** enum MxPresenter::TickleState */
	public static final int
		e_idle = 0,
		e_ready = 1,
		e_starting = 2,
		e_streaming = 3,
		e_repeating = 4,
		e_freezing = 5,
		e_done = 6;

	public MxPresenter() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("MxResult") int Tickle(); // vtable+0x08

	// FUNCTION: LEGO1 0x1000be30
	public native void VTable0x14(); // vtable+0x14

	// FUNCTION: LEGO1 0x1000be40
	public native void ReadyTickle(); // vtable+0x18

	// FUNCTION: LEGO1 0x1000be60
	public native void StartingTickle(); // vtable+0x1c

	// FUNCTION: LEGO1 0x1000be80
	public native void StreamingTickle(); // vtable+0x20

	// FUNCTION: LEGO1 0x1000bea0
	public native void RepeatingTickle(); // vtable+0x24

	// FUNCTION: LEGO1 0x1000bec0
	public native void FreezingTickle();
	// FUNCTION: LEGO1 0x1000bf00 // vtable+0x00

	// FUNCTION: LEGO1 0x1000bf70
	public native @Cast("MxResult") int AddToManager(); // vtable+0x34

	// FUNCTION: LEGO1 0x1000bf80
	public native void Destroy(); // vtable+0x38

	public native @Cast("MxResult") int StartAction(MxStreamController arg0, MxDSAction arg1); // vtable+0x3c
	public native void EndAction();                                       // vtable+0x40

	// FUNCTION: LEGO1 0x1000bf90
	// FUNCTION: BETA10 0x10054a50
	public native void SetTickleState(@Cast("MxPresenter::TickleState") int p_tickleState); // vtable+0x44

	// FUNCTION: LEGO1 0x1000bfb0
	public native @Cast("MxBool") boolean HasTickleStatePassed(@Cast("MxPresenter::TickleState") int p_tickleState); // vtable+0x48

	// FUNCTION: LEGO1 0x1000bfc0
	public native @Cast("MxResult") int PutData(); // vtable+0x4c

	// FUNCTION: LEGO1 0x1000bfd0
	public native @Cast("MxBool") boolean IsHit(@Cast("MxS32") int p_x, @Cast("MxS32") int p_y); // vtable+0x50

	public native void Enable(@Cast("MxBool") boolean p_enable); // vtable+0x54

	// FUNCTION: BETA10 0x1004d9e0
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x1000bfe0
	// FUNCTION: BETA10 0x1004d9b0
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x1000bff0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native MxEntity CreateEntity(@Cast("const char*") BytePointer p_defaultName);
	public native MxEntity CreateEntity(String p_defaultName);
	public native void SendToCompositePresenter(MxOmni p_omni);
	public native @Cast("MxBool") boolean IsEnabled();

	public native @Cast("MxS32") int GetCurrentTickleState();
//	public native @ByVal MxPoint32 GetLocation();
	public native @Cast("MxS32") int GetX();
	public native @Cast("MxS32") int GetY();

	// FUNCTION: BETA10 0x10031b70
	public native @Cast("MxS32") int GetDisplayZ();

	// FUNCTION: BETA10 0x10028430
	public native MxDSAction GetAction();

	public native void SetAction(MxDSAction p_action);

	public native void SetCompositePresenter(MxCompositePresenter p_compositePresenter);

	// FUNCTION: BETA10 0x10031b40
	public native void SetDisplayZ(@Cast("MxS32") int p_displayZ);
}

public static native @Cast("const char*") BytePointer PresenterNameDispatch(@Const @ByRef MxDSAction arg0);

// #endif // MXPRESENTER_H


// Parsed from legoentitypresenter.h

// #ifndef LEGOENTITYPRESENTER_H
// #define LEGOENTITYPRESENTER_H

// #include "mxcompositepresenter.h"
@Opaque public static class Vector3 extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Vector3() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Vector3(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100d8398
// SIZE 0x50
@NoOffset public static class LegoEntityPresenter extends MxCompositePresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LegoEntityPresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LegoEntityPresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LegoEntityPresenter position(long position) {
        return (LegoEntityPresenter)super.position(position);
    }
    @Override public LegoEntityPresenter getPointer(long i) {
        return new LegoEntityPresenter((Pointer)this).offsetAddress(i);
    }

	public LegoEntityPresenter() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	// FUNCTION: BETA10 0x10080780
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x100534b0
	// FUNCTION: BETA10 0x10080750
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100534c0
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native void ReadyTickle();                                                           // vtable+0x18
	public native void RepeatingTickle();                                                       // vtable+0x24
	public native void ParseExtra();                                                            // vtable+0x30
	public native void Destroy();                                                               // vtable+0x38
	public native @Cast("MxResult") int StartAction(MxStreamController p_controller, MxDSAction p_action); // vtable+0x3c
	public native void Init();                                                                   // vtable+0x68
	public native @Cast("undefined4") long SetEntity(LegoEntity p_entity);                                    // vtable+0x6c

	public native void SetEntityLocation(@Const @ByRef Vector3 p_location, @Const @ByRef Vector3 p_direction, @Const @ByRef Vector3 p_up);

	public native LegoEntity GetInternalEntity();
	public native void SetInternalEntity(LegoEntity p_entity);
}

// #endif // LEGOENTITYPRESENTER_H


// Parsed from mxcompositepresenter.h

// #ifndef MXCOMPOSITEPRESENTER_H
// #define MXCOMPOSITEPRESENTER_H

// #include "mxpresenter.h"
// #include "mxstl/stlcompat.h"

@Opaque public static class MxEndActionNotificationParam extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxEndActionNotificationParam() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxEndActionNotificationParam(Pointer p) { super(p); }
}

// VTABLE: LEGO1 0x100dc618
// SIZE 0x4c
@NoOffset public static class MxCompositePresenter extends MxPresenter {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxCompositePresenter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxCompositePresenter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxCompositePresenter position(long position) {
        return (MxCompositePresenter)super.position(position);
    }
    @Override public MxCompositePresenter getPointer(long i) {
        return new MxCompositePresenter((Pointer)this).offsetAddress(i);
    }

	public MxCompositePresenter() { super((Pointer)null); allocate(); }
	private native void allocate(); // vtable+0x00

	public native @Cast("MxLong") long Notify(@ByRef MxParam p_param); // vtable+0x04

	// FUNCTION: BETA10 0x1004da30
	public static native @Cast("const char*") BytePointer HandlerClassName();

	// FUNCTION: LEGO1 0x100b6210
	// FUNCTION: BETA10 0x1004da00
	public native @Cast("const char*") BytePointer ClassName();

	// FUNCTION: LEGO1 0x100b6220
	public native @Cast("MxBool") boolean IsA(@Cast("const char*") BytePointer p_name);
	public native @Cast("MxBool") boolean IsA(String p_name);

	public native @Cast("MxResult") int StartAction(MxStreamController p_controller, MxDSAction p_action); // vtable+0x3c
	public native void EndAction();                                                             // vtable+0x40
//	public native void SetTickleState(@ByVal TickleState p_tickleState);                               // vtable+0x44
//	public native @Cast("MxBool") boolean HasTickleStatePassed(@ByVal TickleState p_tickleState);                       // vtable+0x48
	public native void Enable(@Cast("MxBool") boolean p_enable);                                                 // vtable+0x54
	public native void VTable0x58(@ByRef MxEndActionNotificationParam p_param);                        // vtable+0x58
	public native void VTable0x5c(@ByRef MxNotificationParam p_param);                                 // vtable+0x5c
	public native void VTable0x60(MxPresenter p_presenter);                                     // vtable+0x60

	// FUNCTION: LEGO1 0x1000caf0
	public native @Cast("MxBool") boolean VTable0x64(@Cast("undefined4") long p_undefined); // vtable+0x64

	public native MxCompositePresenterList GetList();
}

// TEMPLATE: LEGO1 0x1004ae90
// list<MxPresenter *,allocator<MxPresenter *> >::_Buynode

// TEMPLATE: LEGO1 0x100b61a0
// list<MxPresenter *,allocator<MxPresenter *> >::~list<MxPresenter *,allocator<MxPresenter *> >

// SYNTHETIC: LEGO1 0x100b62d0
// MxCompositePresenter::`scalar deleting destructor'

// FUNCTION: LEGO1 0x100b62f0
// MxCompositePresenterList::~MxCompositePresenterList

// TEMPLATE: LEGO1 0x100b6340
// List<MxPresenter *>::~List<MxPresenter *>

// TEMPLATE: LEGO1 0x100b6cd0
// MxList<MxDSAction *>::DeleteEntry

// #endif // MXCOMPOSITEPRESENTER_H


// Parsed from windows.h

// #pragma once

// #include <SDL3/SDL_video.h>
// #include <limits.h>
// #include <stdint.h>
// #include <string.h>

// --- Defines and Macros ---
// #define MAKE_HRESULT(sev, fac, code)
// 	((HRESULT) (((uint32_t) (sev) << 31) | ((uint32_t) (fac) << 16) | ((uint32_t) (code))))

// #define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
// 	const GUID name = {l, w1, w2, {b1, b2, b3, b4, b5, b6, b7, b8}}

// Remove WinAPI stuff
// #define CALLBACK
// #define FAR
// #define WINAPI
public static final int HWND_NOTOPMOST = -2;
// #define RGB(r, g, b) (((BYTE) (r) | ((BYTE) (g) << 8) | ((BYTE) (b) << 16)))
public static final int S_OK = 0;
public static final int E_NOINTERFACE = (0x80004002);
//public static final int VOID = void;

public static final int SWP_NOACTIVATE = 0x0010;
public static final int SWP_NOMOVE = 0x0002;
public static final int SWP_NOSIZE = 0x0004;
public static final int SWP_NOZORDER = 0x0001;

public static final int WM_CLOSE = 0x0010;
public static final int WM_QUIT = 0x0012;
public static final int WM_TIMER = 0x0113;

public static final long WS_CAPTION = 0x00C00000L;
public static final long WS_OVERLAPPED = 0x00000000L;
public static final long WS_POPUP = 0x80000000L;
public static final long WS_THICKFRAME = 0x00040000L;

public static final int GWL_STYLE = (-16);
public static final int GWL_EXSTYLE = -20;

public static final int ANSI_CHARSET = 0;
public static final int BI_RGB = 0;
public static final int CLIP_DEFAULT_PRECIS = 0;
public static final int DEFAULT_QUALITY = 0;
public static final int ETO_OPAQUE = 0x0002;
public static final int RASTERCAPS = 0x00000000;
public static final int RC_PALETTE = 0x0100;
public static final int SIZEPALETTE = 104;
public static final int FW_NORMAL = 400;
public static final int OPAQUE = 2;
public static final int OUT_DEFAULT_PRECIS = 0;
public static final int RDW_FRAME = 0x0400;
public static final int SRCCOPY = 0x00CC0020;
public static final int VARIABLE_PITCH = 2;

// --- Typedefs ---
@Namespace @Name("void") @Opaque public static class LPVOID extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LPVOID() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LPVOID(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class HANDLE extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HANDLE() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HANDLE(Pointer p) { super(p); }
}
@Opaque public static class HICON__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HICON__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HICON__(Pointer p) { super(p); }
}
@Opaque public static class HFONT__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HFONT__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HFONT__(Pointer p) { super(p); }
}
@Opaque public static class HINSTANCE__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HINSTANCE__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HINSTANCE__(Pointer p) { super(p); }
}
@Opaque public static class HMENU__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HMENU__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HMENU__(Pointer p) { super(p); }
}
@Opaque public static class HWND__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HWND__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HWND__(Pointer p) { super(p); }
}
@Opaque public static class HDC__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HDC__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HDC__(Pointer p) { super(p); }
}
@Opaque public static class HPALETTE__ extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public HPALETTE__() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HPALETTE__(Pointer p) { super(p); }
}

// --- Structs ---
public static class tagPOINT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public tagPOINT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tagPOINT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tagPOINT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public tagPOINT position(long position) {
        return (tagPOINT)super.position(position);
    }
    @Override public tagPOINT getPointer(long i) {
        return new tagPOINT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") int x(); public native tagPOINT x(int setter);
	public native @Cast("LONG") int y(); public native tagPOINT y(int setter);
}

public static class SIZE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SIZE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SIZE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SIZE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SIZE position(long position) {
        return (SIZE)super.position(position);
    }
    @Override public SIZE getPointer(long i) {
        return new SIZE((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") int cx(); public native SIZE cx(int setter);
	public native @Cast("LONG") int cy(); public native SIZE cy(int setter);
}

public static class RECT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RECT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RECT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RECT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RECT position(long position) {
        return (RECT)super.position(position);
    }
    @Override public RECT getPointer(long i) {
        return new RECT((Pointer)this).offsetAddress(i);
    }

	public native @Cast("LONG") int left(); public native RECT left(int setter);
	public native @Cast("LONG") int top(); public native RECT top(int setter);
	public native @Cast("LONG") int right(); public native RECT right(int setter);
	public native @Cast("LONG") int bottom(); public native RECT bottom(int setter);
}

public static class BITMAPINFOHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFOHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFOHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFOHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFOHEADER position(long position) {
        return (BITMAPINFOHEADER)super.position(position);
    }
    @Override public BITMAPINFOHEADER getPointer(long i) {
        return new BITMAPINFOHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("DWORD") int biSize(); public native BITMAPINFOHEADER biSize(int setter);
	public native @Cast("LONG") int biWidth(); public native BITMAPINFOHEADER biWidth(int setter);
	public native @Cast("LONG") int biHeight(); public native BITMAPINFOHEADER biHeight(int setter);
	public native @Cast("WORD") short biPlanes(); public native BITMAPINFOHEADER biPlanes(short setter);
	public native @Cast("WORD") short biBitCount(); public native BITMAPINFOHEADER biBitCount(short setter);
	public native @Cast("DWORD") int biCompression(); public native BITMAPINFOHEADER biCompression(int setter);
	public native @Cast("DWORD") int biSizeImage(); public native BITMAPINFOHEADER biSizeImage(int setter);
	public native @Cast("LONG") int biXPelsPerMeter(); public native BITMAPINFOHEADER biXPelsPerMeter(int setter);
	public native @Cast("LONG") int biYPelsPerMeter(); public native BITMAPINFOHEADER biYPelsPerMeter(int setter);
	public native @Cast("DWORD") int biClrUsed(); public native BITMAPINFOHEADER biClrUsed(int setter);
	public native @Cast("DWORD") int biClrImportant(); public native BITMAPINFOHEADER biClrImportant(int setter);
}

public static class RGBQUAD extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RGBQUAD() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RGBQUAD(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RGBQUAD(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RGBQUAD position(long position) {
        return (RGBQUAD)super.position(position);
    }
    @Override public RGBQUAD getPointer(long i) {
        return new RGBQUAD((Pointer)this).offsetAddress(i);
    }

	public native @Cast("BYTE") byte rgbBlue(); public native RGBQUAD rgbBlue(byte setter);
	public native @Cast("BYTE") byte rgbGreen(); public native RGBQUAD rgbGreen(byte setter);
	public native @Cast("BYTE") byte rgbRed(); public native RGBQUAD rgbRed(byte setter);
	public native @Cast("BYTE") byte rgbReserved(); public native RGBQUAD rgbReserved(byte setter);
}

// #pragma pack(push, 1)
public static class BITMAPFILEHEADER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPFILEHEADER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPFILEHEADER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPFILEHEADER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPFILEHEADER position(long position) {
        return (BITMAPFILEHEADER)super.position(position);
    }
    @Override public BITMAPFILEHEADER getPointer(long i) {
        return new BITMAPFILEHEADER((Pointer)this).offsetAddress(i);
    }

	public native @Cast("WORD") short bfType(); public native BITMAPFILEHEADER bfType(short setter);
	public native @Cast("DWORD") int bfSize(); public native BITMAPFILEHEADER bfSize(int setter);
	public native @Cast("WORD") short bfReserved1(); public native BITMAPFILEHEADER bfReserved1(short setter);
	public native @Cast("WORD") short bfReserved2(); public native BITMAPFILEHEADER bfReserved2(short setter);
	public native @Cast("DWORD") int bfOffBits(); public native BITMAPFILEHEADER bfOffBits(int setter);
}
// #pragma pack(pop)

public static class BITMAPINFO extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BITMAPINFO() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BITMAPINFO(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BITMAPINFO(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BITMAPINFO position(long position) {
        return (BITMAPINFO)super.position(position);
    }
    @Override public BITMAPINFO getPointer(long i) {
        return new BITMAPINFO((Pointer)this).offsetAddress(i);
    }

	public native @ByRef BITMAPINFOHEADER bmiHeader(); public native BITMAPINFO bmiHeader(BITMAPINFOHEADER setter);
	public native @ByRef RGBQUAD bmiColors(int i); public native BITMAPINFO bmiColors(int i, RGBQUAD setter);
	@MemberGetter public native RGBQUAD bmiColors();
}

public static class GUID extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GUID() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GUID(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GUID(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GUID position(long position) {
        return (GUID)super.position(position);
    }
    @Override public GUID getPointer(long i) {
        return new GUID((Pointer)this).offsetAddress(i);
    }

	public native @Cast("uint32_t") int m_data1(); public native GUID m_data1(int setter);
	public native @Cast("uint16_t") short m_data2(); public native GUID m_data2(short setter);
	public native @Cast("uint16_t") short m_data3(); public native GUID m_data3(short setter);
	public native @Cast("uint8_t") byte m_data4(int i); public native GUID m_data4(int i, byte setter);
	@MemberGetter public native @Cast("uint8_t*") BytePointer m_data4();
}

@NoOffset public static class IUnknown extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IUnknown(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IUnknown(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public IUnknown position(long position) {
        return (IUnknown)super.position(position);
    }
    @Override public IUnknown getPointer(long i) {
        return new IUnknown((Pointer)this).offsetAddress(i);
    }

	public IUnknown() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("ULONG") int AddRef();
	public native @Cast("ULONG") int Release();
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") PointerPointer ppvObject);
	public native @Cast("HRESULT") long QueryInterface(@Const @ByRef GUID riid, @Cast("void**") @ByPtrPtr Pointer ppvObject);
}

public static native @Cast("BOOL") boolean SetWindowPos(HWND__ hWnd, HWND__ hWndInsertAfter, int X, int Y, int cx, int cy, @Cast("UINT") int uFlags);

public static native HDC__ GetDC(HWND__ hWnd);

public static native int ReleaseDC(HWND__ hWnd, HDC__ hDC);

public static native int GetDeviceCaps(HDC__ hdc, int index);

public static native @Cast("BOOL") boolean RedrawWindow(Pointer hWnd, @Const Pointer lprcUpdate, Pointer hrgnUpdate, @Cast("unsigned int") int flags);

public static native HMENU__ GetMenu(HWND__ hWnd);

public static native int DrawMenuBar(Pointer hWnd);

public static native int StretchDIBits(
	Pointer hdc,
	int xDest,
	int yDest,
	int DestWidth,
	int DestHeight,
	int xSrc,
	int ySrc,
	int SrcWidth,
	int SrcHeight,
	@Const Pointer lpBits,
	@Const Pointer lpbmi,
	@Cast("unsigned int") int iUsage,
	@Cast("uint32_t") int rop
);

public static native @Cast("LONG") int GetWindowLong(HWND__ hWnd, int nIndex);

public static native @Cast("LONG") int SetWindowLong(HWND__ hWnd, int nIndex, @Cast("LONG") int dwNewLong);

public static native int DeleteObject(Pointer arg0);

public static native @Cast("BOOL") boolean AdjustWindowRectEx(@Cast("LPRECT") RECT lpRect, @Cast("DWORD") int dwStyle, @Cast("BOOL") boolean bMenu, @Cast("DWORD") int dwExStyle);

public static native int SetRect(RECT rc, int left, int top, int right, int bottom);

public static native int Sleep(@Cast("DWORD") int dwMilliseconds);

public static native @Cast("BOOL") boolean ClientToScreen(HWND__ hWnd, @Cast("LPPOINT") tagPOINT lpPoint);


// Parsed from viewroi.h

// #ifndef VIEWROI_H
// #define VIEWROI_H

// #include "decomp.h"
// #include "realtime/orientableroi.h"
// #include "tgl/tgl.h"
// #include "viewlodlist.h"

/*
	ViewROI objects represent view objects, collections of view objects,
	etc. Basically, anything which can be placed in a scene and manipilated
	by the view manager is a ViewROI.
*/

// VTABLE: LEGO1 0x100dbe70
// VTABLE: BETA10 0x101c3908
// SIZE 0xe4
@NoOffset public static class ViewROI extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ViewROI(Pointer p) { super(p); }

	/** enum ViewROI:: */
	public static final int
		c_lodLevelUnset = -1,
		c_lodLevelInvisible = -2;

	// FUNCTION: BETA10 0x1018c5e0
//	public ViewROI(Renderer pRenderer, ViewLODList lodList) { super((Pointer)null); allocate(pRenderer, lodList); }
//	private native void allocate(Renderer pRenderer, ViewLODList lodList);

	// FUNCTION: LEGO1 0x100a9e20
	// FUNCTION: BETA10 0x1018c680

	// FUNCTION: BETA10 0x1007b540
//	public native void SetLODList(ViewLODList lodList);
//
	public native float IntrinsicImportance();                                  // vtable+0x04
	public native void UpdateWorldData();                                             // vtable+0x1c
//	public native void SetLocal2WorldWithWorldDataUpdate(@Const @ByRef Matrix4 p_transform); // vtable+0x20
//	public native void UpdateWorldDataWithTransform(@Const @ByRef Matrix4 p_transform);      // vtable+0x24
//	public native Group GetGeometry();                                           // vtable+0x30                               // vtable+0x34

	public native int GetLodLevel();
	public native void SetLodLevel(int p_lodLevel);

	public static native @Cast("unsigned char") byte SetLightSupport(@Cast("unsigned char") byte p_lightSupport);
}

// SYNTHETIC: LEGO1 0x100aa250
// ViewROI::`scalar deleting destructor'

// #endif // VIEWROI_H


// Parsed from decomp.h

// #ifndef DECOMP_H
// #define DECOMP_H

// #ifndef NDEBUG
// Disable size assertions for debug builds because the sizes differ between debug and release builds.
// The release LEGO1.DLL is what we ultimately want to decompile, so this is what we assert against.
// #undef ENABLE_DECOMP_ASSERTS
// #endif

// #if defined(ENABLE_DECOMP_ASSERTS)
// #define DECOMP_STATIC_ASSERT(V)
// 	namespace
// 	{
// 	typedef int foo[(V) ? 1 : -1];
// 	}
// #define DECOMP_SIZE_ASSERT(T, S) DECOMP_STATIC_ASSERT(sizeof(T) == S)
// #else
// #define DECOMP_STATIC_ASSERT(V)
// #define DECOMP_SIZE_ASSERT(T, S)
// #endif

// #ifndef sizeOfArray
// #define sizeOfArray(arr) (sizeof(arr) / sizeof(arr[0]))
// #endif

// #endif // DECOMP_H


}
