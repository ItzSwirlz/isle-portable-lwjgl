// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.github.itzswirlz.isleportablelwjgl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class LEGO1 extends LEGO1Config {
    static { Loader.load(); }

// Parsed from mxvideoparam.h

// #ifndef MXVIDEOPARAM_H
// #define MXVIDEOPARAM_H

// #include "compat.h"
// #include "lego1_export.h"
// #include "mxgeometry.h"
// #include "mxtypes.h"
// #include "mxvideoparamflags.h"

// #ifdef MINIWIN
// #else
// #include <ddraw.h>
// #endif

@Opaque public static class MxPalette extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MxPalette() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxPalette(Pointer p) { super(p); }
}

// SIZE 0x24
@NoOffset public static class MxVideoParam extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MxVideoParam(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MxVideoParam(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MxVideoParam position(long position) {
        return (MxVideoParam)super.position(position);
    }
    @Override public MxVideoParam getPointer(long i) {
        return new MxVideoParam((Pointer)this).offsetAddress(i);
    }

	public MxVideoParam() { super((Pointer)null); allocate(); }
	private native void allocate();
    // Manually commenting these out
//	public MxVideoParam(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		) { super((Pointer)null); allocate(p_rect, p_palette, p_backBuffers, p_flags); }
//	private native void allocate(
//			@ByRef MxRect32 p_rect,
//			MxPalette p_palette,
//			@Cast("MxULong") long p_backBuffers,
//			@ByRef MxVideoParamFlags p_flags
//		);
	public MxVideoParam(@ByRef MxVideoParam p_videoParam) { super((Pointer)null); allocate(p_videoParam); }
	private native void allocate(@ByRef MxVideoParam p_videoParam);
	public native void SetDeviceName(@Cast("char*") BytePointer p_deviceId);
	public native void SetDeviceName(@Cast("char*") ByteBuffer p_deviceId);
	public native void SetDeviceName(@Cast("char*") byte[] p_deviceId);
	public native @ByRef @Name("operator =") MxVideoParam put(@Const @ByRef MxVideoParam p_videoParam);

//	 FUNCTION: BETA10 0x100886e0
//	public native @ByRef MxVideoParamFlags Flags();
//
//	 FUNCTION: BETA10 0x100d81f0
///	public native @ByRef MxRect32 GetRect();

	// FUNCTION: BETA10 0x100d8210
	public native MxPalette GetPalette();

	// FUNCTION: BETA10 0x100d8240
	public native void SetPalette(MxPalette p_palette);

	// FUNCTION: BETA10 0x100d8270
	public native @Cast("char*") BytePointer GetDeviceName();

	// FUNCTION: BETA10 0x10141f60
	public native @Cast("MxU32") long GetBackBuffers();

	// FUNCTION: BETA10 0x10141fe0
	public native void SetBackBuffers(@Cast("MxU32") long p_backBuffers);
}

// #endif // MXVIDEOPARAM_H


// Parsed from decomp.h

// #ifndef DECOMP_H
// #define DECOMP_H

// #ifndef NDEBUG
// Disable size assertions for debug builds because the sizes differ between debug and release builds.
// The release LEGO1.DLL is what we ultimately want to decompile, so this is what we assert against.
// #undef ENABLE_DECOMP_ASSERTS
// #endif

// #if defined(ENABLE_DECOMP_ASSERTS)
// #define DECOMP_STATIC_ASSERT(V)
// 	namespace
// 	{
// 	typedef int foo[(V) ? 1 : -1];
// 	}
// #define DECOMP_SIZE_ASSERT(T, S) DECOMP_STATIC_ASSERT(sizeof(T) == S)
// #else
// #define DECOMP_STATIC_ASSERT(V)
// #define DECOMP_SIZE_ASSERT(T, S)
// #endif

// #ifndef sizeOfArray
// #define sizeOfArray(arr) (sizeof(arr) / sizeof(arr[0]))
// #endif

// #endif // DECOMP_H


}
